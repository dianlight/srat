default_install_hook_types: [pre-commit, post-commit, commit-msg]

repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v6.0.0
    hooks:
      - id: check-added-large-files
        args: ["--maxkb=1024"]
      - id: check-merge-conflict
      #- id: end-of-file-fixer
     #- id: trailing-whitespace
      - id: check-yaml
      - id: check-toml
      - id: check-xml
      - id: check-case-conflict
      - id: check-symlinks

  - repo: local
    hooks:
#      - id: gosec-backend
#        name: gosec (backend, high severity)
#        entry: bash -c 'make -C backend gosec'
#        language: system
#        pass_filenames: false
#        stages: [pre-commit]
#        files: '^backend/src/.*\.go$'

#      - id: go-build-test-backend
#        name: go build+test (backend quick)
#        entry: bash -c 'make -C backend build && make -C backend test -j1 --no-print-directory'
#        language: system
#        pass_filenames: false
#        stages: [pre-push]
#        files: '^backend/src/.*\.go$'

      - id: remove-go-mod-replace
        name: Remove go.mod replace lines
        stages: [pre-commit]
        entry: ./scripts/remove-go-mod-replace.sh
        language: system
        files: '^backend/src/go\.mod$'
        pass_filenames: true

      - id: restore-go-mod-replace
        name: Restore go.mod replace lines
        entry: ./scripts/restore-go-mod-replace.sh
        language: system
        always_run: true
        stages: [post-commit]
        pass_filenames: true

      #- id: update-frontend-package-version
      #  name: Update frontend package.json version from git tag
      #  stages: [pre-commit]
      #  entry: ./scripts/update-frontend-version.sh
      #  language: system
      #  files: '^frontend/package\.json$'
      #  pass_filenames: false

      - id: validate-links-format
        name: Validate link formats
        entry: bash
        language: system
        files: '\\.(md)$'
        args:
          - -c
          - |
            for file in "$@"; do
              if [ -f "$file" ]; then
                echo "Checking link formats in $file..."
                raw_urls=$(grep -n 'https\?://[^)]*[^)]' "$file" | grep -v '\\[.*\\](' | grep -v '^\\s*\\[.*\\]:' || true)
                if [ -n "$raw_urls" ]; then
                  echo "Warning: $file contains raw URLs that should be formatted as [text](url):"
                  echo "$raw_urls"
                fi
              fi
            done
            echo "Link format checks completed"

      - id: check-changelog-format
        name: Check CHANGELOG.md format
        entry: bash
        language: system
        files: '^CHANGELOG\\.md$'
        args:
          - -c
          - |
            if [ -f "CHANGELOG.md" ]; then
              echo "Validating CHANGELOG.md format..."
              if ! grep -q "## \[.*\] - [0-9]" CHANGELOG.md; then
                echo "Warning: CHANGELOG.md may not follow proper version format"
              fi
              echo "CHANGELOG.md format check completed"
            fi

      - id: format-markdown-basic
        name: Basic markdown formatting
        entry: bash
        language: system
        files: '\\.(md)$'
        args:
          - -c
          - |
            echo "Running basic markdown formatting..."
            for file in "$@"; do
              if [ -f "$file" ]; then
                sed -i 's/[[:space:]]*$//' "$file"
              fi
            done
            echo "Basic markdown formatting completed"

      - id: lint-markdown-basic
        name: Basic markdown linting
        entry: bash
        language: system
        files: '\\.(md)$'
        args:
          - -c
          - |
            echo "Running basic markdown linting..."
            for file in "$@"; do
              if [ -f "$file" ]; then
                if grep -n '[[:space:]]$' "$file" >/dev/null; then
                  echo "Error: $file contains trailing whitespace"
                  grep -n '[[:space:]]$' "$file"
                  exit 1
                fi
              fi
            done
            echo "Basic markdown linting passed"

  # tekwizely/pre-commit-golang is optional; local hooks cover our needs
