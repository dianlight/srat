# A revised and improved version of the GitHub Actions workflow.
# Key changes:
# 1. SAFER TAGGING: The "Update tag" step is now restricted to only run on dev builds.
# 2. CLEANER PERMISSIONS: Removed the unused "discussions: write" permission.
# 3. ROBUST DEV VERSIONING: The .devN suffix is now calculated by incrementing the last dev tag for the current version base.
# 4. MINOR CLEANUP: Added comments and removed redundant steps for clarity.

name: build

on:
  push:
    branches: ["main"]
  release:
    types: ["published"]
  pull_request:
    branches: ["main"]

# Permissions: Removed 'discussions: write' as it was unused.
permissions:
  contents: write

env:
  GOLANG_VERSION: "1.24.0"

jobs:
  setversion:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.calculate_version.outputs.version }}
    name: Set version
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0 # fetch-depth: 0 is required for git commands to see all history/tags

      - name: Calculate version
        id: calculate_version
        run: |
          #!/bin/bash
          set -euo pipefail # Strict mode

          CURRENT_YEAR=$(date -u +'%Y')
          CURRENT_MONTH=$(date -u +'%m')
          
          FINAL_VERSION=""

          # For a published release, the version is the tag name from the event
          if [[ "${{ github.event_name }}" == "release" && "${{ github.event.action }}" == "published" ]]; then
            echo "Detected published release event."
            FINAL_VERSION="${{ github.event.release.tag_name }}"
            if [[ -z "$FINAL_VERSION" ]]; then
              echo "Error: github.event.release.tag_name is empty for a published release event."
              exit 1
            fi
          else
            echo "Detected development build (push, PR, or non-published release)."

            # Initialize variables to keep track of the highest version found
            # MAX_VERSION_BASE will store the YYYY.MM.DD part (e.g., 2025.06.07)
            # MAX_DEV_INCREMENTAL will store the highest dev number for that base
            MAX_VERSION_BASE=""
            MAX_DEV_INCREMENTAL=-1

            # Get all tags for the current year and month that match the pattern
            # We'll parse them manually to ensure correct ordering (YYYY.MM.DD then .devN)
            # Using 'grep -E' to ensure only tags matching our format are considered.
            TAGS_FOR_CURRENT_PERIOD=$(git tag --list "${CURRENT_YEAR}.${CURRENT_MONTH}.*" | grep -E "^${CURRENT_YEAR}\.${CURRENT_MONTH}\.[0-9]+\.?(dev[0-9]+)?$" || true)
            echo "Relevant tags for current period: '$TAGS_FOR_CURRENT_PERIOD'"

            for TAG in $TAGS_FOR_CURRENT_PERIOD; do
              # Regex to capture the base (YYYY.MM.DD) and optional .devN
              if [[ "$TAG" =~ ^([0-9]{4})\.([0-9]{2})\.([0-9]+)(\.dev([0-9]+))?$ ]]; then
                TAG_YEAR="${BASH_REMATCH[1]}"
                TAG_MONTH="${BASH_REMATCH[2]}"
                TAG_DAY="${BASH_REMATCH[3]}"
                TAG_DEV_NUMBER="${BASH_REMATCH[5]}" # This will be empty if no .dev suffix

                CURRENT_TAG_BASE="${TAG_YEAR}.${TAG_MONTH}.${TAG_DAY}"
                CURRENT_TAG_DEV_NUM=${TAG_DEV_NUMBER:-0} # Default to 0 if .devN not present

                echo "  Processing tag: $TAG, Base: $CURRENT_TAG_BASE, DevNum: $CURRENT_TAG_DEV_NUM"

                # Compare current tag base with the maximum base found so far
                if [[ -z "$MAX_VERSION_BASE" || "$CURRENT_TAG_BASE" > "$MAX_VERSION_BASE" ]]; then
                  # This tag has a newer YYYY.MM.DD base. Update both base and dev incremental.
                  MAX_VERSION_BASE="$CURRENT_TAG_BASE"
                  MAX_DEV_INCREMENTAL="$CURRENT_TAG_DEV_NUM"
                  echo "    New max base found: $MAX_VERSION_BASE, highest dev for this base: $MAX_DEV_INCREMENTAL"
                elif [[ "$CURRENT_TAG_BASE" == "$MAX_VERSION_BASE" ]]; then
                  # Same YYYY.MM.DD base, now check if the dev number is higher
                  if (( CURRENT_TAG_DEV_NUM > MAX_DEV_INCREMENTAL )); then
                    MAX_DEV_INCREMENTAL="$CURRENT_TAG_DEV_NUM"
                    echo "    Same max base ($MAX_VERSION_BASE), but found higher dev number: $MAX_DEV_INCREMENTAL"
                  fi
                fi
              fi
            done

            # Determine the final VERSION_BASE and calculate the next NEW_DEV_INCREMENTAL
            if [[ -z "$MAX_VERSION_BASE" ]]; then
              # No matching tags found for the current month/year, start fresh with .0
              VERSION_BASE="${CURRENT_YEAR}.${CURRENT_MONTH}.0"
              NEW_DEV_INCREMENTAL=0
              echo "No matching tags found for current month. Setting default base: $VERSION_BASE.dev$NEW_DEV_INCREMENTAL"
            else
              # Found a max base, increment the dev number for that base
              VERSION_BASE="$MAX_VERSION_BASE"
              NEW_DEV_INCREMENTAL=$((MAX_DEV_INCREMENTAL + 1))
              echo "Max base found: $VERSION_BASE. Next dev increment: $NEW_DEV_INCREMENTAL"
            fi

            FINAL_VERSION="${VERSION_BASE}.dev${NEW_DEV_INCREMENTAL}"
          fi

          echo "Final calculated version: $FINAL_VERSION"
          echo "version=$FINAL_VERSION" >> "$GITHUB_OUTPUT"


  build:
    name: Test & Build
    runs-on: ubuntu-latest
    needs: setversion
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Setup go ${{ env.GOLANG_VERSION }}
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ env.GOLANG_VERSION }}
          cache-dependency-path: "**/*.sum"

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: frontend/package.json

      - name: Prepare env for ${{ needs.setversion.outputs.version }}
        run: |
          cd backend
          make patch
          cd ../frontend
          bun install
          cd ..

      - name: Test Backend ${{ needs.setversion.outputs.version }}
        # RECOMMENDATION: Investigate if 'sudo' is truly necessary for tests.
        # Running tests as root is a potential security risk.
        run: |
          cd backend
          sudo -E PATH="$PATH" make test
          cd ..
      
      - name: Test Frontend ${{ needs.setversion.outputs.version }} (not yet implemented)
        if: false 
        run: |
          cd frontend
          sudo -E PATH="$PATH" bun test
          cd ..
 
      - name: Check if tag ${{ needs.setversion.outputs.version }} exists
        if: github.event_name != 'pull_request'
        id: checkTag
        uses: mukunku/tag-exists-action@v1.6.0
        with: 
          tag: '${{ needs.setversion.outputs.version }}'
     
      - name: Update dev tag ${{ needs.setversion.outputs.version }}
        # CRITICAL IMPROVEMENT: This step is now safer.
        # It will ONLY run if the tag already exists AND it's a dev build (version contains '.dev').
        # This prevents accidentally moving a final release tag.
        uses: actions/github-script@v7
        if: |
          github.event_name != 'pull_request' &&
          steps.checkTag.outputs.exists == 'true' &&
          contains(needs.setversion.outputs.version, '.dev')
        with:
          script: |
            github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/${{ needs.setversion.outputs.version }}',
              sha: context.sha,
              force: true
            })

      - name: Create tag ${{ needs.setversion.outputs.version }}
        uses: actions/github-script@v7
        if: ${{ github.event_name != 'pull_request' && steps.checkTag.outputs.exists == 'false' }}
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ needs.setversion.outputs.version }}',
              sha: context.sha
            })

      - name: BuildAll
        id: built_all
        if: github.event_name != 'pull_request'
        run: |
          sudo -E PATH="$PATH" make ALL VERSION=${{ needs.setversion.outputs.version }}

      - name: Prepare temporary directory for zips
        if: github.event_name != 'pull_request'
        run: mkdir -p /tmp/build_artifacts
     
      - name: Find architectures and create zip archives
        id: create_zips
        if: github.event_name != 'pull_request'
        run: |
          # This script finds each compiled architecture and zips it.
          for arch_dir in backend/dist/*/; do
            arch=$(basename "$arch_dir")
            zip_file_path="/tmp/build_artifacts/srat_${arch}.zip"
            echo "Processing architecture: ${arch}"
            if [ -d "$arch_dir" ]; then
              (cd "$arch_dir" && zip -r "$zip_file_path" ./*)
              echo "Successfully created ${zip_file_path}"
            else
              echo "Warning: Directory ${arch_dir} does not exist. Skipping."
            fi
          done
      
      - name: Upload binaries as artifact
        if: steps.built_all.conclusion == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: binary-builds
          path: /tmp/build_artifacts/*.zip
          retention-days: 7
          overwrite: true

  create-release:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: [build, setversion]
    steps:
      - name: Delete old draft releases
        uses: hugo19941994/delete-draft-releases@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v4
        id: download_art
        with:
          name: binary-builds

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.setversion.outputs.version }}
          name: Release ${{ needs.setversion.outputs.version }}
          # Create a draft and pre-release for pushes to main, but a full release for 'release' events.
          draft: ${{ github.event_name != 'release' }}
          prerelease: ${{ github.event_name != 'release' }}
          generate_release_notes: true
          files: ${{ steps.download_art.outputs.download-path }}/*
