name: build

on:
  push:
    branches: ["main"]
  release:
    types: ["published"]
  pull_request:
    branches: ["main"]

permissions:
  contents: write
  discussions: write    

env:
  GOLANG_VERSION: "1.24.0"

jobs:
  setversion:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    name: Set version
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - name: Get version
        id: version
        uses: home-assistant/actions/helpers/version@master
      - run: echo ${{ steps.version.outputs.version }}

  build:
    name: Test & Build
    runs-on: ubuntu-latest
    needs: setversion
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0
    - name: Setup go ${{ env.GOLANG_VERSION }}
      uses: actions/setup-go@v5.5.0
      with:
        go-version: ${{ env.GOLANG_VERSION }}
        cache-dependency-path: "**/*.sum"

    - uses: oven-sh/setup-bun@v2
      with:
        bun-version-file: frontend/package.json
        #bun-version: latest

    #- run: "sudo apt-get install -y samba" 

    - name: Prepare env for ${{ needs.setversion.outputs.version }}
      run: |
        cd backend
        make patch
        cd ..
        cd frontend
        bun install
        cd ..
        #sudo .devcontainer/createTestDevices.sh 

    - name: Test ${{ needs.setversion.outputs.version }}
      run: |
        cd backend
        sudo -E PATH="$PATH" make test
        cd ..

    - name: Check if ${{ needs.setversion.outputs.version }} exists
      uses: mukunku/tag-exists-action@v1.6.0
      if: github.event_name != 'pull_request'
      id: checkTag
      with: 
        tag: '${{ needs.setversion.outputs.version }}'
    
    - run: echo ${{ steps.checkTag.outputs.exists }} ${{ github.event_name }}

    - name: Update tag ${{ needs.setversion.outputs.version }}
      uses: actions/github-script@v7
      if: ${{ github.event_name != 'pull_request' && steps.checkTag.outputs.exists == true}}
      with:
        script: |
            github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/${{ needs.setversion.outputs.version }}',
              sha: context.sha
            })

    - name: Create tag ${{ needs.setversion.outputs.version }}
      uses: actions/github-script@v7
      if: ${{ github.event_name != 'pull_request' && steps.checkTag.outputs.exists == false }}
      with:
        script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ needs.setversion.outputs.version }}',
              sha: context.sha
            })

    - name: BuildAll
      id: built_all
      if: github.event_name != 'pull_request'
      run: |
        sudo -E PATH="$PATH" make ALL VERSION=${{ needs.setversion.outputs.version }}

    - name: Prepare temporary directory for zips
      run: |
          mkdir -p /tmp/build_artifacts
  
    - name: Find architectures and create zip archives
      id: create_zips
      run: |
        # Initialize an array to store paths of created zip files
        declare -a zip_files_created
        
        # Loop through each architecture directory under 'backend/dist'
        for arch_dir in backend/dist/*/; do
          # Extract the architecture name (e.g., 'amd64', 'arm64')
          arch=$(basename "$arch_dir")
          
          # Define the output zip file path
          zip_file_path="/tmp/build_artifacts/srat_${arch}.zip"
          
          echo "Processing architecture: ${arch}"
          echo "Zipping contents of '${arch_dir}' into '${zip_file_path}'"
          
          # Change directory into the architecture folder
          # Then, zip all its contents (files and subdirectories)
          # The -r flag is for recursive inclusion
          # The ./* pattern ensures that only the contents are zipped, not the arch_dir itself
          if [ -d "$arch_dir" ]; then
            (cd "$arch_dir" && zip -r "$zip_file_path" ./*)
            echo "Successfully created ${zip_file_path}"
            # Add the created zip file path to the array
            zip_files_created+=("$zip_file_path")
          else
            echo "Warning: Directory ${arch_dir} does not exist or is not a directory. Skipping."
          fi
        done
        
        # Output the list of created zip files as a comma-separated string
        # This makes it accessible to subsequent steps
        echo "zip_paths=${zip_files_created[*]}" >> "$GITHUB_OUTPUT"

    - name: List generated zip files (for debugging)
      run: ls -l /tmp/build_artifacts/
  

    - name: Upload 
      if: steps.built_all.conclusion == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: binary
        path: /tmp/build_artifacts/*
        retention-days: 7
        overwrite: true

  create-release:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: 
      - build
      - setversion
    steps:
    - name: Delete old drafts
      uses: hugo19941994/delete-draft-releases@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

    - uses: actions/download-artifact@v4
      id: download_art
      with:
        merge-multiple: true

  
    - name: Create Release and Upload Assets from ${{ steps.download_art.outputs.download-path }}
      uses: softprops/action-gh-release@v2
      with:
          tag_name: ${{ github.event.release.tag_name || format('{0}',needs.setversion.outputs.version) }}
          name: Release ${{ github.event.release.tag_name || format('{0}',needs.setversion.outputs.version) }}
          draft: ${{ github.event_name !='release' }}
          prerelease: ${{ github.event_name !='release' }}
          generate_release_notes: true
          files: ${{ steps.download_art.outputs.download-path }}/* 
          body: |
            # Release Notes for ${{ github.event.release.tag_name || format('{0}',needs.setversion.outputs.version) }}
            
            Please find the assets attached below.
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GITHUB_TOKEN is automatically provided by GitHub
