# A revised and improved version of the GitHub Actions workflow.
# Key changes:
# 1. SAFER TAGGING: The "Update tag" step is now restricted to only run on dev builds.
# 2. CLEANER PERMISSIONS: Removed the unused "discussions: write" permission.
# 3. ROBUST DEV VERSIONING: The .devN suffix is now calculated by incrementing the last dev tag for the current version base.
# 4. MINOR CLEANUP: Added comments and removed redundant steps for clarity.

name: build

on:
  push:
    branches: ["main"]
  release:
    types: ["published"]
  pull_request:
    branches: ["main"]

# Permissions: Removed 'discussions: write' as it was unused.
permissions:
  contents: write

env:
  GOLANG_VERSION: "1.24.0"

jobs:
  setversion:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.calculate_version.outputs.version }}
    name: Set version
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0 # fetch-depth: 0 is required for git commands to see all history/tags
      - name: Calculate version
        id: calculate_version
        run: |
          set -euo pipefail
          CURRENT_YEAR=$(date -u +'%Y')
          CURRENT_MONTH=$(date -u +'%-m')
          CURRENT_PERIOD_PREFIX="${CURRENT_YEAR}.${CURRENT_MONTH}"
      
          TAGS=$(git tag --list "${CURRENT_PERIOD_PREFIX}.*" | sort -V)
          MAX_INC=-1
          MAX_DEV=-1
          for TAG in $TAGS; do
            if [[ "$TAG" =~ ^${CURRENT_PERIOD_PREFIX}\.([0-9]+)$ ]]; then
              INC=${BASH_REMATCH[1]}
              if (( INC > MAX_INC )); then
                MAX_INC=$INC
                MAX_DEV=-1
              fi
            elif [[ "$TAG" =~ ^${CURRENT_PERIOD_PREFIX}\.([0-9]+)-dev\.([0-9]+)$ ]]; then
              INC=${BASH_REMATCH[1]}
              DEV=${BASH_REMATCH[2]}
              if (( INC > MAX_INC )); then
                MAX_INC=$INC
                MAX_DEV=$DEV
              elif (( INC == MAX_INC && DEV > MAX_DEV )); then
                MAX_DEV=$DEV
              fi
            fi
          done
      
          if [[ "${{ github.event_name }}" == "release" && "${{ github.event.action }}" == "published" ]]; then
            if (( MAX_INC == -1 )); then
              VERSION="${CURRENT_PERIOD_PREFIX}.0"
            else
              VERSION="${CURRENT_PERIOD_PREFIX}.$((MAX_INC+1))"
            fi
          else
            if (( MAX_INC == -1 )); then
              VERSION="${CURRENT_PERIOD_PREFIX}.0-dev.0"
            else
              if git tag --list "${CURRENT_PERIOD_PREFIX}.$MAX_INC" | grep -q .; then
                VERSION="${CURRENT_PERIOD_PREFIX}.$((MAX_INC+1))-dev.0"
              else
                VERSION="${CURRENT_PERIOD_PREFIX}.$MAX_INC-dev.$((MAX_DEV+1))"
              fi
            fi
          fi
          echo "Calculated version: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"


  build:
    name: Test & Build
    runs-on: ubuntu-latest
    needs: setversion
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Setup go ${{ env.GOLANG_VERSION }}
        uses: actions/setup-go@v5.5.0
        with:
          go-version: ${{ env.GOLANG_VERSION }}
          cache-dependency-path: "**/*.sum"

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version-file: frontend/package.json

      - name: Prepare env for ${{ needs.setversion.outputs.version }}
        run: |
          cd backend
          make patch
          cd ../frontend
          bun install
          cd ..

      - name: Test Backend ${{ needs.setversion.outputs.version }}
        # RECOMMENDATION: Investigate if 'sudo' is truly necessary for tests.
        # Running tests as root is a potential security risk.
        run: |
          cd backend
          sudo -E PATH="$PATH" make test
          cd ..
      
      - name: Test Frontend ${{ needs.setversion.outputs.version }} (not yet implemented)
        if: false 
        run: |
          cd frontend
          sudo -E PATH="$PATH" bun test
          cd ..
 
      - name: Check if tag ${{ needs.setversion.outputs.version }} exists
        if: github.event_name != 'pull_request'
        id: checkTag
        uses: mukunku/tag-exists-action@v1.6.0
        with: 
          tag: '${{ needs.setversion.outputs.version }}'
     
      - name: Update dev tag ${{ needs.setversion.outputs.version }}
        # CRITICAL IMPROVEMENT: This step is now safer.
        # It will ONLY run if the tag already exists AND it's a dev build (version contains '.dev').
        # This prevents accidentally moving a final release tag.
        uses: actions/github-script@v7
        if: |
          github.event_name != 'pull_request' &&
          steps.checkTag.outputs.exists == 'true' &&
          contains(needs.setversion.outputs.version, '.dev')
        with:
          script: |
            github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/${{ needs.setversion.outputs.version }}',
              sha: context.sha,
              force: true
            })

      - name: Create tag ${{ needs.setversion.outputs.version }}
        uses: actions/github-script@v7
        if: ${{ github.event_name != 'pull_request' && steps.checkTag.outputs.exists == 'false' }}
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ needs.setversion.outputs.version }}',
              sha: context.sha
            })

      - name: BuildAll
        id: built_all
        if: github.event_name != 'pull_request'
        run: |
          sudo -E PATH="$PATH" make ALL VERSION=${{ needs.setversion.outputs.version }}

      - name: Prepare temporary directory for zips
        if: github.event_name != 'pull_request'
        run: mkdir -p /tmp/build_artifacts
     
      - name: Find architectures and create zip archives
        id: create_zips
        if: github.event_name != 'pull_request'
        run: |
          # This script finds each compiled architecture and zips it.
          for arch_dir in backend/dist/*/; do
            arch=$(basename "$arch_dir")
            zip_file_path="/tmp/build_artifacts/srat_${arch}.zip"
            echo "Processing architecture: ${arch}"
            if [ -d "$arch_dir" ]; then
              (cd "$arch_dir" && zip -r "$zip_file_path" ./*)
              echo "Successfully created ${zip_file_path}"
            else
              echo "Warning: Directory ${arch_dir} does not exist. Skipping."
            fi
          done
      
      - name: Upload binaries as artifact
        if: steps.built_all.conclusion == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: binary-builds
          path: /tmp/build_artifacts/*.zip
          retention-days: 7
          overwrite: true

  create-release:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: [build, setversion]
    steps:
      - name: Delete old draft releases
        uses: hugo19941994/delete-draft-releases@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v4
        id: download_art
        with:
          name: binary-builds

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.setversion.outputs.version }}
          name: Release ${{ needs.setversion.outputs.version }}
          # Create a draft and pre-release for pushes to main, but a full release for 'release' events.
          draft: ${{ github.event_name != 'release' }}
          prerelease: ${{ github.event_name != 'release' }}
          generate_release_notes: true
          files: ${{ steps.download_art.outputs.download-path }}/*
