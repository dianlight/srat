name: build

on:
  push:
    branches: ["main"]
  release:
    types: ["published"]
  pull_request:
    branches: ["main"]

permissions:
  contents: write
  discussions: write    

env:
  GOLANG_VERSION: "1.24.0"

jobs:
  setversion:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    name: Set version
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0
      - name: Get version
        id: version
        uses: home-assistant/actions/helpers/version@master
      - run: echo ${{ steps.version.outputs.version }}

  test:
    name: Test ${{ matrix.variant.name }}
    runs-on: ubuntu-latest
    needs: setversion
    strategy:
      matrix:
        variant:
          #- {"name": "srat_i386","suffix":"_386", "args": "GOARCH=386"}
          - {"name": "srat_amd64","suffix":"_amd64", "args": "GOARCH=amd64"}
          #- {"name": "srat_armhf","suffix":"_armhf", "args": "GOARM=6 GOARCH=arm"}
          - {"name": "srat_armv7","suffix":"_armv7", "args": "GOARM=7 GOARCH=arm"}
          - {"name": "srat_aarch64", "suffix":"_aarch64","args": "GOARCH=arm64"}
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0
    - name: Setup go ${{ env.GOLANG_VERSION }}
      uses: actions/setup-go@v5.0.2
      with:
        go-version: ${{ env.GOLANG_VERSION }}

    - uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - run: "sudo apt-get install -y samba" 

    - name: Prepare env for ${{ matrix.variant.name }} ${{ needs.setversion.outputs.version }}
      run: |
        GOBIN=/usr/local/bin/ go install github.com/rogpeppe/gohack@latest
        GOBIN=/usr/local/bin/ go install github.com/rakyll/gotest@latest
        GOBIN=/usr/local/bin/ go install github.com/Antonboom/testifylint@latest
        GOBIN=/usr/local/bin/ go install github.com/ramya-rao-a/go-outline@latest
        GOBIN=/usr/local/bin/ go install go.uber.org/mock/mockgen@latest
        GOBIN=/usr/local/bin/ go install github.com/air-verse/air@latest
        cd frontend
        bun install
        cd ..
        sudo .devcontainer/createTestDevices.sh 

    - name: Test ${{ matrix.variant.name }} ${{ needs.setversion.outputs.version }}
      run: |
        cd backend
        sudo -E PATH="$PATH" make test
        cd ..

  build:
    name: Build ${{ matrix.variant.name }}
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs:
      - setversion
      - test
    strategy:
      matrix:
        variant:
          #- {"name": "srat_i386","suffix":"_386", "args": "GOARCH=386"}
          - {"name": "srat_amd64","suffix":"_amd64", "args": "GOARCH=amd64"}
          #- {"name": "srat_armhf","suffix":"_armhf", "args": "GOARM=6 GOARCH=arm"}
          - {"name": "srat_armv7","suffix":"_armv7", "args": "GOARM=7 GOARCH=arm"}
          - {"name": "srat_aarch64", "suffix":"_aarch64","args": "GOARCH=arm64"}
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4.2.2
      with:
        fetch-depth: 0
    - name: Setup go ${{ env.GOLANG_VERSION }}
      uses: actions/setup-go@v5.0.2
      with:
        go-version: ${{ env.GOLANG_VERSION }}

    - uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - run: "sudo apt-get install -y samba" 

    - name: Prepare env for ${{ matrix.variant.name }} ${{ needs.setversion.outputs.version }}
      run: |
        GOBIN=/usr/local/bin/ go install github.com/rogpeppe/gohack@latest
        GOBIN=/usr/local/bin/ go install github.com/rakyll/gotest@latest
        GOBIN=/usr/local/bin/ go install github.com/Antonboom/testifylint@latest
        GOBIN=/usr/local/bin/ go install github.com/ramya-rao-a/go-outline@latest
        GOBIN=/usr/local/bin/ go install go.uber.org/mock/mockgen@latest
        GOBIN=/usr/local/bin/ go install github.com/air-verse/air@latest
        cd frontend
        bun install
        cd ..

    - name: Check if ${{ needs.setversion.outputs.version }} exists
      uses: mukunku/tag-exists-action@v1.4.0
      id: checkTag
      with: 
        tag: '${{ needs.setversion.outputs.version }}'
    
    - run: echo ${{ steps.checkTag.outputs.exists }}

    - name: Update tag ${{ needs.setversion.outputs.version }}
      uses: actions/github-script@v7
      if: ${{ steps.checkTag.outputs.exists == true}}
      with:
        script: |
            github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'tags/${{ needs.setversion.outputs.version }}',
              sha: context.sha
            })

    - name: Create tag ${{ needs.setversion.outputs.version }}
      uses: actions/github-script@v7
      if: ${{ steps.checkTag.outputs.exists == false }}
      with:
        script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ needs.setversion.outputs.version }}',
              sha: context.sha
            })


    - name: Build ${{ matrix.variant.name }} ${{ needs.setversion.outputs.version }}
      run: |
        sudo -E PATH="$PATH" make BUILD AARGS="${{ matrix.variant.args }}" SUFFIX="${{ matrix.variant.suffix }}" VERSION=${{ needs.setversion.outputs.version }}

    - name: Upload ${{ matrix.variant.name }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.variant.name }}
        path: backend/dist/${{ matrix.variant.name }}
        retention-days: 7
        overwrite: true

  create-release:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: 
      - build
      - setversion
    steps:
    - uses: actions/download-artifact@v4
      with:
        merge-multiple: true
    - name: Upload release asset for ${{ github.event.release.tag_name || format('{0}',needs.setversion.outputs.version) }}
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.release.tag_name || format('{0}',needs.setversion.outputs.version) }}
        name: Release ${{ github.event.release.tag_name || format('{0}',needs.setversion.outputs.version) }}
        draft: ${{ github.event_name !='release' }}
        prerelease: ${{ github.event_name !='release' }}
        generate_release_notes: true
        files: |
          ${{ github.workspace }}/srat_*

#    - name: Signing asset
#      if: github.event_name == 'release'
#      uses: home-assistant/actions/helpers/codenotary@master
#      with:
#        source: "${{ github.workspace }}/${{ matrix.variant.name }}"
#        user: ${{ secrets.VCN_USER }}
#        password: ${{ secrets.VCN_PASSWORD }}
#        organisation: ${{ secrets.VCN_ORG }}