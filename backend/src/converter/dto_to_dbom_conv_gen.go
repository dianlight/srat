// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converter

import (
	dbom "github.com/dianlight/srat/dbom"
	dto "github.com/dianlight/srat/dto"
	xhashes "github.com/shomali11/util/xhashes"
	osutil "github.com/snapcore/snapd/osutil"
	datatypes "gorm.io/datatypes"
)

type DtoToDbomConverterImpl struct{}

func (c *DtoToDbomConverterImpl) ExportedShareToSharedResourceNoMountPointData(source dbom.ExportedShare, target *dto.SharedResource) error {
	if source.Name != "" {
		target.Name = source.Name
	}
	if source.Disabled != nil {
		target.Disabled = source.Disabled
	}
	if source.Users != nil {
		target.Users = make([]dto.User, len(source.Users))
		for i := 0; i < len(source.Users); i++ {
			target.Users[i] = c.dbomSambaUserToDtoUser(source.Users[i])
		}
	}
	if source.RoUsers != nil {
		target.RoUsers = make([]dto.User, len(source.RoUsers))
		for j := 0; j < len(source.RoUsers); j++ {
			target.RoUsers[j] = c.dbomSambaUserToDtoUser(source.RoUsers[j])
		}
	}
	if source.TimeMachine != false {
		pBool := source.TimeMachine
		target.TimeMachine = &pBool
	}
	if source.RecycleBin != false {
		pBool2 := source.RecycleBin
		target.RecycleBin = &pBool2
	}
	if source.GuestOk != false {
		pBool3 := source.GuestOk
		target.GuestOk = &pBool3
	}
	if source.TimeMachineMaxSize != "" {
		pString := source.TimeMachineMaxSize
		target.TimeMachineMaxSize = &pString
	}
	if source.Usage != "" {
		target.Usage = source.Usage
	}
	target.VetoFiles = c.datatypesJSONSliceToStringList(source.VetoFiles)
	return nil
}
func (c *DtoToDbomConverterImpl) MountFlagsToMountDataFlags(source []dto.MountFlag) dbom.MounDataFlags {
	var dbomMounDataFlags dbom.MounDataFlags
	if source != nil {
		dbomMounDataFlags = make(dbom.MounDataFlags, len(source))
		for i := 0; i < len(source); i++ {
			dbomMounDataFlags[i] = c.dtoMountFlagToDbomMounDataFlag(source[i])
		}
	}
	return dbomMounDataFlags
}
func (c *DtoToDbomConverterImpl) MountPointDataToMountPointPath(source dto.MountPointData, target *dbom.MountPointPath) error {
	if source.Path != "" {
		target.Path = source.Path
	}
	if source.Type != "" {
		target.Type = source.Type
	}
	if source.Device != "" {
		target.Device = source.Device
	}
	if source.FSType != nil {
		target.FSType = *source.FSType
	}
	target.Flags = c.pDtoMountFlagsToPDbomMounDataFlags(source.Flags)
	target.Data = c.pDtoMountFlagsToPDbomMounDataFlags(source.CustomFlags)
	if source.IsToMountAtStartup != nil {
		target.IsToMountAtStartup = source.IsToMountAtStartup
	}
	if source.Shares != nil {
		target.Shares = make([]dbom.ExportedShare, len(source.Shares))
		for i := 0; i < len(source.Shares); i++ {
			dbomExportedShare, err := c.sharedResourceToExportedShare(source.Shares[i])
			if err != nil {
				return err
			}
			target.Shares[i] = dbomExportedShare
		}
	}
	return nil
}
func (c *DtoToDbomConverterImpl) MountPointPathToMountPointData(source dbom.MountPointPath, target *dto.MountPointData) error {
	if source.Path != "" {
		target.Path = source.Path
	}
	if source.Path != "" {
		target.PathHash = xhashes.SHA1(source.Path)
	}
	if source.Type != "" {
		target.Type = source.Type
	}
	if source.FSType != "" {
		pString := source.FSType
		target.FSType = &pString
	}
	pDtoMountFlags, err := c.pDbomMounDataFlagsToPDtoMountFlags(source.Flags)
	if err != nil {
		return err
	}
	target.Flags = pDtoMountFlags
	pDtoMountFlags2, err := c.pDbomMounDataFlagsToPDtoMountFlags(source.Data)
	if err != nil {
		return err
	}
	target.CustomFlags = pDtoMountFlags2
	if source.Device != "" {
		target.Device = source.Device
	}
	if source.Path != "" {
		xbool, err := osutil.IsMounted(source.Path)
		if err != nil {
			return err
		}
		target.IsMounted = xbool
	}
	if source.Path != "" {
		xbool2, err := isPathDirNotExists(source.Path)
		if err != nil {
			return err
		}
		target.IsInvalid = xbool2
	}
	if source.IsToMountAtStartup != nil {
		target.IsToMountAtStartup = source.IsToMountAtStartup
	}
	if source.Shares != nil {
		target.Shares = make([]dto.SharedResource, len(source.Shares))
		for i := 0; i < len(source.Shares); i++ {
			dtoSharedResource, err := c.exportedShareToSharedResource(source.Shares[i])
			if err != nil {
				return err
			}
			target.Shares[i] = dtoSharedResource
		}
	}
	return nil
}
func (c *DtoToDbomConverterImpl) SambaUserToUser(source dbom.SambaUser, target *dto.User) error {
	target.Username = source.Username
	target.Password = source.Password
	target.IsAdmin = source.IsAdmin
	if source.RwShares != nil {
		target.RwShares = make([]string, len(source.RwShares))
		for i := 0; i < len(source.RwShares); i++ {
			target.RwShares[i] = exportedShareToString(source.RwShares[i])
		}
	}
	if source.RoShares != nil {
		target.RoShares = make([]string, len(source.RoShares))
		for j := 0; j < len(source.RoShares); j++ {
			target.RoShares[j] = exportedShareToString(source.RoShares[j])
		}
	}
	return nil
}
func (c *DtoToDbomConverterImpl) SharedResourceToExportedShareNoUsersNoMountPointPath(source dto.SharedResource, target *dbom.ExportedShare) error {
	if source.Name != "" {
		target.Name = source.Name
	}
	if source.Disabled != nil {
		target.Disabled = source.Disabled
	}
	target.VetoFiles = c.stringListToDatatypesJSONSlice(source.VetoFiles)
	if source.TimeMachine != nil {
		target.TimeMachine = *source.TimeMachine
	}
	if source.RecycleBin != nil {
		target.RecycleBin = *source.RecycleBin
	}
	if source.GuestOk != nil {
		target.GuestOk = *source.GuestOk
	}
	if source.TimeMachineMaxSize != nil {
		target.TimeMachineMaxSize = *source.TimeMachineMaxSize
	}
	if source.Usage != "" {
		target.Usage = source.Usage
	}
	var pString *string
	if source.MountPointData != nil {
		pString = &source.MountPointData.Path
	}
	if pString != nil {
		target.MountPointDataPath = *pString
	}
	return nil
}
func (c *DtoToDbomConverterImpl) UserToSambaUser(source dto.User, target *dbom.SambaUser) error {
	if source.Username != "" {
		target.Username = source.Username
	}
	if source.Password != "" {
		target.Password = source.Password
	}
	if source.IsAdmin != false {
		target.IsAdmin = source.IsAdmin
	}
	if source.RwShares != nil {
		target.RwShares = make([]dbom.ExportedShare, len(source.RwShares))
		for i := 0; i < len(source.RwShares); i++ {
			target.RwShares[i] = stringToExportedShare(source.RwShares[i])
		}
	}
	if source.RoShares != nil {
		target.RoShares = make([]dbom.ExportedShare, len(source.RoShares))
		for j := 0; j < len(source.RoShares); j++ {
			target.RoShares[j] = stringToExportedShare(source.RoShares[j])
		}
	}
	return nil
}
func (c *DtoToDbomConverterImpl) datatypesJSONSliceToStringList(source datatypes.JSONSlice[string]) []string {
	var stringList []string
	if source != nil {
		stringList = make([]string, len(source))
		for i := 0; i < len(source); i++ {
			stringList[i] = source[i]
		}
	}
	return stringList
}
func (c *DtoToDbomConverterImpl) dbomMounDataFlagsToDtoMountFlags(source dbom.MounDataFlags) (dto.MountFlags, error) {
	var dtoMountFlags dto.MountFlags
	if source != nil {
		dtoMountFlags = make(dto.MountFlags, len(source))
		for i := 0; i < len(source); i++ {
			dtoMountFlag, err := c.mountDataFlagToMountFlag(source[i])
			if err != nil {
				return nil, err
			}
			dtoMountFlags[i] = dtoMountFlag
		}
	}
	return dtoMountFlags, nil
}
func (c *DtoToDbomConverterImpl) dbomMountPointPathToPDtoMountPointData(source dbom.MountPointPath) (*dto.MountPointData, error) {
	dtoMountPointData, err := c.mountPointPathToMountPointData(source)
	if err != nil {
		return nil, err
	}
	return &dtoMountPointData, nil
}
func (c *DtoToDbomConverterImpl) dbomSambaUserToDtoUser(source dbom.SambaUser) dto.User {
	var dtoUser dto.User
	dtoUser.Username = source.Username
	dtoUser.Password = source.Password
	dtoUser.IsAdmin = source.IsAdmin
	if source.RwShares != nil {
		dtoUser.RwShares = make([]string, len(source.RwShares))
		for i := 0; i < len(source.RwShares); i++ {
			dtoUser.RwShares[i] = exportedShareToString(source.RwShares[i])
		}
	}
	if source.RoShares != nil {
		dtoUser.RoShares = make([]string, len(source.RoShares))
		for j := 0; j < len(source.RoShares); j++ {
			dtoUser.RoShares[j] = exportedShareToString(source.RoShares[j])
		}
	}
	return dtoUser
}
func (c *DtoToDbomConverterImpl) dtoMountFlagToDbomMounDataFlag(source dto.MountFlag) dbom.MounDataFlag {
	var dbomMounDataFlag dbom.MounDataFlag
	dbomMounDataFlag.Name = source.Name
	dbomMounDataFlag.NeedsValue = source.NeedsValue
	dbomMounDataFlag.FlagValue = source.FlagValue
	return dbomMounDataFlag
}
func (c *DtoToDbomConverterImpl) dtoMountFlagsToDbomMounDataFlags(source dto.MountFlags) dbom.MounDataFlags {
	var dbomMounDataFlags dbom.MounDataFlags
	if source != nil {
		dbomMounDataFlags = make(dbom.MounDataFlags, len(source))
		for i := 0; i < len(source); i++ {
			dbomMounDataFlags[i] = c.dtoMountFlagToDbomMounDataFlag(source[i])
		}
	}
	return dbomMounDataFlags
}
func (c *DtoToDbomConverterImpl) exportedShareToSharedResource(source dbom.ExportedShare) (dto.SharedResource, error) {
	var dtoSharedResource dto.SharedResource
	dtoSharedResource.Name = source.Name
	dtoSharedResource.Disabled = source.Disabled
	if source.Users != nil {
		dtoSharedResource.Users = make([]dto.User, len(source.Users))
		for i := 0; i < len(source.Users); i++ {
			dtoSharedResource.Users[i] = c.dbomSambaUserToDtoUser(source.Users[i])
		}
	}
	if source.RoUsers != nil {
		dtoSharedResource.RoUsers = make([]dto.User, len(source.RoUsers))
		for j := 0; j < len(source.RoUsers); j++ {
			dtoSharedResource.RoUsers[j] = c.dbomSambaUserToDtoUser(source.RoUsers[j])
		}
	}
	pBool := source.TimeMachine
	dtoSharedResource.TimeMachine = &pBool
	pBool2 := source.RecycleBin
	dtoSharedResource.RecycleBin = &pBool2
	pBool3 := source.GuestOk
	dtoSharedResource.GuestOk = &pBool3
	pString := source.TimeMachineMaxSize
	dtoSharedResource.TimeMachineMaxSize = &pString
	dtoSharedResource.Usage = source.Usage
	dtoSharedResource.VetoFiles = c.datatypesJSONSliceToStringList(source.VetoFiles)
	pDtoMountPointData, err := c.dbomMountPointPathToPDtoMountPointData(source.MountPointData)
	if err != nil {
		return dtoSharedResource, err
	}
	dtoSharedResource.MountPointData = pDtoMountPointData
	return dtoSharedResource, nil
}
func (c *DtoToDbomConverterImpl) mountDataFlagToMountFlag(source dbom.MounDataFlag) (dto.MountFlag, error) {
	var dtoMountFlag dto.MountFlag
	dtoMountFlag.Name = source.Name
	dtoMountFlag.NeedsValue = source.NeedsValue
	dtoMountFlag.FlagValue = source.FlagValue
	return dtoMountFlag, nil
}
func (c *DtoToDbomConverterImpl) mountPointDataToMountPointPath(source dto.MountPointData) (dbom.MountPointPath, error) {
	var dbomMountPointPath dbom.MountPointPath
	dbomMountPointPath.Path = source.Path
	dbomMountPointPath.Type = source.Type
	dbomMountPointPath.Device = source.Device
	if source.FSType != nil {
		dbomMountPointPath.FSType = *source.FSType
	}
	dbomMountPointPath.Flags = c.pDtoMountFlagsToPDbomMounDataFlags(source.Flags)
	dbomMountPointPath.Data = c.pDtoMountFlagsToPDbomMounDataFlags(source.CustomFlags)
	dbomMountPointPath.IsToMountAtStartup = source.IsToMountAtStartup
	if source.Shares != nil {
		dbomMountPointPath.Shares = make([]dbom.ExportedShare, len(source.Shares))
		for i := 0; i < len(source.Shares); i++ {
			dbomExportedShare, err := c.sharedResourceToExportedShare(source.Shares[i])
			if err != nil {
				return dbomMountPointPath, err
			}
			dbomMountPointPath.Shares[i] = dbomExportedShare
		}
	}
	return dbomMountPointPath, nil
}
func (c *DtoToDbomConverterImpl) mountPointPathToMountPointData(source dbom.MountPointPath) (dto.MountPointData, error) {
	var dtoMountPointData dto.MountPointData
	dtoMountPointData.Path = source.Path
	dtoMountPointData.PathHash = xhashes.SHA1(source.Path)
	dtoMountPointData.Type = source.Type
	pString := source.FSType
	dtoMountPointData.FSType = &pString
	pDtoMountFlags, err := c.pDbomMounDataFlagsToPDtoMountFlags(source.Flags)
	if err != nil {
		return dtoMountPointData, err
	}
	dtoMountPointData.Flags = pDtoMountFlags
	pDtoMountFlags2, err := c.pDbomMounDataFlagsToPDtoMountFlags(source.Data)
	if err != nil {
		return dtoMountPointData, err
	}
	dtoMountPointData.CustomFlags = pDtoMountFlags2
	dtoMountPointData.Device = source.Device
	xbool, err := osutil.IsMounted(source.Path)
	if err != nil {
		return dtoMountPointData, err
	}
	dtoMountPointData.IsMounted = xbool
	xbool2, err := isPathDirNotExists(source.Path)
	if err != nil {
		return dtoMountPointData, err
	}
	dtoMountPointData.IsInvalid = xbool2
	dtoMountPointData.IsToMountAtStartup = source.IsToMountAtStartup
	if source.Shares != nil {
		dtoMountPointData.Shares = make([]dto.SharedResource, len(source.Shares))
		for i := 0; i < len(source.Shares); i++ {
			dtoSharedResource, err := c.exportedShareToSharedResource(source.Shares[i])
			if err != nil {
				return dtoMountPointData, err
			}
			dtoMountPointData.Shares[i] = dtoSharedResource
		}
	}
	return dtoMountPointData, nil
}
func (c *DtoToDbomConverterImpl) pDbomMounDataFlagsToPDtoMountFlags(source *dbom.MounDataFlags) (*dto.MountFlags, error) {
	var pDtoMountFlags *dto.MountFlags
	if source != nil {
		dtoMountFlags, err := c.dbomMounDataFlagsToDtoMountFlags((*source))
		if err != nil {
			return nil, err
		}
		pDtoMountFlags = &dtoMountFlags
	}
	return pDtoMountFlags, nil
}
func (c *DtoToDbomConverterImpl) pDtoMountFlagsToPDbomMounDataFlags(source *dto.MountFlags) *dbom.MounDataFlags {
	var pDbomMounDataFlags *dbom.MounDataFlags
	if source != nil {
		dbomMounDataFlags := c.dtoMountFlagsToDbomMounDataFlags((*source))
		pDbomMounDataFlags = &dbomMounDataFlags
	}
	return pDbomMounDataFlags
}
func (c *DtoToDbomConverterImpl) pDtoMountPointDataToDbomMountPointPath(source *dto.MountPointData) (dbom.MountPointPath, error) {
	var dbomMountPointPath dbom.MountPointPath
	if source != nil {
		dbomMountPointPath2, err := c.mountPointDataToMountPointPath((*source))
		if err != nil {
			return dbomMountPointPath, err
		}
		dbomMountPointPath = dbomMountPointPath2
	}
	return dbomMountPointPath, nil
}
func (c *DtoToDbomConverterImpl) sharedResourceToExportedShare(source dto.SharedResource) (dbom.ExportedShare, error) {
	var dbomExportedShare dbom.ExportedShare
	dbomExportedShare.Name = source.Name
	dbomExportedShare.Disabled = source.Disabled
	if source.Users != nil {
		dbomExportedShare.Users = make([]dbom.SambaUser, len(source.Users))
		for i := 0; i < len(source.Users); i++ {
			dbomSambaUser, err := c.userToSambaUser(source.Users[i])
			if err != nil {
				return dbomExportedShare, err
			}
			dbomExportedShare.Users[i] = dbomSambaUser
		}
	}
	if source.RoUsers != nil {
		dbomExportedShare.RoUsers = make([]dbom.SambaUser, len(source.RoUsers))
		for j := 0; j < len(source.RoUsers); j++ {
			dbomSambaUser2, err := c.userToSambaUser(source.RoUsers[j])
			if err != nil {
				return dbomExportedShare, err
			}
			dbomExportedShare.RoUsers[j] = dbomSambaUser2
		}
	}
	dbomExportedShare.VetoFiles = c.stringListToDatatypesJSONSlice(source.VetoFiles)
	if source.TimeMachine != nil {
		dbomExportedShare.TimeMachine = *source.TimeMachine
	}
	if source.RecycleBin != nil {
		dbomExportedShare.RecycleBin = *source.RecycleBin
	}
	if source.GuestOk != nil {
		dbomExportedShare.GuestOk = *source.GuestOk
	}
	if source.TimeMachineMaxSize != nil {
		dbomExportedShare.TimeMachineMaxSize = *source.TimeMachineMaxSize
	}
	dbomExportedShare.Usage = source.Usage
	var pString *string
	if source.MountPointData != nil {
		pString = &source.MountPointData.Path
	}
	if pString != nil {
		dbomExportedShare.MountPointDataPath = *pString
	}
	dbomMountPointPath, err := c.pDtoMountPointDataToDbomMountPointPath(source.MountPointData)
	if err != nil {
		return dbomExportedShare, err
	}
	dbomExportedShare.MountPointData = dbomMountPointPath
	return dbomExportedShare, nil
}
func (c *DtoToDbomConverterImpl) stringListToDatatypesJSONSlice(source []string) datatypes.JSONSlice[string] {
	var datatypesJSONSlice datatypes.JSONSlice[string]
	if source != nil {
		datatypesJSONSlice = make(datatypes.JSONSlice[string], len(source))
		for i := 0; i < len(source); i++ {
			datatypesJSONSlice[i] = source[i]
		}
	}
	return datatypesJSONSlice
}
func (c *DtoToDbomConverterImpl) userToSambaUser(source dto.User) (dbom.SambaUser, error) {
	var dbomSambaUser dbom.SambaUser
	dbomSambaUser.Username = source.Username
	dbomSambaUser.Password = source.Password
	dbomSambaUser.IsAdmin = source.IsAdmin
	if source.RwShares != nil {
		dbomSambaUser.RwShares = make([]dbom.ExportedShare, len(source.RwShares))
		for i := 0; i < len(source.RwShares); i++ {
			dbomSambaUser.RwShares[i] = stringToExportedShare(source.RwShares[i])
		}
	}
	if source.RoShares != nil {
		dbomSambaUser.RoShares = make([]dbom.ExportedShare, len(source.RoShares))
		for j := 0; j < len(source.RoShares); j++ {
			dbomSambaUser.RoShares[j] = stringToExportedShare(source.RoShares[j])
		}
	}
	return dbomSambaUser, nil
}
