// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converter

import (
	dbom "github.com/dianlight/srat/dbom"
	dto "github.com/dianlight/srat/dto"
)

type DtoToDbomConverterImpl struct{}

func (c *DtoToDbomConverterImpl) BlockPartitionToMountPointPath(source dto.BlockPartition, target *dbom.MountPointPath) error {
	if source.DeviceId != nil {
		target.DeviceId = *source.DeviceId
	}
	if source.Name != "" {
		target.Source = source.Name
	}
	if source.MountPoint != "" {
		target.Path = source.MountPoint
	}
	if source.Type != "" {
		target.FSType = source.Type
	}
	if source.PartitionFlags != nil {
		target.Flags = stringsToMountDataFlags(source.PartitionFlags)
	}
	if source.MountPoint != "" {
		target.IsMounted = isMountPointValid(source.MountPoint)
	}
	return nil
}
func (c *DtoToDbomConverterImpl) ExportedShareToSharedResourceNoMountPointData(source dbom.ExportedShare, target *dto.SharedResource) error {
	if source.Name != "" {
		target.Name = source.Name
	}
	if source.Disabled != false {
		pBool := source.Disabled
		target.Disabled = &pBool
	}
	if source.Users != nil {
		target.Users = make([]dto.User, len(source.Users))
		for i := 0; i < len(source.Users); i++ {
			target.Users[i] = c.dbomSambaUserToDtoUser(source.Users[i])
		}
	}
	if source.RoUsers != nil {
		target.RoUsers = make([]dto.User, len(source.RoUsers))
		for j := 0; j < len(source.RoUsers); j++ {
			target.RoUsers[j] = c.dbomSambaUserToDtoUser(source.RoUsers[j])
		}
	}
	if source.TimeMachine != false {
		pBool2 := source.TimeMachine
		target.TimeMachine = &pBool2
	}
	if source.Usage != "" {
		target.Usage = source.Usage
	}
	return nil
}
func (c *DtoToDbomConverterImpl) MountPointDataToMountPointPath(source dto.MountPointData, target *dbom.MountPointPath) error {
	if source.ID != 0 {
		target.ID = source.ID
	}
	if source.Source != "" {
		target.Source = source.Source
	}
	if source.Path != "" {
		target.Path = source.Path
	}
	if source.PrimaryPath != "" {
		target.PrimaryPath = source.PrimaryPath
	}
	if source.FSType != "" {
		target.FSType = source.FSType
	}
	if source.Flags != nil {
		target.Flags = stringsToMountDataFlags(source.Flags)
	}
	if source.IsInvalid != false {
		target.IsInvalid = source.IsInvalid
	}
	if source.IsMounted != false {
		target.IsMounted = source.IsMounted
	}
	if source.InvalidError != nil {
		target.InvalidError = source.InvalidError
	}
	if source.Warnings != nil {
		target.Warnings = source.Warnings
	}
	return nil
}
func (c *DtoToDbomConverterImpl) MountPointPathToMountPointData(source dbom.MountPointPath, target *dto.MountPointData) error {
	if source.ID != 0 {
		target.ID = source.ID
	}
	if source.Path != "" {
		target.Path = source.Path
	}
	if source.PrimaryPath != "" {
		target.PrimaryPath = source.PrimaryPath
	}
	if source.FSType != "" {
		target.FSType = source.FSType
	}
	if source.Flags != nil {
		target.Flags = mountDataFlagsToStrings(source.Flags)
	}
	if source.Source != "" {
		target.Source = source.Source
	}
	if source.IsMounted != false {
		target.IsMounted = source.IsMounted
	}
	if source.IsInvalid != false {
		target.IsInvalid = source.IsInvalid
	}
	if source.InvalidError != nil {
		target.InvalidError = source.InvalidError
	}
	if source.Warnings != nil {
		target.Warnings = source.Warnings
	}
	return nil
}
func (c *DtoToDbomConverterImpl) SambaUserToUser(source dbom.SambaUser, target *dto.User) error {
	pString := source.Username
	target.Username = &pString
	pString2 := source.Password
	target.Password = &pString2
	pBool := source.IsAdmin
	target.IsAdmin = &pBool
	return nil
}
func (c *DtoToDbomConverterImpl) SharedResourceToExportedShareNoUsersNoMountPointPath(source dto.SharedResource, target *dbom.ExportedShare) error {
	if source.Name != "" {
		target.Name = source.Name
	}
	if source.Disabled != nil {
		target.Disabled = *source.Disabled
	}
	if source.TimeMachine != nil {
		target.TimeMachine = *source.TimeMachine
	}
	if source.Usage != "" {
		target.Usage = source.Usage
	}
	return nil
}
func (c *DtoToDbomConverterImpl) UserToSambaUser(source dto.User, target *dbom.SambaUser) error {
	if source.Username != nil {
		target.Username = *source.Username
	}
	if source.Password != nil {
		target.Password = *source.Password
	}
	if source.IsAdmin != nil {
		target.IsAdmin = *source.IsAdmin
	}
	return nil
}
func (c *DtoToDbomConverterImpl) dbomSambaUserToDtoUser(source dbom.SambaUser) dto.User {
	var dtoUser dto.User
	pString := source.Username
	dtoUser.Username = &pString
	pString2 := source.Password
	dtoUser.Password = &pString2
	pBool := source.IsAdmin
	dtoUser.IsAdmin = &pBool
	return dtoUser
}
