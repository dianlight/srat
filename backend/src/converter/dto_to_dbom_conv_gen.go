// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converter

import (
	dbom "github.com/dianlight/srat/dbom"
	dto "github.com/dianlight/srat/dto"
	xhashes "github.com/shomali11/util/xhashes"
)

type DtoToDbomConverterImpl struct{}

func (c *DtoToDbomConverterImpl) ExportedShareToSharedResourceNoMountPointData(source dbom.ExportedShare, target *dto.SharedResource) error {
	if source.Name != "" {
		target.Name = source.Name
	}
	if source.Disabled != false {
		pBool := source.Disabled
		target.Disabled = &pBool
	}
	if source.Users != nil {
		target.Users = make([]dto.User, len(source.Users))
		for i := 0; i < len(source.Users); i++ {
			target.Users[i] = c.dbomSambaUserToDtoUser(source.Users[i])
		}
	}
	if source.RoUsers != nil {
		target.RoUsers = make([]dto.User, len(source.RoUsers))
		for j := 0; j < len(source.RoUsers); j++ {
			target.RoUsers[j] = c.dbomSambaUserToDtoUser(source.RoUsers[j])
		}
	}
	if source.TimeMachine != false {
		pBool2 := source.TimeMachine
		target.TimeMachine = &pBool2
	}
	if source.Usage != "" {
		target.Usage = source.Usage
	}
	return nil
}
func (c *DtoToDbomConverterImpl) MountPointDataToMountPointPath(source dto.MountPointData, target *dbom.MountPointPath) error {
	if source.Path != "" {
		target.Path = source.Path
	}
	if source.Type != "" {
		target.Type = source.Type
	}
	if source.Device != "" {
		target.Device = source.Device
	}
	if source.FSType != "" {
		target.FSType = source.FSType
	}
	target.Flags = c.dtoMountFlagsToDbomMounDataFlags(source.Flags)
	target.Data = c.dtoMountFlagsToDbomMounDataFlags(source.CustomFlags)
	if source.IsInvalid != false {
		target.IsInvalid = source.IsInvalid
	}
	if source.IsMounted != false {
		target.IsMounted = source.IsMounted
	}
	if source.InvalidError != nil {
		target.InvalidError = source.InvalidError
	}
	if source.Warnings != nil {
		target.Warnings = source.Warnings
	}
	return nil
}
func (c *DtoToDbomConverterImpl) MountPointPathToMountPointData(source dbom.MountPointPath, target *dto.MountPointData) error {
	if source.Path != "" {
		target.Path = source.Path
	}
	if source.Path != "" {
		target.PathHash = xhashes.MD5(source.Path)
	}
	if source.Type != "" {
		target.Type = source.Type
	}
	if source.FSType != "" {
		target.FSType = source.FSType
	}
	dtoMountFlags, err := c.dbomMounDataFlagsToDtoMountFlags(source.Flags)
	if err != nil {
		return err
	}
	target.Flags = dtoMountFlags
	dtoMountFlags2, err := c.dbomMounDataFlagsToDtoMountFlags(source.Data)
	if err != nil {
		return err
	}
	target.CustomFlags = dtoMountFlags2
	if source.Device != "" {
		target.Device = source.Device
	}
	if source.IsMounted != false {
		target.IsMounted = source.IsMounted
	}
	if source.IsInvalid != false {
		target.IsInvalid = source.IsInvalid
	}
	if source.InvalidError != nil {
		target.InvalidError = source.InvalidError
	}
	if source.Warnings != nil {
		target.Warnings = source.Warnings
	}
	return nil
}
func (c *DtoToDbomConverterImpl) SambaUserToUser(source dbom.SambaUser, target *dto.User) error {
	target.Username = source.Username
	target.Password = source.Password
	target.IsAdmin = source.IsAdmin
	if source.RwShares != nil {
		target.RwShares = make([]string, len(source.RwShares))
		for i := 0; i < len(source.RwShares); i++ {
			target.RwShares[i] = exportedShareToString(source.RwShares[i])
		}
	}
	if source.RoShares != nil {
		target.RoShares = make([]string, len(source.RoShares))
		for j := 0; j < len(source.RoShares); j++ {
			target.RoShares[j] = exportedShareToString(source.RoShares[j])
		}
	}
	return nil
}
func (c *DtoToDbomConverterImpl) SharedResourceToExportedShareNoUsersNoMountPointPath(source dto.SharedResource, target *dbom.ExportedShare) error {
	if source.Name != "" {
		target.Name = source.Name
	}
	if source.Disabled != nil {
		target.Disabled = *source.Disabled
	}
	if source.TimeMachine != nil {
		target.TimeMachine = *source.TimeMachine
	}
	if source.Usage != "" {
		target.Usage = source.Usage
	}
	var pString *string
	if source.MountPointData != nil {
		pString = &source.MountPointData.Path
	}
	if pString != nil {
		target.MountPointDataPath = *pString
	}
	return nil
}
func (c *DtoToDbomConverterImpl) UserToSambaUser(source dto.User, target *dbom.SambaUser) error {
	if source.Username != "" {
		target.Username = source.Username
	}
	if source.Password != "" {
		target.Password = source.Password
	}
	if source.IsAdmin != false {
		target.IsAdmin = source.IsAdmin
	}
	if source.RwShares != nil {
		target.RwShares = make([]dbom.ExportedShare, len(source.RwShares))
		for i := 0; i < len(source.RwShares); i++ {
			target.RwShares[i] = stringToExportedShare(source.RwShares[i])
		}
	}
	if source.RoShares != nil {
		target.RoShares = make([]dbom.ExportedShare, len(source.RoShares))
		for j := 0; j < len(source.RoShares); j++ {
			target.RoShares[j] = stringToExportedShare(source.RoShares[j])
		}
	}
	return nil
}
func (c *DtoToDbomConverterImpl) dbomMounDataFlagsToDtoMountFlags(source dbom.MounDataFlags) (dto.MountFlags, error) {
	var dtoMountFlags dto.MountFlags
	if source != nil {
		dtoMountFlags = make(dto.MountFlags, len(source))
		for i := 0; i < len(source); i++ {
			dtoMountFlag, err := c.mountDataFlagToMountFlag(source[i])
			if err != nil {
				return nil, err
			}
			dtoMountFlags[i] = dtoMountFlag
		}
	}
	return dtoMountFlags, nil
}
func (c *DtoToDbomConverterImpl) dbomSambaUserToDtoUser(source dbom.SambaUser) dto.User {
	var dtoUser dto.User
	dtoUser.Username = source.Username
	dtoUser.Password = source.Password
	dtoUser.IsAdmin = source.IsAdmin
	if source.RwShares != nil {
		dtoUser.RwShares = make([]string, len(source.RwShares))
		for i := 0; i < len(source.RwShares); i++ {
			dtoUser.RwShares[i] = exportedShareToString(source.RwShares[i])
		}
	}
	if source.RoShares != nil {
		dtoUser.RoShares = make([]string, len(source.RoShares))
		for j := 0; j < len(source.RoShares); j++ {
			dtoUser.RoShares[j] = exportedShareToString(source.RoShares[j])
		}
	}
	return dtoUser
}
func (c *DtoToDbomConverterImpl) dtoMountFlagToDbomMounDataFlag(source dto.MountFlag) dbom.MounDataFlag {
	var dbomMounDataFlag dbom.MounDataFlag
	dbomMounDataFlag.Name = source.Name
	dbomMounDataFlag.NeedsValue = source.NeedsValue
	dbomMounDataFlag.FlagValue = source.FlagValue
	return dbomMounDataFlag
}
func (c *DtoToDbomConverterImpl) dtoMountFlagsToDbomMounDataFlags(source dto.MountFlags) dbom.MounDataFlags {
	var dbomMounDataFlags dbom.MounDataFlags
	if source != nil {
		dbomMounDataFlags = make(dbom.MounDataFlags, len(source))
		for i := 0; i < len(source); i++ {
			dbomMounDataFlags[i] = c.dtoMountFlagToDbomMounDataFlag(source[i])
		}
	}
	return dbomMounDataFlags
}
func (c *DtoToDbomConverterImpl) mountDataFlagToMountFlag(source dbom.MounDataFlag) (dto.MountFlag, error) {
	var dtoMountFlag dto.MountFlag
	dtoMountFlag.Name = source.Name
	dtoMountFlag.NeedsValue = source.NeedsValue
	dtoMountFlag.FlagValue = source.FlagValue
	return dtoMountFlag, nil
}
