// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converter

import (
	"fmt"
	dbom "github.com/dianlight/srat/dbom"
	dto "github.com/dianlight/srat/dto"
)

type DtoToDbomConverterImpl struct{}

func (c *DtoToDbomConverterImpl) ExportedShareToSharedResource(source dbom.ExportedShare, target *dto.SharedResource) error {
	pUint := source.ID
	target.ID = &pUint
	target.Name = source.Name
	target.Path = source.Path
	target.FS = source.FS
	target.Disabled = source.Disabled
	if source.Users != nil {
		target.Users = make([]dto.User, len(source.Users))
		for i := 0; i < len(source.Users); i++ {
			target.Users[i] = c.dbomSambaUserToDtoUser(source.Users[i])
		}
	}
	if source.RoUsers != nil {
		target.RoUsers = make([]dto.User, len(source.RoUsers))
		for j := 0; j < len(source.RoUsers); j++ {
			target.RoUsers[j] = c.dbomSambaUserToDtoUser(source.RoUsers[j])
		}
	}
	target.TimeMachine = source.TimeMachine
	dtoHAMountUsage, err := c.dtoHAMountUsageToDtoHAMountUsage(source.Usage)
	if err != nil {
		return err
	}
	target.Usage = dtoHAMountUsage
	if source.DeviceId != nil {
		xuint64 := *source.DeviceId
		target.DeviceId = &xuint64
	}
	target.Invalid = source.Invalid
	return nil
}
func (c *DtoToDbomConverterImpl) SambaUserToUser(source dbom.SambaUser, target *dto.User) error {
	target.Username = source.Username
	target.Password = source.Password
	target.IsAdmin = source.IsAdmin
	return nil
}
func (c *DtoToDbomConverterImpl) SharedResourceToExportedShare(source dto.SharedResource, target *dbom.ExportedShare) error {
	if source.ID != nil {
		target.ID = *source.ID
	}
	target.Name = source.Name
	target.Path = source.Path
	target.FS = source.FS
	target.Disabled = source.Disabled
	target.TimeMachine = source.TimeMachine
	dtoHAMountUsage, err := c.dtoHAMountUsageToDtoHAMountUsage(source.Usage)
	if err != nil {
		return err
	}
	target.Usage = dtoHAMountUsage
	if source.DeviceId != nil {
		xuint64 := *source.DeviceId
		target.DeviceId = &xuint64
	}
	target.Invalid = source.Invalid
	return nil
}
func (c *DtoToDbomConverterImpl) UserToSambaUser(source dto.User, target *dbom.SambaUser) error {
	target.Username = source.Username
	target.Password = source.Password
	target.IsAdmin = source.IsAdmin
	return nil
}
func (c *DtoToDbomConverterImpl) dbomSambaUserToDtoUser(source dbom.SambaUser) dto.User {
	var dtoUser dto.User
	dtoUser.Username = source.Username
	dtoUser.Password = source.Password
	dtoUser.IsAdmin = source.IsAdmin
	return dtoUser
}
func (c *DtoToDbomConverterImpl) dtoHAMountUsageToDtoHAMountUsage(source dto.HAMountUsage) (dto.HAMountUsage, error) {
	var dtoHAMountUsage dto.HAMountUsage
	switch source {
	case dto.UsageAsBackup:
		dtoHAMountUsage = dto.UsageAsBackup
	case dto.UsageAsMedia:
		dtoHAMountUsage = dto.UsageAsMedia
	case dto.UsageAsNone:
		dtoHAMountUsage = dto.UsageAsNone
	case dto.UsageAsShare:
		dtoHAMountUsage = dto.UsageAsShare
	default:
		return dtoHAMountUsage, fmt.Errorf("unexpected enum element: %v", source)
	}
	return dtoHAMountUsage, nil
}
