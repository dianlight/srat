// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converter

import (
	dto "github.com/dianlight/srat/dto"
	process "github.com/shirou/gopsutil/v4/process"
)

type ProcessToDtoImpl struct{}

func (c *ProcessToDtoImpl) ProcessToSambaProcessStatus(source *process.Process, target *dto.SambaProcessStatus) error {
	if source != nil {
		if source.Pid != 0 {
			target.Pid = source.Pid
		}
		xstring, err := source.Name()
		if err != nil {
			return err
		}
		if xstring != "" {
			target.Name = xstring
		}
		xint64, err := source.CreateTime()
		if err != nil {
			return err
		}
		if xint64 != 0 {
			timeTime, err := int64ToTime(xint64)
			if err != nil {
				return err
			}
			target.CreateTime = timeTime
		}
		xfloat64, err := source.CPUPercent()
		if err != nil {
			return err
		}
		if xfloat64 != 0 {
			target.CPUPercent = xfloat64
		}
		xfloat32, err := source.MemoryPercent()
		if err != nil {
			return err
		}
		if xfloat32 != 0 {
			target.MemoryPercent = xfloat32
		}
		processOpenFilesStatList, err := source.OpenFiles()
		if err != nil {
			return err
		}
		if processOpenFilesStatList != nil {
			xint, err := sliceToLen(processOpenFilesStatList)
			if err != nil {
				return err
			}
			target.OpenFiles = xint
		}
		netConnectionStatList, err := source.Connections()
		if err != nil {
			return err
		}
		if netConnectionStatList != nil {
			xint2, err := sliceToLen(netConnectionStatList)
			if err != nil {
				return err
			}
			target.Connections = xint2
		}
		stringList, err := source.Status()
		if err != nil {
			return err
		}
		if stringList != nil {
			target.Status = make([]string, len(stringList))
			for i := 0; i < len(stringList); i++ {
				target.Status[i] = stringList[i]
			}
		}
		xbool, err := source.IsRunning()
		if err != nil {
			return err
		}
		if xbool != false {
			target.IsRunning = xbool
		}
	}
	return nil
}
