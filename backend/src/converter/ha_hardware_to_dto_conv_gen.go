// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converter

import (
	dto "github.com/dianlight/srat/dto"
	hardware "github.com/dianlight/srat/homeassistant/hardware"
)

type HaHardwareToDtoImpl struct{}

func (c *HaHardwareToDtoImpl) DriveToDisk(source hardware.Drive, target *dto.Disk) error {
	if source != (hardware.Drive{}) {
		target.LegacyDeviceName = extractDevice(source)
	}
	if source.ConnectionBus != nil {
		target.ConnectionBus = source.ConnectionBus
	}
	if source.Ejectable != nil {
		target.Ejectable = source.Ejectable
	}
	if source.Filesystems != nil {
		var dtoPartitionList []dto.Partition
		if (*source.Filesystems) != nil {
			dtoPartitionList = make([]dto.Partition, len((*source.Filesystems)))
			for i := 0; i < len((*source.Filesystems)); i++ {
				dtoPartitionList[i] = c.filesystemToPartition((*source.Filesystems)[i])
			}
		}
		target.Partitions = &dtoPartitionList
	}
	if source.Id != nil {
		target.Id = source.Id
	}
	if source.Model != nil {
		target.Model = source.Model
	}
	if source.Removable != nil {
		target.Removable = source.Removable
	}
	if source.Revision != nil {
		target.Revision = source.Revision
	}
	if source.Seat != nil {
		target.Seat = source.Seat
	}
	if source.Serial != nil {
		target.Serial = source.Serial
	}
	if source.Size != nil {
		target.Size = source.Size
	}
	if source.Vendor != nil {
		target.Vendor = source.Vendor
	}
	return nil
}
func (c *HaHardwareToDtoImpl) FilesystemToPartition(source hardware.Filesystem, target *dto.Partition) error {
	if source.Device != nil {
		xstring := *source.Device
		target.LegacyDevicePath = &xstring
	}
	if source.Device != nil {
		target.LegacyDeviceName = trimDevPrefix(source.Device)
	}
	if source.Id != nil {
		xstring2 := *source.Id
		target.Id = &xstring2
	}
	if source.Name != nil {
		xstring3 := *source.Name
		target.Name = &xstring3
	}
	if source.Size != nil {
		xint := *source.Size
		target.Size = &xint
	}
	if source.System != nil {
		xbool := *source.System
		target.System = &xbool
	}
	if source != (hardware.Filesystem{}) {
		target.HostMountPointData = mountPointsToMountPointDatas(source)
	}
	return nil
}
func (c *HaHardwareToDtoImpl) filesystemToPartition(source hardware.Filesystem) dto.Partition {
	var dtoPartition dto.Partition
	if source.Device != nil {
		xstring := *source.Device
		dtoPartition.LegacyDevicePath = &xstring
	}
	dtoPartition.LegacyDeviceName = trimDevPrefix(source.Device)
	if source.Id != nil {
		xstring2 := *source.Id
		dtoPartition.Id = &xstring2
	}
	if source.Name != nil {
		xstring3 := *source.Name
		dtoPartition.Name = &xstring3
	}
	if source.Size != nil {
		xint := *source.Size
		dtoPartition.Size = &xint
	}
	if source.System != nil {
		xbool := *source.System
		dtoPartition.System = &xbool
	}
	dtoPartition.HostMountPointData = mountPointsToMountPointDatas(source)
	return dtoPartition
}
