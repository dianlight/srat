// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package converter

import (
	config "github.com/dianlight/srat/config"
	patherr "github.com/dianlight/srat/converter/patherr"
	dbom "github.com/dianlight/srat/dbom"
	dto "github.com/dianlight/srat/dto"
)

type ConfigToDbomConverterImpl struct{}

func (c *ConfigToDbomConverterImpl) ConfigToSambaUser(source config.Config, target *dbom.SambaUser) error {
	target.Username = source.Username
	target.Password = source.Password
	return nil
}
func (c *ConfigToDbomConverterImpl) ExportedShareToShare(source dbom.ExportedShare, target *config.Share) error {
	target.Name = source.Name
	target.Path = source.Path
	target.FS = source.FS
	target.Disabled = source.Disabled
	if source.Users != nil {
		target.Users = make([]string, len(source.Users))
		for i := 0; i < len(source.Users); i++ {
			target.Users[i] = SambaUserToString(source.Users[i])
		}
	}
	if source.RoUsers != nil {
		target.RoUsers = make([]string, len(source.RoUsers))
		for j := 0; j < len(source.RoUsers); j++ {
			target.RoUsers[j] = SambaUserToString(source.RoUsers[j])
		}
	}
	target.TimeMachine = source.TimeMachine
	target.Usage = string(source.Usage)
	return nil
}
func (c *ConfigToDbomConverterImpl) SambaUserToUser(source dbom.SambaUser, target *config.User) error {
	target.Username = source.Username
	target.Password = source.Password
	return nil
}
func (c *ConfigToDbomConverterImpl) ShareToExportedShare(source config.Share, target *dbom.ExportedShare, context *dbom.SambaUsers) error {
	target.Name = source.Name
	target.Path = source.Path
	target.FS = source.FS
	target.Disabled = source.Disabled
	if source.Users != nil {
		target.Users = make([]dbom.SambaUser, len(source.Users))
		for i := 0; i < len(source.Users); i++ {
			dbomSambaUser, err := StringToSambaUser(source.Users[i], context)
			if err != nil {
				return patherr.Wrap(err, patherr.Field("Users"), patherr.Index(i))
			}
			target.Users[i] = dbomSambaUser
		}
	}
	if source.RoUsers != nil {
		target.RoUsers = make([]dbom.SambaUser, len(source.RoUsers))
		for j := 0; j < len(source.RoUsers); j++ {
			dbomSambaUser2, err := StringToSambaUser(source.RoUsers[j], context)
			if err != nil {
				return patherr.Wrap(err, patherr.Field("RoUsers"), patherr.Index(j))
			}
			target.RoUsers[j] = dbomSambaUser2
		}
	}
	target.TimeMachine = source.TimeMachine
	target.Usage = dto.HAMountUsage(source.Usage)
	return nil
}
func (c *ConfigToDbomConverterImpl) UserToUSambaUser(source config.User, target *dbom.SambaUser) error {
	target.Username = source.Username
	target.Password = source.Password
	return nil
}
