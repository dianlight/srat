// Package homeassistant provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package homeassistant

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

// CoreInfo defines model for CoreInfo.
type CoreInfo struct {
	// Arch The architecture of the host (armhf, aarch64, i386, amd64)
	Arch *string `json:"arch,omitempty"`

	// AudioInput The description of the audio input device
	AudioInput *string `json:"audio_input,omitempty"`

	// AudioOutput The description of the audio output device
	AudioOutput *string `json:"audio_output,omitempty"`

	// BackupsExcludeDatabase Backups exclude Home Assistant database file by default
	BackupsExcludeDatabase *bool `json:"backups_exclude_database,omitempty"`

	// Boot true if it should start on boot
	Boot *bool `json:"boot,omitempty"`

	// Image The container image that is running the core
	Image *string `json:"image,omitempty"`

	// IpAddress The internal docker IP address to the supervisor
	IpAddress *string `json:"ip_address,omitempty"`

	// Machine The machine type that is running the host
	Machine *string `json:"machine,omitempty"`

	// Port The port Home Assistant is running on
	Port *float32 `json:"port,omitempty"`

	// Ssl true if Home Assistant is using SSL
	Ssl *bool `json:"ssl,omitempty"`

	// UpdateAvailable true if an update is available
	UpdateAvailable *bool `json:"update_available,omitempty"`

	// Version The installed core version
	Version *string `json:"version,omitempty"`

	// VersionLatest The latest published version in the active channel
	VersionLatest *string `json:"version_latest,omitempty"`

	// WaitBoot Max time to wait during boot
	WaitBoot *float32 `json:"wait_boot,omitempty"`

	// Watchdog true if watchdog is enabled
	Watchdog *bool `json:"watchdog,omitempty"`
}

// EntityState defines model for EntityState.
type EntityState struct {
	// Attributes A dictionary with extra attributes related to the current state.
	Attributes *map[string]interface{} `json:"attributes,omitempty"`

	// Context A dictionary with extra attributes related to the context of the state.
	Context *map[string]interface{} `json:"context,omitempty"`

	// Domain Domain of the entity
	Domain *string `json:"domain,omitempty"`

	// EntityId Entity ID.
	EntityId *string `json:"entity_id,omitempty"`

	// LastChanged Time the state changed in the state machine in UTC time. This is not updated if only state attributes change.
	LastChanged *time.Time `json:"last_changed,omitempty"`

	// LastReported Time the state was written to the state machine in UTC time. This timestamp is updated regardless of any changes to the state or state attributes.
	LastReported *time.Time `json:"last_reported,omitempty"`

	// LastUpdated Time the state or state attributes changed in the state machine in UTC time. This is not updated if neither state nor state attributes changed.
	LastUpdated *time.Time `json:"last_updated,omitempty"`

	// Name Name of the entity. Based on friendly_name attribute with fall back to object ID:.
	Name *string `json:"name,omitempty"`

	// ObjectId Object ID of entity.
	ObjectId *string `json:"object_id,omitempty"`

	// State String representation of the current state of the entity.
	State *string `json:"state,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetEntityState request
	GetEntityState(ctx context.Context, entityId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEntityState request
	PostEntityState(ctx context.Context, entityId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCoreInfo request
	GetCoreInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetEntityState(ctx context.Context, entityId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntityStateRequest(c.Server, entityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEntityState(ctx context.Context, entityId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEntityStateRequest(c.Server, entityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCoreInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCoreInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetEntityStateRequest generates requests for GetEntityState
func NewGetEntityStateRequest(server string, entityId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entity_id", runtime.ParamLocationPath, entityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/api/states/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEntityStateRequest generates requests for PostEntityState
func NewPostEntityStateRequest(server string, entityId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entity_id", runtime.ParamLocationPath, entityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/api/states/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCoreInfoRequest generates requests for GetCoreInfo
func NewGetCoreInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetEntityStateWithResponse request
	GetEntityStateWithResponse(ctx context.Context, entityId string, reqEditors ...RequestEditorFn) (*GetEntityStateResponse, error)

	// PostEntityStateWithResponse request
	PostEntityStateWithResponse(ctx context.Context, entityId string, reqEditors ...RequestEditorFn) (*PostEntityStateResponse, error)

	// GetCoreInfoWithResponse request
	GetCoreInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCoreInfoResponse, error)
}

type GetEntityStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntityState
}

// Status returns HTTPResponse.Status
func (r GetEntityStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEntityStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEntityStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntityState
	JSON201      *EntityState
}

// Status returns HTTPResponse.Status
func (r PostEntityStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEntityStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCoreInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CoreInfo
}

// Status returns HTTPResponse.Status
func (r GetCoreInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCoreInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetEntityStateWithResponse request returning *GetEntityStateResponse
func (c *ClientWithResponses) GetEntityStateWithResponse(ctx context.Context, entityId string, reqEditors ...RequestEditorFn) (*GetEntityStateResponse, error) {
	rsp, err := c.GetEntityState(ctx, entityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntityStateResponse(rsp)
}

// PostEntityStateWithResponse request returning *PostEntityStateResponse
func (c *ClientWithResponses) PostEntityStateWithResponse(ctx context.Context, entityId string, reqEditors ...RequestEditorFn) (*PostEntityStateResponse, error) {
	rsp, err := c.PostEntityState(ctx, entityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEntityStateResponse(rsp)
}

// GetCoreInfoWithResponse request returning *GetCoreInfoResponse
func (c *ClientWithResponses) GetCoreInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCoreInfoResponse, error) {
	rsp, err := c.GetCoreInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCoreInfoResponse(rsp)
}

// ParseGetEntityStateResponse parses an HTTP response from a GetEntityStateWithResponse call
func ParseGetEntityStateResponse(rsp *http.Response) (*GetEntityStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEntityStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostEntityStateResponse parses an HTTP response from a PostEntityStateWithResponse call
func ParsePostEntityStateResponse(rsp *http.Response) (*PostEntityStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEntityStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EntityState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetCoreInfoResponse parses an HTTP response from a GetCoreInfoWithResponse call
func ParseGetCoreInfoResponse(rsp *http.Response) (*GetCoreInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCoreInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CoreInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
