// Package core_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package core_api

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// EntityState defines model for EntityState.
type EntityState struct {
	// Attributes Un dizionario con attributi extra relativi allo stato corrente.
	Attributes *map[string]interface{} `json:"attributes,omitempty"`

	// Context Un dizionario con attributi extra relativi al contesto dello stato.
	Context *map[string]interface{} `json:"context,omitempty"`

	// Domain Dominio dell'entità.
	Domain *string `json:"domain,omitempty"`

	// EntityId ID dell'entità.
	EntityId *string `json:"entity_id,omitempty"`

	// LastChanged Ora in cui lo stato è cambiato nella macchina a stati in tempo UTC. Non viene aggiornato se cambiano solo gli attributi di stato.
	LastChanged *time.Time `json:"last_changed,omitempty"`

	// LastReported Ora in cui lo stato è stato scritto nella macchina a stati in tempo UTC. Questo timestamp viene aggiornato indipendentemente da eventuali modifiche allo stato o agli attributi di stato.
	LastReported *time.Time `json:"last_reported,omitempty"`

	// LastUpdated Ora in cui lo stato o gli attributi di stato sono cambiati nella macchina a stati in tempo UTC. Non viene aggiornato se non sono cambiati né lo stato né gli attributi di stato.
	LastUpdated *time.Time `json:"last_updated,omitempty"`

	// Name Nome dell'entità. Basato sull'attributo friendly_name, con fallback all'ID dell'oggetto.
	Name *string `json:"name,omitempty"`

	// ObjectId ID dell'oggetto dell'entità.
	ObjectId *string `json:"object_id,omitempty"`

	// State Rappresentazione testuale dello stato corrente dell'entità.
	State *string `json:"state,omitempty"`
}

// PostEntityStateJSONRequestBody defines body for PostEntityState for application/json ContentType.
type PostEntityStateJSONRequestBody = EntityState

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApi request
	GetApi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEntityState request
	GetEntityState(ctx context.Context, entityId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEntityStateWithBody request with any body
	PostEntityStateWithBody(ctx context.Context, entityId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEntityState(ctx context.Context, entityId string, body PostEntityStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApi(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEntityState(ctx context.Context, entityId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntityStateRequest(c.Server, entityId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEntityStateWithBody(ctx context.Context, entityId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEntityStateRequestWithBody(c.Server, entityId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEntityState(ctx context.Context, entityId string, body PostEntityStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEntityStateRequest(c.Server, entityId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiRequest generates requests for GetApi
func NewGetApiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/api/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEntityStateRequest generates requests for GetEntityState
func NewGetEntityStateRequest(server string, entityId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entity_id", runtime.ParamLocationPath, entityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/api/states/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEntityStateRequest calls the generic PostEntityState builder with application/json body
func NewPostEntityStateRequest(server string, entityId string, body PostEntityStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEntityStateRequestWithBody(server, entityId, "application/json", bodyReader)
}

// NewPostEntityStateRequestWithBody generates requests for PostEntityState with any type of body
func NewPostEntityStateRequestWithBody(server string, entityId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entity_id", runtime.ParamLocationPath, entityId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/core/api/states/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiWithResponse request
	GetApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiResponse, error)

	// GetEntityStateWithResponse request
	GetEntityStateWithResponse(ctx context.Context, entityId string, reqEditors ...RequestEditorFn) (*GetEntityStateResponse, error)

	// PostEntityStateWithBodyWithResponse request with any body
	PostEntityStateWithBodyWithResponse(ctx context.Context, entityId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEntityStateResponse, error)

	PostEntityStateWithResponse(ctx context.Context, entityId string, body PostEntityStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEntityStateResponse, error)
}

type GetApiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Result *GetApi200Result `json:"result,omitempty"`
	}
}
type GetApi200Result string

// Status returns HTTPResponse.Status
func (r GetApiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEntityStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntityState
}

// Status returns HTTPResponse.Status
func (r GetEntityStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEntityStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEntityStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EntityState
	JSON201      *EntityState
}

// Status returns HTTPResponse.Status
func (r PostEntityStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEntityStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiWithResponse request returning *GetApiResponse
func (c *ClientWithResponses) GetApiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiResponse, error) {
	rsp, err := c.GetApi(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiResponse(rsp)
}

// GetEntityStateWithResponse request returning *GetEntityStateResponse
func (c *ClientWithResponses) GetEntityStateWithResponse(ctx context.Context, entityId string, reqEditors ...RequestEditorFn) (*GetEntityStateResponse, error) {
	rsp, err := c.GetEntityState(ctx, entityId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntityStateResponse(rsp)
}

// PostEntityStateWithBodyWithResponse request with arbitrary body returning *PostEntityStateResponse
func (c *ClientWithResponses) PostEntityStateWithBodyWithResponse(ctx context.Context, entityId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEntityStateResponse, error) {
	rsp, err := c.PostEntityStateWithBody(ctx, entityId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEntityStateResponse(rsp)
}

func (c *ClientWithResponses) PostEntityStateWithResponse(ctx context.Context, entityId string, body PostEntityStateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEntityStateResponse, error) {
	rsp, err := c.PostEntityState(ctx, entityId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEntityStateResponse(rsp)
}

// ParseGetApiResponse parses an HTTP response from a GetApiWithResponse call
func ParseGetApiResponse(rsp *http.Response) (*GetApiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Result *GetApi200Result `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEntityStateResponse parses an HTTP response from a GetEntityStateWithResponse call
func ParseGetEntityStateResponse(rsp *http.Response) (*GetEntityStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEntityStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostEntityStateResponse parses an HTTP response from a PostEntityStateWithResponse call
func ParsePostEntityStateResponse(rsp *http.Response) (*PostEntityStateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEntityStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EntityState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest EntityState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}
