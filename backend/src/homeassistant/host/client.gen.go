// Package host provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package host

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ActionResultResult.
const (
	ActionResultResultOk ActionResultResult = "ok"
)

// Defines values for HostInfoResponseResult.
const (
	HostInfoResponseResultOk HostInfoResponseResult = "ok"
)

// ActionResult defines model for ActionResult.
type ActionResult struct {
	// Data Additional data, usually an empty object for these actions.
	Data *map[string]interface{} `json:"data,omitempty"`

	// Result Indicates the outcome of the action.
	Result ActionResultResult `json:"result"`
}

// ActionResultResult Indicates the outcome of the action.
type ActionResultResult string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message string `json:"message"`
}

// HostInfoData defines model for HostInfoData.
type HostInfoData struct {
	// Chassis The chassis type of the host system.
	Chassis *string `json:"chassis,omitempty"`

	// Cpe Common Platform Enumeration string for the OS.
	Cpe *string `json:"cpe,omitempty"`

	// Deployment The deployment type.
	Deployment *string `json:"deployment,omitempty"`

	// DiskFree Free disk space in GB.
	DiskFree *float32 `json:"disk_free,omitempty"`

	// DiskTotal Total disk space in GB.
	DiskTotal *float32 `json:"disk_total,omitempty"`

	// DiskUsed Used disk space in GB.
	DiskUsed *float32 `json:"disk_used,omitempty"`

	// Features List of supported host features.
	Features *[]string `json:"features,omitempty"`

	// Hostname The hostname of the host system.
	Hostname *string `json:"hostname,omitempty"`

	// Kernel The kernel version.
	Kernel *string `json:"kernel,omitempty"`

	// OperatingSystem The name and version of the operating system.
	OperatingSystem *string `json:"operating_system,omitempty"`

	// Timezone The current timezone of the host system.
	Timezone *string `json:"timezone,omitempty"`
}

// HostInfoResponse defines model for HostInfoResponse.
type HostInfoResponse struct {
	Data   HostInfoData           `json:"data"`
	Result HostInfoResponseResult `json:"result"`
}

// HostInfoResponseResult defines model for HostInfoResponse.Result.
type HostInfoResponseResult string

// HostOptionsRequest defines model for HostOptionsRequest.
type HostOptionsRequest struct {
	// Hostname The new hostname for the host system.
	Hostname string `json:"hostname"`
}

// SetHostOptionsJSONRequestBody defines body for SetHostOptions for application/json ContentType.
type SetHostOptionsJSONRequestBody = HostOptionsRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHostInfo request
	GetHostInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetHostOptionsWithBody request with any body
	SetHostOptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetHostOptions(ctx context.Context, body SetHostOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RebootHost request
	RebootHost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReloadHostSupervisorParts request
	ReloadHostSupervisorParts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ShutdownHost request
	ShutdownHost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetHostInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHostInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetHostOptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetHostOptionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetHostOptions(ctx context.Context, body SetHostOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetHostOptionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RebootHost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRebootHostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReloadHostSupervisorParts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReloadHostSupervisorPartsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ShutdownHost(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewShutdownHostRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetHostInfoRequest generates requests for GetHostInfo
func NewGetHostInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/host/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetHostOptionsRequest calls the generic SetHostOptions builder with application/json body
func NewSetHostOptionsRequest(server string, body SetHostOptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetHostOptionsRequestWithBody(server, "application/json", bodyReader)
}

// NewSetHostOptionsRequestWithBody generates requests for SetHostOptions with any type of body
func NewSetHostOptionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/host/options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRebootHostRequest generates requests for RebootHost
func NewRebootHostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/host/reboot")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReloadHostSupervisorPartsRequest generates requests for ReloadHostSupervisorParts
func NewReloadHostSupervisorPartsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/host/reload")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewShutdownHostRequest generates requests for ShutdownHost
func NewShutdownHostRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/host/shutdown")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetHostInfoWithResponse request
	GetHostInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHostInfoResponse, error)

	// SetHostOptionsWithBodyWithResponse request with any body
	SetHostOptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetHostOptionsResponse, error)

	SetHostOptionsWithResponse(ctx context.Context, body SetHostOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetHostOptionsResponse, error)

	// RebootHostWithResponse request
	RebootHostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RebootHostResponse, error)

	// ReloadHostSupervisorPartsWithResponse request
	ReloadHostSupervisorPartsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReloadHostSupervisorPartsResponse, error)

	// ShutdownHostWithResponse request
	ShutdownHostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ShutdownHostResponse, error)
}

type GetHostInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HostInfoResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetHostInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHostInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetHostOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionResult
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SetHostOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetHostOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RebootHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionResult
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RebootHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RebootHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReloadHostSupervisorPartsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionResult
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ReloadHostSupervisorPartsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReloadHostSupervisorPartsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ShutdownHostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionResult
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ShutdownHostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ShutdownHostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetHostInfoWithResponse request returning *GetHostInfoResponse
func (c *ClientWithResponses) GetHostInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHostInfoResponse, error) {
	rsp, err := c.GetHostInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHostInfoResponse(rsp)
}

// SetHostOptionsWithBodyWithResponse request with arbitrary body returning *SetHostOptionsResponse
func (c *ClientWithResponses) SetHostOptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetHostOptionsResponse, error) {
	rsp, err := c.SetHostOptionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetHostOptionsResponse(rsp)
}

func (c *ClientWithResponses) SetHostOptionsWithResponse(ctx context.Context, body SetHostOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetHostOptionsResponse, error) {
	rsp, err := c.SetHostOptions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetHostOptionsResponse(rsp)
}

// RebootHostWithResponse request returning *RebootHostResponse
func (c *ClientWithResponses) RebootHostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RebootHostResponse, error) {
	rsp, err := c.RebootHost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRebootHostResponse(rsp)
}

// ReloadHostSupervisorPartsWithResponse request returning *ReloadHostSupervisorPartsResponse
func (c *ClientWithResponses) ReloadHostSupervisorPartsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReloadHostSupervisorPartsResponse, error) {
	rsp, err := c.ReloadHostSupervisorParts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReloadHostSupervisorPartsResponse(rsp)
}

// ShutdownHostWithResponse request returning *ShutdownHostResponse
func (c *ClientWithResponses) ShutdownHostWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ShutdownHostResponse, error) {
	rsp, err := c.ShutdownHost(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseShutdownHostResponse(rsp)
}

// ParseGetHostInfoResponse parses an HTTP response from a GetHostInfoWithResponse call
func ParseGetHostInfoResponse(rsp *http.Response) (*GetHostInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHostInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HostInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSetHostOptionsResponse parses an HTTP response from a SetHostOptionsWithResponse call
func ParseSetHostOptionsResponse(rsp *http.Response) (*SetHostOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetHostOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseRebootHostResponse parses an HTTP response from a RebootHostWithResponse call
func ParseRebootHostResponse(rsp *http.Response) (*RebootHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RebootHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseReloadHostSupervisorPartsResponse parses an HTTP response from a ReloadHostSupervisorPartsWithResponse call
func ParseReloadHostSupervisorPartsResponse(rsp *http.Response) (*ReloadHostSupervisorPartsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReloadHostSupervisorPartsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseShutdownHostResponse parses an HTTP response from a ShutdownHostWithResponse call
func ParseShutdownHostResponse(rsp *http.Response) (*ShutdownHostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ShutdownHostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}
