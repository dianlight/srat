// Package resolution provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package resolution

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ActionResultResult.
const (
	Ok ActionResultResult = "ok"
)

// Defines values for IssueContext.
const (
	IssueContextAddon      IssueContext = "addon"
	IssueContextCore       IssueContext = "core"
	IssueContextSupervisor IssueContext = "supervisor"
	IssueContextSystem     IssueContext = "system"
)

// Defines values for SuggestionContext.
const (
	SuggestionContextAddon      SuggestionContext = "addon"
	SuggestionContextCore       SuggestionContext = "core"
	SuggestionContextSupervisor SuggestionContext = "supervisor"
	SuggestionContextSystem     SuggestionContext = "system"
)

// ActionResult defines model for ActionResult.
type ActionResult struct {
	// Data Additional data
	Data *map[string]interface{} `json:"data,omitempty"`

	// Result Result of the action
	Result *ActionResultResult `json:"result,omitempty"`
}

// ActionResultResult Result of the action
type ActionResultResult string

// Check defines model for Check.
type Check struct {
	// Enabled Whether this check is currently enabled
	Enabled *bool `json:"enabled,omitempty"`

	// Slug Unique identifier for the check
	Slug *string `json:"slug,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Data    *map[string]interface{} `json:"data"`
	Message *string                 `json:"message"`
}

// Issue defines model for Issue.
type Issue struct {
	// Context Context in which the issue occurs
	Context *IssueContext `json:"context,omitempty"`

	// Reference Reference to the specific component or resource related to the issue
	Reference *string `json:"reference"`

	// Type Type of issue
	Type *string `json:"type,omitempty"`

	// Uuid Unique identifier for the issue
	Uuid *openapi_types.UUID `json:"uuid,omitempty"`
}

// IssueContext Context in which the issue occurs
type IssueContext string

// ResolutionInfo defines model for ResolutionInfo.
type ResolutionInfo struct {
	Checks      *[]Check      `json:"checks,omitempty"`
	Issues      *[]Issue      `json:"issues,omitempty"`
	Suggestions *[]Suggestion `json:"suggestions,omitempty"`

	// Unhealthy List of unhealthy components
	Unhealthy *[]string `json:"unhealthy,omitempty"`

	// Unsupported List of unsupported components
	Unsupported *[]string `json:"unsupported,omitempty"`
}

// Suggestion defines model for Suggestion.
type Suggestion struct {
	// Auto Whether this suggestion can be applied automatically
	Auto *bool `json:"auto,omitempty"`

	// Context Context in which the suggestion applies
	Context *SuggestionContext `json:"context,omitempty"`

	// Reference Reference to the specific component or resource related to the suggestion
	Reference *string `json:"reference"`

	// Type Type of suggested action
	Type *string `json:"type,omitempty"`

	// Uuid Unique identifier for the suggestion
	Uuid *openapi_types.UUID `json:"uuid,omitempty"`
}

// SuggestionContext Context in which the suggestion applies
type SuggestionContext string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// SetCheckOptions request
	SetCheckOptions(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RunCheck request
	RunCheck(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExecuteHealthcheck request
	ExecuteHealthcheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetResolutionInfo request
	GetResolutionInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DismissIssue request
	DismissIssue(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSuggestionsForIssue request
	GetSuggestionsForIssue(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DismissSuggestion request
	DismissSuggestion(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplySuggestion request
	ApplySuggestion(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) SetCheckOptions(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetCheckOptionsRequest(c.Server, slug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RunCheck(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRunCheckRequest(c.Server, slug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteHealthcheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteHealthcheckRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetResolutionInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetResolutionInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DismissIssue(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDismissIssueRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSuggestionsForIssue(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSuggestionsForIssueRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DismissSuggestion(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDismissSuggestionRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplySuggestion(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplySuggestionRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewSetCheckOptionsRequest generates requests for SetCheckOptions
func NewSetCheckOptionsRequest(server string, slug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resolution/check/%s/options", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRunCheckRequest generates requests for RunCheck
func NewRunCheckRequest(server string, slug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resolution/check/%s/run", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExecuteHealthcheckRequest generates requests for ExecuteHealthcheck
func NewExecuteHealthcheckRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resolution/healthcheck")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetResolutionInfoRequest generates requests for GetResolutionInfo
func NewGetResolutionInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resolution/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDismissIssueRequest generates requests for DismissIssue
func NewDismissIssueRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resolution/issue/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSuggestionsForIssueRequest generates requests for GetSuggestionsForIssue
func NewGetSuggestionsForIssueRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resolution/issue/%s/suggestions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDismissSuggestionRequest generates requests for DismissSuggestion
func NewDismissSuggestionRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resolution/suggestion/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplySuggestionRequest generates requests for ApplySuggestion
func NewApplySuggestionRequest(server string, uuid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/resolution/suggestion/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// SetCheckOptionsWithResponse request
	SetCheckOptionsWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*SetCheckOptionsResponse, error)

	// RunCheckWithResponse request
	RunCheckWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*RunCheckResponse, error)

	// ExecuteHealthcheckWithResponse request
	ExecuteHealthcheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ExecuteHealthcheckResponse, error)

	// GetResolutionInfoWithResponse request
	GetResolutionInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResolutionInfoResponse, error)

	// DismissIssueWithResponse request
	DismissIssueWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DismissIssueResponse, error)

	// GetSuggestionsForIssueWithResponse request
	GetSuggestionsForIssueWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSuggestionsForIssueResponse, error)

	// DismissSuggestionWithResponse request
	DismissSuggestionWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DismissSuggestionResponse, error)

	// ApplySuggestionWithResponse request
	ApplySuggestionWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*ApplySuggestionResponse, error)
}

type SetCheckOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionResult
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SetCheckOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetCheckOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RunCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionResult
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RunCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RunCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExecuteHealthcheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionResult
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ExecuteHealthcheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExecuteHealthcheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResolutionInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResolutionInfo
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetResolutionInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResolutionInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DismissIssueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionResult
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DismissIssueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DismissIssueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSuggestionsForIssueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Suggestions *[]Suggestion `json:"suggestions,omitempty"`
	}
	JSON401 *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSuggestionsForIssueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSuggestionsForIssueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DismissSuggestionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionResult
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DismissSuggestionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DismissSuggestionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplySuggestionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionResult
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ApplySuggestionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplySuggestionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// SetCheckOptionsWithResponse request returning *SetCheckOptionsResponse
func (c *ClientWithResponses) SetCheckOptionsWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*SetCheckOptionsResponse, error) {
	rsp, err := c.SetCheckOptions(ctx, slug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetCheckOptionsResponse(rsp)
}

// RunCheckWithResponse request returning *RunCheckResponse
func (c *ClientWithResponses) RunCheckWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*RunCheckResponse, error) {
	rsp, err := c.RunCheck(ctx, slug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRunCheckResponse(rsp)
}

// ExecuteHealthcheckWithResponse request returning *ExecuteHealthcheckResponse
func (c *ClientWithResponses) ExecuteHealthcheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ExecuteHealthcheckResponse, error) {
	rsp, err := c.ExecuteHealthcheck(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteHealthcheckResponse(rsp)
}

// GetResolutionInfoWithResponse request returning *GetResolutionInfoResponse
func (c *ClientWithResponses) GetResolutionInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetResolutionInfoResponse, error) {
	rsp, err := c.GetResolutionInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetResolutionInfoResponse(rsp)
}

// DismissIssueWithResponse request returning *DismissIssueResponse
func (c *ClientWithResponses) DismissIssueWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DismissIssueResponse, error) {
	rsp, err := c.DismissIssue(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDismissIssueResponse(rsp)
}

// GetSuggestionsForIssueWithResponse request returning *GetSuggestionsForIssueResponse
func (c *ClientWithResponses) GetSuggestionsForIssueWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSuggestionsForIssueResponse, error) {
	rsp, err := c.GetSuggestionsForIssue(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSuggestionsForIssueResponse(rsp)
}

// DismissSuggestionWithResponse request returning *DismissSuggestionResponse
func (c *ClientWithResponses) DismissSuggestionWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DismissSuggestionResponse, error) {
	rsp, err := c.DismissSuggestion(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDismissSuggestionResponse(rsp)
}

// ApplySuggestionWithResponse request returning *ApplySuggestionResponse
func (c *ClientWithResponses) ApplySuggestionWithResponse(ctx context.Context, uuid openapi_types.UUID, reqEditors ...RequestEditorFn) (*ApplySuggestionResponse, error) {
	rsp, err := c.ApplySuggestion(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplySuggestionResponse(rsp)
}

// ParseSetCheckOptionsResponse parses an HTTP response from a SetCheckOptionsWithResponse call
func ParseSetCheckOptionsResponse(rsp *http.Response) (*SetCheckOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetCheckOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseRunCheckResponse parses an HTTP response from a RunCheckWithResponse call
func ParseRunCheckResponse(rsp *http.Response) (*RunCheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RunCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseExecuteHealthcheckResponse parses an HTTP response from a ExecuteHealthcheckWithResponse call
func ParseExecuteHealthcheckResponse(rsp *http.Response) (*ExecuteHealthcheckResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExecuteHealthcheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetResolutionInfoResponse parses an HTTP response from a GetResolutionInfoWithResponse call
func ParseGetResolutionInfoResponse(rsp *http.Response) (*GetResolutionInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResolutionInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResolutionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDismissIssueResponse parses an HTTP response from a DismissIssueWithResponse call
func ParseDismissIssueResponse(rsp *http.Response) (*DismissIssueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DismissIssueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetSuggestionsForIssueResponse parses an HTTP response from a GetSuggestionsForIssueWithResponse call
func ParseGetSuggestionsForIssueResponse(rsp *http.Response) (*GetSuggestionsForIssueResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSuggestionsForIssueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Suggestions *[]Suggestion `json:"suggestions,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseDismissSuggestionResponse parses an HTTP response from a DismissSuggestionWithResponse call
func ParseDismissSuggestionResponse(rsp *http.Response) (*DismissSuggestionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DismissSuggestionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseApplySuggestionResponse parses an HTTP response from a ApplySuggestionWithResponse call
func ParseApplySuggestionResponse(rsp *http.Response) (*ApplySuggestionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplySuggestionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}
