// Package mount provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package mount

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for MountType.
const (
	Cifs MountType = "cifs"
	Nfs  MountType = "nfs"
)

// Defines values for MountUsage.
const (
	Backup MountUsage = "backup"
	Media  MountUsage = "media"
	Share  MountUsage = "share"
)

// Mount defines model for Mount.
type Mount struct {
	// Name Name of the mount.
	Name *string `json:"name,omitempty"`

	// Password (cifs mounts only) Password to use for authentication
	Password *string `json:"password,omitempty"`

	// Path (nfs mounts only) Path to mount from the network share
	Path *string `json:"path,omitempty"`

	// Port Port to use (if not using the standard one for the mount type)
	Port *int `json:"port,omitempty"`

	// ReadOnly If the mount is read-only.
	ReadOnly *bool `json:"read_only,omitempty"`

	// Server IP address or hostname of the network share server
	Server *string `json:"server,omitempty"`

	// Share (cifs mounts only) Share to mount from the network share
	Share *string `json:"share,omitempty"`

	// State Current state of the mount (active, failed, etc.)
	State *string `json:"state,omitempty"`

	// Type Type of the mount.
	Type *MountType `json:"type,omitempty"`

	// Usage Usage of the mount (backup, media, or share)
	Usage *MountUsage `json:"usage,omitempty"`

	// Username (cifs mounts only) Username to use for authentication
	Username *string `json:"username,omitempty"`
}

// MountType Type of the mount.
type MountType string

// MountUsage Usage of the mount (backup, media, or share)
type MountUsage string

// CreateMountJSONRequestBody defines body for CreateMount for application/json ContentType.
type CreateMountJSONRequestBody = Mount

// UpdateMountJSONRequestBody defines body for UpdateMount for application/json ContentType.
type UpdateMountJSONRequestBody = Mount

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetMounts request
	GetMounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMountWithBody request with any body
	CreateMountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMount(ctx context.Context, body CreateMountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveMount request
	RemoveMount(ctx context.Context, mountName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMountWithBody request with any body
	UpdateMountWithBody(ctx context.Context, mountName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateMount(ctx context.Context, mountName string, body UpdateMountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReloadMount request
	ReloadMount(ctx context.Context, mountName string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetMounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMount(ctx context.Context, body CreateMountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMount(ctx context.Context, mountName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMountRequest(c.Server, mountName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMountWithBody(ctx context.Context, mountName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMountRequestWithBody(c.Server, mountName, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMount(ctx context.Context, mountName string, body UpdateMountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMountRequest(c.Server, mountName, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReloadMount(ctx context.Context, mountName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReloadMountRequest(c.Server, mountName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetMountsRequest generates requests for GetMounts
func NewGetMountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMountRequest calls the generic CreateMount builder with application/json body
func NewCreateMountRequest(server string, body CreateMountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateMountRequestWithBody generates requests for CreateMount with any type of body
func NewCreateMountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveMountRequest generates requests for RemoveMount
func NewRemoveMountRequest(server string, mountName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mount_name", runtime.ParamLocationPath, mountName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMountRequest calls the generic UpdateMount builder with application/json body
func NewUpdateMountRequest(server string, mountName string, body UpdateMountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateMountRequestWithBody(server, mountName, "application/json", bodyReader)
}

// NewUpdateMountRequestWithBody generates requests for UpdateMount with any type of body
func NewUpdateMountRequestWithBody(server string, mountName string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mount_name", runtime.ParamLocationPath, mountName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReloadMountRequest generates requests for ReloadMount
func NewReloadMountRequest(server string, mountName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mount_name", runtime.ParamLocationPath, mountName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/mounts/%s/reload", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetMountsWithResponse request
	GetMountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMountsResponse, error)

	// CreateMountWithBodyWithResponse request with any body
	CreateMountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMountResponse, error)

	CreateMountWithResponse(ctx context.Context, body CreateMountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMountResponse, error)

	// RemoveMountWithResponse request
	RemoveMountWithResponse(ctx context.Context, mountName string, reqEditors ...RequestEditorFn) (*RemoveMountResponse, error)

	// UpdateMountWithBodyWithResponse request with any body
	UpdateMountWithBodyWithResponse(ctx context.Context, mountName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMountResponse, error)

	UpdateMountWithResponse(ctx context.Context, mountName string, body UpdateMountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMountResponse, error)

	// ReloadMountWithResponse request
	ReloadMountWithResponse(ctx context.Context, mountName string, reqEditors ...RequestEditorFn) (*ReloadMountResponse, error)
}

type GetMountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			DefaultBackupMount *string  `json:"default_backup_mount,omitempty"`
			Mounts             *[]Mount `json:"mounts,omitempty"`
		} `json:"data,omitempty"`
		Result *GetMounts200Result `json:"result,omitempty"`
	}
}
type GetMounts200Result string

// Status returns HTTPResponse.Status
func (r GetMountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   *Mount                `json:"data,omitempty"`
		Result *CreateMount200Result `json:"result,omitempty"`
	}
}
type CreateMount200Result string

// Status returns HTTPResponse.Status
func (r CreateMountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveMountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   *Mount                `json:"data,omitempty"`
		Result *UpdateMount200Result `json:"result,omitempty"`
	}
}
type UpdateMount200Result string

// Status returns HTTPResponse.Status
func (r UpdateMountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReloadMountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ReloadMountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReloadMountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetMountsWithResponse request returning *GetMountsResponse
func (c *ClientWithResponses) GetMountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMountsResponse, error) {
	rsp, err := c.GetMounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMountsResponse(rsp)
}

// CreateMountWithBodyWithResponse request with arbitrary body returning *CreateMountResponse
func (c *ClientWithResponses) CreateMountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMountResponse, error) {
	rsp, err := c.CreateMountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMountResponse(rsp)
}

func (c *ClientWithResponses) CreateMountWithResponse(ctx context.Context, body CreateMountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMountResponse, error) {
	rsp, err := c.CreateMount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMountResponse(rsp)
}

// RemoveMountWithResponse request returning *RemoveMountResponse
func (c *ClientWithResponses) RemoveMountWithResponse(ctx context.Context, mountName string, reqEditors ...RequestEditorFn) (*RemoveMountResponse, error) {
	rsp, err := c.RemoveMount(ctx, mountName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveMountResponse(rsp)
}

// UpdateMountWithBodyWithResponse request with arbitrary body returning *UpdateMountResponse
func (c *ClientWithResponses) UpdateMountWithBodyWithResponse(ctx context.Context, mountName string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMountResponse, error) {
	rsp, err := c.UpdateMountWithBody(ctx, mountName, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMountResponse(rsp)
}

func (c *ClientWithResponses) UpdateMountWithResponse(ctx context.Context, mountName string, body UpdateMountJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateMountResponse, error) {
	rsp, err := c.UpdateMount(ctx, mountName, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMountResponse(rsp)
}

// ReloadMountWithResponse request returning *ReloadMountResponse
func (c *ClientWithResponses) ReloadMountWithResponse(ctx context.Context, mountName string, reqEditors ...RequestEditorFn) (*ReloadMountResponse, error) {
	rsp, err := c.ReloadMount(ctx, mountName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReloadMountResponse(rsp)
}

// ParseGetMountsResponse parses an HTTP response from a GetMountsWithResponse call
func ParseGetMountsResponse(rsp *http.Response) (*GetMountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				DefaultBackupMount *string  `json:"default_backup_mount,omitempty"`
				Mounts             *[]Mount `json:"mounts,omitempty"`
			} `json:"data,omitempty"`
			Result *GetMounts200Result `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateMountResponse parses an HTTP response from a CreateMountWithResponse call
func ParseCreateMountResponse(rsp *http.Response) (*CreateMountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   *Mount                `json:"data,omitempty"`
			Result *CreateMount200Result `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveMountResponse parses an HTTP response from a RemoveMountWithResponse call
func ParseRemoveMountResponse(rsp *http.Response) (*RemoveMountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveMountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpdateMountResponse parses an HTTP response from a UpdateMountWithResponse call
func ParseUpdateMountResponse(rsp *http.Response) (*UpdateMountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   *Mount                `json:"data,omitempty"`
			Result *UpdateMount200Result `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReloadMountResponse parses an HTTP response from a ReloadMountWithResponse call
func ParseReloadMountResponse(rsp *http.Response) (*ReloadMountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReloadMountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
