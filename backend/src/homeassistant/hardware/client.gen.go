// Package hardware provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package hardware

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Attributes defines model for Attributes.
type Attributes struct {
	// DEVTYPE Dreiver type
	DEVTYPE *string `json:"DEVTYPE,omitempty"`

	// DRIVER Driver of the attribute.
	DRIVER *string `json:"DRIVER,omitempty"`

	// IDBUS Bus identifier.
	IDBUS *string `json:"ID_BUS,omitempty"`

	// IDFSLABELENC Encoded label of the filesystem.
	IDFSLABELENC *string `json:"ID_FS_LABEL_ENC,omitempty"`

	// IDFSTYPE Filesystem type.
	IDFSTYPE *string `json:"ID_FS_TYPE,omitempty"`

	// IDFSUSAGE Usage of the filesystem.
	IDFSUSAGE *string `json:"ID_FS_USAGE,omitempty"`

	// IDFSUUIDENC Encoded UUID of the filesystem.
	IDFSUUIDENC *string `json:"ID_FS_UUID_ENC,omitempty"`

	// IDMODELENC Encoded model identifier.
	IDMODELENC *string `json:"ID_MODEL_ENC,omitempty"`

	// IDPARTENTRYNUMBER Partition entry number.
	IDPARTENTRYNUMBER *string `json:"ID_PART_ENTRY_NUMBER,omitempty"`

	// IDPARTENTRYSCHEME Partition entry scheme.
	IDPARTENTRYSCHEME *string `json:"ID_PART_ENTRY_SCHEME,omitempty"`

	// IDREVISION Revision identifier.
	IDREVISION *string `json:"ID_REVISION,omitempty"`

	// IDSERIALSHORT Short serial identifier.
	IDSERIALSHORT *string `json:"ID_SERIAL_SHORT,omitempty"`

	// IDTYPE Type of the attribute.
	IDTYPE *string `json:"ID_TYPE,omitempty"`

	// PARTNAME Partition Name
	PARTNAME *string `json:"PARTNAME,omitempty"`

	// SUBSYSTEM Subsystem of the attribute.
	SUBSYSTEM            *string                `json:"SUBSYSTEM,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// Device defines model for Device.
type Device struct {
	Attributes *Attributes `json:"attributes,omitempty"`

	// ById Device by id.
	ById *string `json:"by_id,omitempty"`

	// Children Children of the device as path array.
	Children *[]string `json:"children,omitempty"`

	// DevPath DevPath of the device.
	DevPath *string `json:"dev_path,omitempty"`

	// Name Name of the device.
	Name *string `json:"name,omitempty"`

	// Subsystem Subsystem of the device.
	Subsystem *string `json:"subsystem,omitempty"`

	// Sysfs Sysfs of the device.
	Sysfs *string `json:"sysfs,omitempty"`
}

// Drive defines model for Drive.
type Drive struct {
	// ConnectionBus Physical connection bus of the drive (USB, etc.).
	ConnectionBus *string `json:"connection_bus,omitempty"`

	// Ejectable Is the drive ejectable by the system?
	Ejectable *bool `json:"ejectable,omitempty"`

	// Filesystems A list of filesystem partitions on the drive.
	Filesystems *[]Filesystem `json:"filesystems,omitempty"`

	// Id Unique and persistent id for drive.
	Id *string `json:"id,omitempty"`

	// Model Drive model.
	Model *string `json:"model,omitempty"`

	// Removable Is the drive removable by the user?
	Removable *bool `json:"removable,omitempty"`

	// Revision Drive revisio.
	Revision *string `json:"revision,omitempty"`

	// Seat Identifier of seat drive is plugged into.
	Seat *string `json:"seat,omitempty"`

	// Serial Drive serial number.
	Serial *string `json:"serial,omitempty"`

	// Size Size of the drive in bytes.
	Size *int `json:"size,omitempty"`

	// Vendor Drive vendor.
	Vendor *string `json:"vendor,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// Device Special device file for the filesystem (e.g. /dev/sda1).
	Device *string `json:"device,omitempty"`

	// Id Unique and persistent id for filesystem.
	Id *string `json:"id,omitempty"`

	// MountPoints List of paths where the filesystem is mounted.
	MountPoints *[]string `json:"mount_points,omitempty"`

	// Name Name of the filesystem (if known).
	Name *string `json:"name,omitempty"`

	// Size Size of the filesystem in bytes.
	Size *int `json:"size,omitempty"`

	// System true if filesystem considered a system/internal device.
	System *bool `json:"system,omitempty"`
}

// HardwareInfo defines model for HardwareInfo.
type HardwareInfo struct {
	Devices *[]Device `json:"devices,omitempty"`
	Drives  *[]Drive  `json:"drives,omitempty"`
}

// Getter for additional properties for Attributes. Returns the specified
// element and whether it was found
func (a Attributes) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Attributes
func (a *Attributes) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Attributes to handle AdditionalProperties
func (a *Attributes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["DEVTYPE"]; found {
		err = json.Unmarshal(raw, &a.DEVTYPE)
		if err != nil {
			return fmt.Errorf("error reading 'DEVTYPE': %w", err)
		}
		delete(object, "DEVTYPE")
	}

	if raw, found := object["DRIVER"]; found {
		err = json.Unmarshal(raw, &a.DRIVER)
		if err != nil {
			return fmt.Errorf("error reading 'DRIVER': %w", err)
		}
		delete(object, "DRIVER")
	}

	if raw, found := object["ID_BUS"]; found {
		err = json.Unmarshal(raw, &a.IDBUS)
		if err != nil {
			return fmt.Errorf("error reading 'ID_BUS': %w", err)
		}
		delete(object, "ID_BUS")
	}

	if raw, found := object["ID_FS_LABEL_ENC"]; found {
		err = json.Unmarshal(raw, &a.IDFSLABELENC)
		if err != nil {
			return fmt.Errorf("error reading 'ID_FS_LABEL_ENC': %w", err)
		}
		delete(object, "ID_FS_LABEL_ENC")
	}

	if raw, found := object["ID_FS_TYPE"]; found {
		err = json.Unmarshal(raw, &a.IDFSTYPE)
		if err != nil {
			return fmt.Errorf("error reading 'ID_FS_TYPE': %w", err)
		}
		delete(object, "ID_FS_TYPE")
	}

	if raw, found := object["ID_FS_USAGE"]; found {
		err = json.Unmarshal(raw, &a.IDFSUSAGE)
		if err != nil {
			return fmt.Errorf("error reading 'ID_FS_USAGE': %w", err)
		}
		delete(object, "ID_FS_USAGE")
	}

	if raw, found := object["ID_FS_UUID_ENC"]; found {
		err = json.Unmarshal(raw, &a.IDFSUUIDENC)
		if err != nil {
			return fmt.Errorf("error reading 'ID_FS_UUID_ENC': %w", err)
		}
		delete(object, "ID_FS_UUID_ENC")
	}

	if raw, found := object["ID_MODEL_ENC"]; found {
		err = json.Unmarshal(raw, &a.IDMODELENC)
		if err != nil {
			return fmt.Errorf("error reading 'ID_MODEL_ENC': %w", err)
		}
		delete(object, "ID_MODEL_ENC")
	}

	if raw, found := object["ID_PART_ENTRY_NUMBER"]; found {
		err = json.Unmarshal(raw, &a.IDPARTENTRYNUMBER)
		if err != nil {
			return fmt.Errorf("error reading 'ID_PART_ENTRY_NUMBER': %w", err)
		}
		delete(object, "ID_PART_ENTRY_NUMBER")
	}

	if raw, found := object["ID_PART_ENTRY_SCHEME"]; found {
		err = json.Unmarshal(raw, &a.IDPARTENTRYSCHEME)
		if err != nil {
			return fmt.Errorf("error reading 'ID_PART_ENTRY_SCHEME': %w", err)
		}
		delete(object, "ID_PART_ENTRY_SCHEME")
	}

	if raw, found := object["ID_REVISION"]; found {
		err = json.Unmarshal(raw, &a.IDREVISION)
		if err != nil {
			return fmt.Errorf("error reading 'ID_REVISION': %w", err)
		}
		delete(object, "ID_REVISION")
	}

	if raw, found := object["ID_SERIAL_SHORT"]; found {
		err = json.Unmarshal(raw, &a.IDSERIALSHORT)
		if err != nil {
			return fmt.Errorf("error reading 'ID_SERIAL_SHORT': %w", err)
		}
		delete(object, "ID_SERIAL_SHORT")
	}

	if raw, found := object["ID_TYPE"]; found {
		err = json.Unmarshal(raw, &a.IDTYPE)
		if err != nil {
			return fmt.Errorf("error reading 'ID_TYPE': %w", err)
		}
		delete(object, "ID_TYPE")
	}

	if raw, found := object["PARTNAME"]; found {
		err = json.Unmarshal(raw, &a.PARTNAME)
		if err != nil {
			return fmt.Errorf("error reading 'PARTNAME': %w", err)
		}
		delete(object, "PARTNAME")
	}

	if raw, found := object["SUBSYSTEM"]; found {
		err = json.Unmarshal(raw, &a.SUBSYSTEM)
		if err != nil {
			return fmt.Errorf("error reading 'SUBSYSTEM': %w", err)
		}
		delete(object, "SUBSYSTEM")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Attributes to handle AdditionalProperties
func (a Attributes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.DEVTYPE != nil {
		object["DEVTYPE"], err = json.Marshal(a.DEVTYPE)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'DEVTYPE': %w", err)
		}
	}

	if a.DRIVER != nil {
		object["DRIVER"], err = json.Marshal(a.DRIVER)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'DRIVER': %w", err)
		}
	}

	if a.IDBUS != nil {
		object["ID_BUS"], err = json.Marshal(a.IDBUS)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ID_BUS': %w", err)
		}
	}

	if a.IDFSLABELENC != nil {
		object["ID_FS_LABEL_ENC"], err = json.Marshal(a.IDFSLABELENC)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ID_FS_LABEL_ENC': %w", err)
		}
	}

	if a.IDFSTYPE != nil {
		object["ID_FS_TYPE"], err = json.Marshal(a.IDFSTYPE)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ID_FS_TYPE': %w", err)
		}
	}

	if a.IDFSUSAGE != nil {
		object["ID_FS_USAGE"], err = json.Marshal(a.IDFSUSAGE)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ID_FS_USAGE': %w", err)
		}
	}

	if a.IDFSUUIDENC != nil {
		object["ID_FS_UUID_ENC"], err = json.Marshal(a.IDFSUUIDENC)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ID_FS_UUID_ENC': %w", err)
		}
	}

	if a.IDMODELENC != nil {
		object["ID_MODEL_ENC"], err = json.Marshal(a.IDMODELENC)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ID_MODEL_ENC': %w", err)
		}
	}

	if a.IDPARTENTRYNUMBER != nil {
		object["ID_PART_ENTRY_NUMBER"], err = json.Marshal(a.IDPARTENTRYNUMBER)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ID_PART_ENTRY_NUMBER': %w", err)
		}
	}

	if a.IDPARTENTRYSCHEME != nil {
		object["ID_PART_ENTRY_SCHEME"], err = json.Marshal(a.IDPARTENTRYSCHEME)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ID_PART_ENTRY_SCHEME': %w", err)
		}
	}

	if a.IDREVISION != nil {
		object["ID_REVISION"], err = json.Marshal(a.IDREVISION)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ID_REVISION': %w", err)
		}
	}

	if a.IDSERIALSHORT != nil {
		object["ID_SERIAL_SHORT"], err = json.Marshal(a.IDSERIALSHORT)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ID_SERIAL_SHORT': %w", err)
		}
	}

	if a.IDTYPE != nil {
		object["ID_TYPE"], err = json.Marshal(a.IDTYPE)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'ID_TYPE': %w", err)
		}
	}

	if a.PARTNAME != nil {
		object["PARTNAME"], err = json.Marshal(a.PARTNAME)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'PARTNAME': %w", err)
		}
	}

	if a.SUBSYSTEM != nil {
		object["SUBSYSTEM"], err = json.Marshal(a.SUBSYSTEM)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'SUBSYSTEM': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHardwareInfo request
	GetHardwareInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetHardwareInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHardwareInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetHardwareInfoRequest generates requests for GetHardwareInfo
func NewGetHardwareInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetHardwareInfoWithResponse request
	GetHardwareInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHardwareInfoResponse, error)
}

type GetHardwareInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   *HardwareInfo             `json:"data,omitempty"`
		Result *GetHardwareInfo200Result `json:"result,omitempty"`
	}
}
type GetHardwareInfo200Result string

// Status returns HTTPResponse.Status
func (r GetHardwareInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHardwareInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetHardwareInfoWithResponse request returning *GetHardwareInfoResponse
func (c *ClientWithResponses) GetHardwareInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHardwareInfoResponse, error) {
	rsp, err := c.GetHardwareInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHardwareInfoResponse(rsp)
}

// ParseGetHardwareInfoResponse parses an HTTP response from a GetHardwareInfoWithResponse call
func ParseGetHardwareInfoResponse(rsp *http.Response) (*GetHardwareInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHardwareInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   *HardwareInfo             `json:"data,omitempty"`
			Result *GetHardwareInfo200Result `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
