// Package hardware provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package hardware

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Device defines model for Device.
type Device struct {
	// Attributes Attributes of the device.
	Attributes *map[string]interface{} `json:"attributes,omitempty"`

	// ById Device by id.
	ById *string `json:"by_id,omitempty"`

	// ByPath Device by path.
	ByPath *string `json:"by_path,omitempty"`

	// Capabilities Capabilities of the device.
	Capabilities *[]string `json:"capabilities,omitempty"`

	// Description Description of the device.
	Description *string `json:"description,omitempty"`

	// DevPath Device path.
	DevPath *string `json:"dev_path,omitempty"`

	// Links List of links to other devices.
	Links *[]string `json:"links,omitempty"`

	// Name Name of the device.
	Name *string `json:"name,omitempty"`

	// Path Path of the device.
	Path *string `json:"path,omitempty"`

	// Subsystem Subsystem of the device.
	Subsystem *string `json:"subsystem,omitempty"`

	// Sysfs Sysfs of the device.
	Sysfs *string `json:"sysfs,omitempty"`

	// Type Type of the device.
	Type *string `json:"type,omitempty"`

	// UsedBy List of add-ons that use this device.
	UsedBy *[]string `json:"used_by,omitempty"`
}

// Drive defines model for Drive.
type Drive struct {
	// ConnectionBus Physical connection bus of the drive (USB, etc.).
	ConnectionBus *string `json:"connection_bus,omitempty"`

	// Ejectable Is the drive ejectable by the system?
	Ejectable *bool `json:"ejectable,omitempty"`

	// Filesystems A list of filesystem partitions on the drive.
	Filesystems *[]Filesystem `json:"filesystems,omitempty"`

	// Id Unique and persistent id for drive.
	Id *string `json:"id,omitempty"`

	// Model Drive model.
	Model *string `json:"model,omitempty"`

	// Removable Is the drive removable by the user?
	Removable *bool `json:"removable,omitempty"`

	// Revision Drive revisio.
	Revision *string `json:"revision,omitempty"`

	// Seat Identifier of seat drive is plugged into.
	Seat *string `json:"seat,omitempty"`

	// Serial Drive serial number.
	Serial *string `json:"serial,omitempty"`

	// Size Size of the drive in bytes.
	Size *int `json:"size,omitempty"`

	// Vendor Drive vendor.
	Vendor *string `json:"vendor,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	// Device Special device file for the filesystem (e.g. /dev/sda1).
	Device *string `json:"device,omitempty"`

	// Id Unique and persistent id for filesystem.
	Id *string `json:"id,omitempty"`

	// MountPoints List of paths where the filesystem is mounted.
	MountPoints *[]string `json:"mount_points,omitempty"`

	// Name Name of the filesystem (if known).
	Name *string `json:"name,omitempty"`

	// Size Size of the filesystem in bytes.
	Size *int `json:"size,omitempty"`

	// System true if filesystem considered a system/internal device.
	System *bool `json:"system,omitempty"`
}

// HardwareInfo defines model for HardwareInfo.
type HardwareInfo struct {
	Devices *[]Device `json:"devices,omitempty"`
	Drives  *[]Drive  `json:"drives,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetHardwareInfo request
	GetHardwareInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetHardwareInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHardwareInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetHardwareInfoRequest generates requests for GetHardwareInfo
func NewGetHardwareInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hardware/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetHardwareInfoWithResponse request
	GetHardwareInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHardwareInfoResponse, error)
}

type GetHardwareInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   *HardwareInfo             `json:"data,omitempty"`
		Result *GetHardwareInfo200Result `json:"result,omitempty"`
	}
}
type GetHardwareInfo200Result string

// Status returns HTTPResponse.Status
func (r GetHardwareInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHardwareInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetHardwareInfoWithResponse request returning *GetHardwareInfoResponse
func (c *ClientWithResponses) GetHardwareInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHardwareInfoResponse, error) {
	rsp, err := c.GetHardwareInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHardwareInfoResponse(rsp)
}

// ParseGetHardwareInfoResponse parses an HTTP response from a GetHardwareInfoWithResponse call
func ParseGetHardwareInfoResponse(rsp *http.Response) (*GetHardwareInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHardwareInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   *HardwareInfo             `json:"data,omitempty"`
			Result *GetHardwareInfo200Result `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
