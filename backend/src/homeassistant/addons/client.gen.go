// Package addons provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package addons

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ActionResultResult.
const (
	ActionResultResultOk ActionResultResult = "ok"
)

// Defines values for AddonInfoDataBoot.
const (
	Auto   AddonInfoDataBoot = "auto"
	Manual AddonInfoDataBoot = "manual"
)

// Defines values for AddonInfoDataStage.
const (
	Deprecated   AddonInfoDataStage = "deprecated"
	Experimental AddonInfoDataStage = "experimental"
	Stable       AddonInfoDataStage = "stable"
)

// Defines values for AddonInfoDataStartup.
const (
	Application AddonInfoDataStartup = "application"
	Initialize  AddonInfoDataStartup = "initialize"
	Once        AddonInfoDataStartup = "once"
	Services    AddonInfoDataStartup = "services"
	System      AddonInfoDataStartup = "system"
)

// Defines values for AddonInfoDataState.
const (
	Error   AddonInfoDataState = "error"
	Started AddonInfoDataState = "started"
	Stopped AddonInfoDataState = "stopped"
	Unknown AddonInfoDataState = "unknown"
)

// Defines values for AddonInfoResponseResult.
const (
	AddonInfoResponseResultOk AddonInfoResponseResult = "ok"
)

// Defines values for AddonOptionsResponseResult.
const (
	AddonOptionsResponseResultOk AddonOptionsResponseResult = "ok"
)

// Defines values for AddonStatsResponseResult.
const (
	AddonStatsResponseResultOk AddonStatsResponseResult = "ok"
)

// ActionResult defines model for ActionResult.
type ActionResult struct {
	// Data Additional data, often an empty object.
	Data *map[string]interface{} `json:"data,omitempty"`

	// Result Indicates the outcome of the action.
	Result ActionResultResult `json:"result"`
}

// ActionResultResult Indicates the outcome of the action.
type ActionResultResult string

// AddonInfoData defines model for AddonInfoData.
type AddonInfoData struct {
	Arch             *[]string          `json:"arch,omitempty"`
	AuthApi          *bool              `json:"auth_api,omitempty"`
	AutoUpdate       *bool              `json:"auto_update,omitempty"`
	Boot             *AddonInfoDataBoot `json:"boot,omitempty"`
	Description      *string            `json:"description,omitempty"`
	FullAccess       *bool              `json:"full_access,omitempty"`
	HassioApi        *bool              `json:"hassio_api,omitempty"`
	HomeassistantApi *bool              `json:"homeassistant_api,omitempty"`
	HostNetwork      *bool              `json:"host_network,omitempty"`
	Hostname         *string            `json:"hostname"`
	Icon             *bool              `json:"icon,omitempty"`
	Ingress          *bool              `json:"ingress,omitempty"`
	IngressEntry     *string            `json:"ingress_entry"`
	IngressPanel     *bool              `json:"ingress_panel,omitempty"`
	IngressUrl       *string            `json:"ingress_url"`

	// IpAddress IP address of the addon within the Docker network.
	IpAddress       *string                 `json:"ip_address"`
	Logo            *bool                   `json:"logo,omitempty"`
	LongDescription *string                 `json:"long_description"`
	Machine         *[]string               `json:"machine,omitempty"`
	Name            *string                 `json:"name,omitempty"`
	Options         *map[string]interface{} `json:"options,omitempty"`
	Protected       *bool                   `json:"protected,omitempty"`
	Rating          *string                 `json:"rating,omitempty"`
	Repository      *string                 `json:"repository,omitempty"`
	Schema          *map[string]interface{} `json:"schema"`
	Slug            *string                 `json:"slug,omitempty"`
	Stage           *AddonInfoDataStage     `json:"stage,omitempty"`
	Startup         *AddonInfoDataStartup   `json:"startup,omitempty"`
	State           *AddonInfoDataState     `json:"state,omitempty"`
	Url             *string                 `json:"url"`
	Version         *string                 `json:"version,omitempty"`
	VersionLatest   *string                 `json:"version_latest"`
	Watchdog        *bool                   `json:"watchdog,omitempty"`
	WithStdin       *bool                   `json:"with_stdin,omitempty"`
}

// AddonInfoDataBoot defines model for AddonInfoData.Boot.
type AddonInfoDataBoot string

// AddonInfoDataStage defines model for AddonInfoData.Stage.
type AddonInfoDataStage string

// AddonInfoDataStartup defines model for AddonInfoData.Startup.
type AddonInfoDataStartup string

// AddonInfoDataState defines model for AddonInfoData.State.
type AddonInfoDataState string

// AddonInfoResponse defines model for AddonInfoResponse.
type AddonInfoResponse struct {
	Data   AddonInfoData           `json:"data"`
	Result AddonInfoResponseResult `json:"result"`
}

// AddonInfoResponseResult defines model for AddonInfoResponse.Result.
type AddonInfoResponseResult string

// AddonOptionsRequest Add-on configuration options to set. Structure depends on the add-on's schema.
type AddonOptionsRequest map[string]interface{}

// AddonOptionsResponse defines model for AddonOptionsResponse.
type AddonOptionsResponse struct {
	// Data Current configuration options for the add-on.
	Data   AddonOptionsResponseData   `json:"data"`
	Result AddonOptionsResponseResult `json:"result"`
}

// AddonOptionsResponseResult defines model for AddonOptionsResponse.Result.
type AddonOptionsResponseResult string

// AddonOptionsResponseData Current configuration options for the add-on.
type AddonOptionsResponseData map[string]interface{}

// AddonStatsData defines model for AddonStatsData.
type AddonStatsData struct {
	// BlkRead Block device read bytes.
	BlkRead *int `json:"blk_read,omitempty"`

	// BlkWrite Block device written bytes.
	BlkWrite   *int     `json:"blk_write,omitempty"`
	CpuPercent *float64 `json:"cpu_percent,omitempty"`

	// MemoryLimit Memory limit in bytes.
	MemoryLimit   *int     `json:"memory_limit,omitempty"`
	MemoryPercent *float64 `json:"memory_percent,omitempty"`

	// MemoryUsage Memory usage in bytes.
	MemoryUsage *int `json:"memory_usage,omitempty"`

	// NetworkRx Network received bytes.
	NetworkRx *int `json:"network_rx,omitempty"`

	// NetworkTx Network transmitted bytes.
	NetworkTx *int `json:"network_tx,omitempty"`
}

// AddonStatsResponse defines model for AddonStatsResponse.
type AddonStatsResponse struct {
	Data   AddonStatsData           `json:"data"`
	Result AddonStatsResponseResult `json:"result"`
}

// AddonStatsResponseResult defines model for AddonStatsResponse.Result.
type AddonStatsResponseResult string

// AddonStdinRequest defines model for AddonStdinRequest.
type AddonStdinRequest struct {
	// Input Data to send to the addon's standard input.
	Input string `json:"input"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Data    *map[string]interface{} `json:"data"`
	Message *string                 `json:"message"`
}

// UpdateSelfAddonRequest defines model for UpdateSelfAddonRequest.
type UpdateSelfAddonRequest struct {
	// Version Optional specific version to update/downgrade to. If omitted, updates to the latest available version.
	Version *string `json:"version,omitempty"`
}

// SetSelfAddonOptionsJSONRequestBody defines body for SetSelfAddonOptions for application/json ContentType.
type SetSelfAddonOptionsJSONRequestBody = AddonOptionsRequest

// SendSelfAddonStdinJSONRequestBody defines body for SendSelfAddonStdin for application/json ContentType.
type SendSelfAddonStdinJSONRequestBody = AddonStdinRequest

// UpdateSelfAddonJSONRequestBody defines body for UpdateSelfAddon for application/json ContentType.
type UpdateSelfAddonJSONRequestBody = UpdateSelfAddonRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetSelfAddonInfo request
	GetSelfAddonInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSelfAddonLogs request
	GetSelfAddonLogs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSelfAddonOptions request
	GetSelfAddonOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetSelfAddonOptionsWithBody request with any body
	SetSelfAddonOptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetSelfAddonOptions(ctx context.Context, body SetSelfAddonOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RestartSelfAddon request
	RestartSelfAddon(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSelfAddonStats request
	GetSelfAddonStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SendSelfAddonStdinWithBody request with any body
	SendSelfAddonStdinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SendSelfAddonStdin(ctx context.Context, body SendSelfAddonStdinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSelfAddonWithBody request with any body
	UpdateSelfAddonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSelfAddon(ctx context.Context, body UpdateSelfAddonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetSelfAddonInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSelfAddonInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSelfAddonLogs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSelfAddonLogsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSelfAddonOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSelfAddonOptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetSelfAddonOptionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetSelfAddonOptionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetSelfAddonOptions(ctx context.Context, body SetSelfAddonOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetSelfAddonOptionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RestartSelfAddon(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestartSelfAddonRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSelfAddonStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSelfAddonStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendSelfAddonStdinWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendSelfAddonStdinRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SendSelfAddonStdin(ctx context.Context, body SendSelfAddonStdinJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSendSelfAddonStdinRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSelfAddonWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSelfAddonRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSelfAddon(ctx context.Context, body UpdateSelfAddonJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSelfAddonRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetSelfAddonInfoRequest generates requests for GetSelfAddonInfo
func NewGetSelfAddonInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addons/self/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSelfAddonLogsRequest generates requests for GetSelfAddonLogs
func NewGetSelfAddonLogsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addons/self/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSelfAddonOptionsRequest generates requests for GetSelfAddonOptions
func NewGetSelfAddonOptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addons/self/options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSetSelfAddonOptionsRequest calls the generic SetSelfAddonOptions builder with application/json body
func NewSetSelfAddonOptionsRequest(server string, body SetSelfAddonOptionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetSelfAddonOptionsRequestWithBody(server, "application/json", bodyReader)
}

// NewSetSelfAddonOptionsRequestWithBody generates requests for SetSelfAddonOptions with any type of body
func NewSetSelfAddonOptionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addons/self/options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRestartSelfAddonRequest generates requests for RestartSelfAddon
func NewRestartSelfAddonRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addons/self/restart")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSelfAddonStatsRequest generates requests for GetSelfAddonStats
func NewGetSelfAddonStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addons/self/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSendSelfAddonStdinRequest calls the generic SendSelfAddonStdin builder with application/json body
func NewSendSelfAddonStdinRequest(server string, body SendSelfAddonStdinJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSendSelfAddonStdinRequestWithBody(server, "application/json", bodyReader)
}

// NewSendSelfAddonStdinRequestWithBody generates requests for SendSelfAddonStdin with any type of body
func NewSendSelfAddonStdinRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addons/self/stdin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateSelfAddonRequest calls the generic UpdateSelfAddon builder with application/json body
func NewUpdateSelfAddonRequest(server string, body UpdateSelfAddonJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSelfAddonRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateSelfAddonRequestWithBody generates requests for UpdateSelfAddon with any type of body
func NewUpdateSelfAddonRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/addons/self/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetSelfAddonInfoWithResponse request
	GetSelfAddonInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfAddonInfoResponse, error)

	// GetSelfAddonLogsWithResponse request
	GetSelfAddonLogsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfAddonLogsResponse, error)

	// GetSelfAddonOptionsWithResponse request
	GetSelfAddonOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfAddonOptionsResponse, error)

	// SetSelfAddonOptionsWithBodyWithResponse request with any body
	SetSelfAddonOptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetSelfAddonOptionsResponse, error)

	SetSelfAddonOptionsWithResponse(ctx context.Context, body SetSelfAddonOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetSelfAddonOptionsResponse, error)

	// RestartSelfAddonWithResponse request
	RestartSelfAddonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RestartSelfAddonResponse, error)

	// GetSelfAddonStatsWithResponse request
	GetSelfAddonStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfAddonStatsResponse, error)

	// SendSelfAddonStdinWithBodyWithResponse request with any body
	SendSelfAddonStdinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendSelfAddonStdinResponse, error)

	SendSelfAddonStdinWithResponse(ctx context.Context, body SendSelfAddonStdinJSONRequestBody, reqEditors ...RequestEditorFn) (*SendSelfAddonStdinResponse, error)

	// UpdateSelfAddonWithBodyWithResponse request with any body
	UpdateSelfAddonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSelfAddonResponse, error)

	UpdateSelfAddonWithResponse(ctx context.Context, body UpdateSelfAddonJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSelfAddonResponse, error)
}

type GetSelfAddonInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddonInfoResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSelfAddonInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSelfAddonInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSelfAddonLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSelfAddonLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSelfAddonLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSelfAddonOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddonOptionsResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSelfAddonOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSelfAddonOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetSelfAddonOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionResult
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SetSelfAddonOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetSelfAddonOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RestartSelfAddonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionResult
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r RestartSelfAddonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestartSelfAddonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSelfAddonStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddonStatsResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSelfAddonStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSelfAddonStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SendSelfAddonStdinResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionResult
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SendSelfAddonStdinResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SendSelfAddonStdinResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSelfAddonResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ActionResult
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateSelfAddonResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSelfAddonResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetSelfAddonInfoWithResponse request returning *GetSelfAddonInfoResponse
func (c *ClientWithResponses) GetSelfAddonInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfAddonInfoResponse, error) {
	rsp, err := c.GetSelfAddonInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSelfAddonInfoResponse(rsp)
}

// GetSelfAddonLogsWithResponse request returning *GetSelfAddonLogsResponse
func (c *ClientWithResponses) GetSelfAddonLogsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfAddonLogsResponse, error) {
	rsp, err := c.GetSelfAddonLogs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSelfAddonLogsResponse(rsp)
}

// GetSelfAddonOptionsWithResponse request returning *GetSelfAddonOptionsResponse
func (c *ClientWithResponses) GetSelfAddonOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfAddonOptionsResponse, error) {
	rsp, err := c.GetSelfAddonOptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSelfAddonOptionsResponse(rsp)
}

// SetSelfAddonOptionsWithBodyWithResponse request with arbitrary body returning *SetSelfAddonOptionsResponse
func (c *ClientWithResponses) SetSelfAddonOptionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetSelfAddonOptionsResponse, error) {
	rsp, err := c.SetSelfAddonOptionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetSelfAddonOptionsResponse(rsp)
}

func (c *ClientWithResponses) SetSelfAddonOptionsWithResponse(ctx context.Context, body SetSelfAddonOptionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetSelfAddonOptionsResponse, error) {
	rsp, err := c.SetSelfAddonOptions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetSelfAddonOptionsResponse(rsp)
}

// RestartSelfAddonWithResponse request returning *RestartSelfAddonResponse
func (c *ClientWithResponses) RestartSelfAddonWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RestartSelfAddonResponse, error) {
	rsp, err := c.RestartSelfAddon(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRestartSelfAddonResponse(rsp)
}

// GetSelfAddonStatsWithResponse request returning *GetSelfAddonStatsResponse
func (c *ClientWithResponses) GetSelfAddonStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSelfAddonStatsResponse, error) {
	rsp, err := c.GetSelfAddonStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSelfAddonStatsResponse(rsp)
}

// SendSelfAddonStdinWithBodyWithResponse request with arbitrary body returning *SendSelfAddonStdinResponse
func (c *ClientWithResponses) SendSelfAddonStdinWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SendSelfAddonStdinResponse, error) {
	rsp, err := c.SendSelfAddonStdinWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendSelfAddonStdinResponse(rsp)
}

func (c *ClientWithResponses) SendSelfAddonStdinWithResponse(ctx context.Context, body SendSelfAddonStdinJSONRequestBody, reqEditors ...RequestEditorFn) (*SendSelfAddonStdinResponse, error) {
	rsp, err := c.SendSelfAddonStdin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSendSelfAddonStdinResponse(rsp)
}

// UpdateSelfAddonWithBodyWithResponse request with arbitrary body returning *UpdateSelfAddonResponse
func (c *ClientWithResponses) UpdateSelfAddonWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSelfAddonResponse, error) {
	rsp, err := c.UpdateSelfAddonWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSelfAddonResponse(rsp)
}

func (c *ClientWithResponses) UpdateSelfAddonWithResponse(ctx context.Context, body UpdateSelfAddonJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSelfAddonResponse, error) {
	rsp, err := c.UpdateSelfAddon(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSelfAddonResponse(rsp)
}

// ParseGetSelfAddonInfoResponse parses an HTTP response from a GetSelfAddonInfoWithResponse call
func ParseGetSelfAddonInfoResponse(rsp *http.Response) (*GetSelfAddonInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSelfAddonInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddonInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetSelfAddonLogsResponse parses an HTTP response from a GetSelfAddonLogsWithResponse call
func ParseGetSelfAddonLogsResponse(rsp *http.Response) (*GetSelfAddonLogsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSelfAddonLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetSelfAddonOptionsResponse parses an HTTP response from a GetSelfAddonOptionsWithResponse call
func ParseGetSelfAddonOptionsResponse(rsp *http.Response) (*GetSelfAddonOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSelfAddonOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddonOptionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSetSelfAddonOptionsResponse parses an HTTP response from a SetSelfAddonOptionsWithResponse call
func ParseSetSelfAddonOptionsResponse(rsp *http.Response) (*SetSelfAddonOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetSelfAddonOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseRestartSelfAddonResponse parses an HTTP response from a RestartSelfAddonWithResponse call
func ParseRestartSelfAddonResponse(rsp *http.Response) (*RestartSelfAddonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestartSelfAddonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseGetSelfAddonStatsResponse parses an HTTP response from a GetSelfAddonStatsWithResponse call
func ParseGetSelfAddonStatsResponse(rsp *http.Response) (*GetSelfAddonStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSelfAddonStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddonStatsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseSendSelfAddonStdinResponse parses an HTTP response from a SendSelfAddonStdinWithResponse call
func ParseSendSelfAddonStdinResponse(rsp *http.Response) (*SendSelfAddonStdinResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SendSelfAddonStdinResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}

// ParseUpdateSelfAddonResponse parses an HTTP response from a UpdateSelfAddonWithResponse call
func ParseUpdateSelfAddonResponse(rsp *http.Response) (*UpdateSelfAddonResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSelfAddonResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ActionResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	}

	return response, nil
}
