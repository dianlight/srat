// Package root provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package root

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for SystemInfoFeatures.
const (
	Disk        SystemInfoFeatures = "disk"
	Haos        SystemInfoFeatures = "haos"
	Hostname    SystemInfoFeatures = "hostname"
	Journal     SystemInfoFeatures = "journal"
	LessThannil SystemInfoFeatures = "<nil>"
	Mount       SystemInfoFeatures = "mount"
	Network     SystemInfoFeatures = "network"
	OsAgent     SystemInfoFeatures = "os_agent"
	Reboot      SystemInfoFeatures = "reboot"
	Resolved    SystemInfoFeatures = "resolved"
	Services    SystemInfoFeatures = "services"
	Shutdown    SystemInfoFeatures = "shutdown"
	Timedate    SystemInfoFeatures = "timedate"
)

// SimpleOkResponse defines model for SimpleOkResponse.
type SimpleOkResponse struct {
	Result *string `json:"result,omitempty"`
}

// SystemInfo defines model for SystemInfo.
type SystemInfo struct {
	Arch            *string               `json:"arch,omitempty"`
	Channel         *string               `json:"channel,omitempty"`
	Doker           *string               `json:"doker"`
	Features        *[]SystemInfoFeatures `json:"features,omitempty"`
	Hassos          *string               `json:"hassos"`
	Homeassistant   *string               `json:"homeassistant,omitempty"`
	Hostname        *string               `json:"hostname,omitempty"`
	Logging         *string               `json:"logging,omitempty"`
	Machine         *string               `json:"machine,omitempty"`
	MachineId       *string               `json:"machine_id,omitempty"`
	OperatingSystem *string               `json:"operating_system,omitempty"`
	State           *string               `json:"state,omitempty"`
	Supervisor      *string               `json:"supervisor,omitempty"`
	Supported       *bool                 `json:"supported,omitempty"`
	SupportedArch   *[]string             `json:"supported_arch,omitempty"`
	Timezone        *string               `json:"timezone,omitempty"`
}

// SystemInfoFeatures defines model for SystemInfo.Features.
type SystemInfoFeatures string

// UpdateItem defines model for UpdateItem.
type UpdateItem struct {
	Name          *string `json:"name,omitempty"`
	UpdateType    *string `json:"update_type,omitempty"`
	Version       *string `json:"version,omitempty"`
	VersionLatest *string `json:"version_latest,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAvailableUpdates request
	GetAvailableUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSystemInfo request
	GetSystemInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RefreshUpdates request
	RefreshUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReloadUpdates request
	ReloadUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAvailableUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAvailableUpdatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSystemInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSystemInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RefreshUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRefreshUpdatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReloadUpdates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReloadUpdatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAvailableUpdatesRequest generates requests for GetAvailableUpdates
func NewGetAvailableUpdatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/available_updates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSystemInfoRequest generates requests for GetSystemInfo
func NewGetSystemInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRefreshUpdatesRequest generates requests for RefreshUpdates
func NewRefreshUpdatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/refresh_updates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReloadUpdatesRequest generates requests for ReloadUpdates
func NewReloadUpdatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/reload_updates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAvailableUpdatesWithResponse request
	GetAvailableUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAvailableUpdatesResponse, error)

	// GetSystemInfoWithResponse request
	GetSystemInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemInfoResponse, error)

	// RefreshUpdatesWithResponse request
	RefreshUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RefreshUpdatesResponse, error)

	// ReloadUpdatesWithResponse request
	ReloadUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReloadUpdatesResponse, error)
}

type GetAvailableUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data *struct {
			AvailableUpdates *[]UpdateItem `json:"available_updates,omitempty"`
		} `json:"data,omitempty"`
		Result *string `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetAvailableUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAvailableUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSystemInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Data   *SystemInfo `json:"data,omitempty"`
		Result *string     `json:"result,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetSystemInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSystemInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RefreshUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimpleOkResponse
}

// Status returns HTTPResponse.Status
func (r RefreshUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RefreshUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReloadUpdatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SimpleOkResponse
}

// Status returns HTTPResponse.Status
func (r ReloadUpdatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReloadUpdatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAvailableUpdatesWithResponse request returning *GetAvailableUpdatesResponse
func (c *ClientWithResponses) GetAvailableUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAvailableUpdatesResponse, error) {
	rsp, err := c.GetAvailableUpdates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAvailableUpdatesResponse(rsp)
}

// GetSystemInfoWithResponse request returning *GetSystemInfoResponse
func (c *ClientWithResponses) GetSystemInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSystemInfoResponse, error) {
	rsp, err := c.GetSystemInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSystemInfoResponse(rsp)
}

// RefreshUpdatesWithResponse request returning *RefreshUpdatesResponse
func (c *ClientWithResponses) RefreshUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*RefreshUpdatesResponse, error) {
	rsp, err := c.RefreshUpdates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRefreshUpdatesResponse(rsp)
}

// ReloadUpdatesWithResponse request returning *ReloadUpdatesResponse
func (c *ClientWithResponses) ReloadUpdatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ReloadUpdatesResponse, error) {
	rsp, err := c.ReloadUpdates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReloadUpdatesResponse(rsp)
}

// ParseGetAvailableUpdatesResponse parses an HTTP response from a GetAvailableUpdatesWithResponse call
func ParseGetAvailableUpdatesResponse(rsp *http.Response) (*GetAvailableUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAvailableUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data *struct {
				AvailableUpdates *[]UpdateItem `json:"available_updates,omitempty"`
			} `json:"data,omitempty"`
			Result *string `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSystemInfoResponse parses an HTTP response from a GetSystemInfoWithResponse call
func ParseGetSystemInfoResponse(rsp *http.Response) (*GetSystemInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSystemInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Data   *SystemInfo `json:"data,omitempty"`
			Result *string     `json:"result,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRefreshUpdatesResponse parses an HTTP response from a RefreshUpdatesWithResponse call
func ParseRefreshUpdatesResponse(rsp *http.Response) (*RefreshUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RefreshUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimpleOkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseReloadUpdatesResponse parses an HTTP response from a ReloadUpdatesWithResponse call
func ParseReloadUpdatesResponse(rsp *http.Response) (*ReloadUpdatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReloadUpdatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SimpleOkResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
