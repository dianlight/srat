definitions:
  data.MounDataFlag:
    enum:
    - 1
    - 2
    - 4
    - 8
    - 16
    - 32
    - 64
    - 1024
    - 2048
    - 4096
    - 33554432
    - -2147483648
    - 2097152
    type: integer
    x-enum-comments:
      MS_BIND: Bind directory at differente place
      MS_LAZYTIME: Lazily update access and modification times
      MS_MANDLOCK: Allow mandatory locks
      MS_NOATIME: Do not update access and modification times
      MS_NODEV: Disallow access to device special files
      MS_NODIRATIME: Do not update directory access and modification times
      MS_NOEXEC: Disallow execution of binaries
      MS_NOSUID: Ignore setuid and setgid bits
      MS_NOUSER: Do not update user and group IDs
      MS_RDONLY: Mount read only
      MS_RELATIME: Update access and modification times only when necessary
      MS_REMOUNT: Remount the filesystem
      MS_SYNCHRONOUS: Write data synchronously (wait until data has been written)
    x-enum-varnames:
    - MS_RDONLY
    - MS_NOSUID
    - MS_NODEV
    - MS_NOEXEC
    - MS_SYNCHRONOUS
    - MS_REMOUNT
    - MS_MANDLOCK
    - MS_NOATIME
    - MS_NODIRATIME
    - MS_BIND
    - MS_LAZYTIME
    - MS_NOUSER
    - MS_RELATIME
  dm.UpdateChannel:
    enum:
    - stable
    - prerelease
    - none
    type: string
    x-enum-varnames:
    - Stable
    - Prerelease
    - None
  dto.BlockInfo:
    properties:
      partitions:
        description: |-
          Partitions contains an array of pointers to `Partition` structs, one for
          each partition on any disk drive on the host system.
        items:
          $ref: '#/definitions/dto.BlockPartition'
        type: array
      total_size_bytes:
        type: integer
    type: object
  dto.BlockPartition:
    properties:
      default_mount_point:
        description: MountPoint is the path where this partition is mounted last time
        type: string
      filesystem_label:
        description: |-
          FilesystemLabel is the label of the filesystem contained on the
          partition. On Linux, this is derived from the `ID_FS_NAME` udev entry.
        type: string
      label:
        description: |-
          Label is the human-readable label given to the partition. On Linux, this
          is derived from the `ID_PART_ENTRY_NAME` udev entry.
        type: string
      mount_data:
        description: MountData contains additional data associated with the partition.
        type: string
      mount_flags:
        description: MountFlags contains the mount flags for the partition.
        items:
          $ref: '#/definitions/data.MounDataFlag'
        type: array
      mount_point:
        description: MountPoint is the path where this partition is mounted.
        type: string
      name:
        description: Name is the system name given to the partition, e.g. "sda1".
        type: string
      partition_flags:
        description: PartiionFlags contains the mount flags for the partition.
        items:
          $ref: '#/definitions/data.MounDataFlag'
        type: array
      read_only:
        description: IsReadOnly indicates if the partition is marked read-only.
        type: boolean
      size_bytes:
        description: |-
          SizeBytes contains the total amount of storage, in bytes, this partition
          can consume.
        type: integer
      type:
        description: Type contains the type of the partition.
        type: string
      uuid:
        description: |-
          UUID is the universally-unique identifier (UUID) for the partition.
          This will be volume UUID on Darwin, PartUUID on linux, empty on Windows.
        type: string
    type: object
  dto.DataDirtyTracker:
    properties:
      settings:
        type: boolean
      shares:
        type: boolean
      users:
        type: boolean
      volumes:
        type: boolean
    type: object
  dto.EventType:
    enum:
    - update
    - heartbeat
    - share
    - volumes
    - dirty
    type: string
    x-enum-varnames:
    - EventUpdate
    - EventHeartbeat
    - EventShare
    - EventVolumes
    - EventDirty
  dto.HealthPing:
    properties:
      alive:
        type: boolean
      last_error:
        type: string
      read_only:
        type: boolean
      samba_pid:
        type: integer
    type: object
  dto.MountPointData:
    properties:
      data:
        type: string
      default_path:
        type: string
      flags:
        items:
          $ref: '#/definitions/data.MounDataFlag'
        type: array
      fstype:
        type: string
      label:
        type: string
      name:
        type: string
      path:
        type: string
    type: object
  dto.NIC:
    properties:
      duplex:
        description: |-
          Duplex is a string indicating the current duplex setting of this NIC,
          e.g. "Full"
        type: string
      is_virtual:
        description: |-
          IsVirtual is true if the NIC is entirely virtual/emulated, false
          otherwise.
        type: boolean
      mac_address:
        description: MACAddress is the Media Access Control (MAC) address of this
          NIC.
        type: string
      name:
        description: Name is the string identifier the system gave this NIC.
        type: string
      speed:
        description: Speed is a string describing the link speed of this NIC, e.g.
          "1000Mb/s"
        type: string
    type: object
  dto.NetworkInfo:
    properties:
      nics:
        items:
          $ref: '#/definitions/dto.NIC'
        type: array
    type: object
  dto.ReleaseAsset:
    properties:
      arch:
        $ref: '#/definitions/github.ReleaseAsset'
      last_release:
        $ref: '#/definitions/github.RepositoryRelease'
      update_status:
        type: integer
    type: object
  dto.ResponseError:
    properties:
      body: {}
      code:
        type: integer
      error:
        type: string
    type: object
  dto.SambaProcessStatus:
    properties:
      connections:
        type: integer
      cpu_percent:
        type: number
      create_time:
        type: string
      is_running:
        type: boolean
      memory_percent:
        type: number
      name:
        type: string
      open_files:
        type: integer
      pid:
        type: integer
      status:
        items:
          type: string
        type: array
    type: object
  dto.Settings:
    properties:
      allow_hosts:
        items:
          type: string
        type: array
      bind_all_interfaces:
        type: boolean
      compatibility_mode:
        type: boolean
      interfaces:
        items:
          type: string
        type: array
      log_level:
        type: string
      mountoptions:
        items:
          type: string
        type: array
      multi_channel:
        type: boolean
      recyle_bin_enabled:
        type: boolean
      update_channel:
        $ref: '#/definitions/dm.UpdateChannel'
      veto_files:
        items:
          type: string
        type: array
      workgroup:
        type: string
    type: object
  dto.SharedResource:
    properties:
      disabled:
        type: boolean
      fs:
        type: string
      name:
        type: string
      path:
        type: string
      ro_users:
        items:
          type: string
        type: array
      timemachine:
        type: boolean
      usage:
        type: string
      users:
        items:
          type: string
        type: array
    type: object
  dto.SharedResources:
    additionalProperties:
      $ref: '#/definitions/dto.SharedResource'
    type: object
  dto.User:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  github.Match:
    properties:
      indices:
        items:
          type: integer
        type: array
      text:
        type: string
    type: object
  github.Organization:
    properties:
      advanced_security_enabled_for_new_repositories:
        description: AdvancedSecurityAuditLogEnabled toggles whether the advanced
          security audit log is enabled.
        type: boolean
      avatar_url:
        type: string
      billing_email:
        type: string
      blog:
        type: string
      collaborators:
        type: integer
      company:
        type: string
      created_at:
        $ref: '#/definitions/github.Timestamp'
      default_repository_permission:
        description: |-
          DefaultRepoPermission can be one of: "read", "write", "admin", or "none". (Default: "read").
          It is only used in OrganizationsService.Edit.
        type: string
      default_repository_settings:
        description: |-
          DefaultRepoSettings can be one of: "read", "write", "admin", or "none". (Default: "read").
          It is only used in OrganizationsService.Get.
        type: string
      dependabot_alerts_enabled_for_new_repositories:
        description: DependabotAlertsEnabled toggles whether dependabot alerts are
          enabled.
        type: boolean
      dependabot_security_updates_enabled_for_new_repositories:
        description: DependabotSecurityUpdatesEnabled toggles whether dependabot security
          updates are enabled.
        type: boolean
      dependency_graph_enabled_for_new_repositories:
        description: DependabotGraphEnabledForNewRepos toggles whether dependabot
          graph is enabled on new repositories.
        type: boolean
      description:
        type: string
      disk_usage:
        type: integer
      email:
        type: string
      events_url:
        type: string
      followers:
        type: integer
      following:
        type: integer
      has_organization_projects:
        type: boolean
      has_repository_projects:
        type: boolean
      hooks_url:
        type: string
      html_url:
        type: string
      id:
        type: integer
      is_verified:
        type: boolean
      issues_url:
        type: string
      location:
        type: string
      login:
        type: string
      members_allowed_repository_creation_type:
        description: |-
          MembersAllowedRepositoryCreationType denotes if organization members can create repositories
          and the type of repositories they can create. Possible values are: "all", "private", or "none".

          Deprecated: Use MembersCanCreatePublicRepos, MembersCanCreatePrivateRepos, MembersCanCreateInternalRepos
          instead. The new fields overrides the existing MembersAllowedRepositoryCreationType during 'edit'
          operation and does not consider 'internal' repositories during 'get' operation
        type: string
      members_can_create_internal_repositories:
        type: boolean
      members_can_create_pages:
        description: MembersCanCreatePages toggles whether organization members can
          create GitHub Pages sites.
        type: boolean
      members_can_create_private_pages:
        description: MembersCanCreatePrivatePages toggles whether organization members
          can create private GitHub Pages sites.
        type: boolean
      members_can_create_private_repositories:
        type: boolean
      members_can_create_public_pages:
        description: MembersCanCreatePublicPages toggles whether organization members
          can create public GitHub Pages sites.
        type: boolean
      members_can_create_public_repositories:
        description: https://developer.github.com/changes/2019-12-03-internal-visibility-changes/#rest-v3-api
        type: boolean
      members_can_create_repositories:
        description: MembersCanCreateRepos default value is true and is only used
          in Organizations.Edit.
        type: boolean
      members_can_fork_private_repositories:
        description: MembersCanForkPrivateRepos toggles whether organization members
          can fork private organization repositories.
        type: boolean
      members_url:
        type: string
      name:
        type: string
      node_id:
        type: string
      owned_private_repos:
        type: integer
      plan:
        $ref: '#/definitions/github.Plan'
      private_gists:
        type: integer
      public_gists:
        type: integer
      public_members_url:
        type: string
      public_repos:
        type: integer
      repos_url:
        type: string
      secret_scanning_enabled_for_new_repositories:
        description: SecretScanningEnabled toggles whether secret scanning is enabled
          on new repositories.
        type: boolean
      secret_scanning_push_protection_enabled_for_new_repositories:
        description: SecretScanningPushProtectionEnabledForNewRepos toggles whether
          secret scanning push protection is enabled on new repositories.
        type: boolean
      secret_scanning_validity_checks_enabled:
        description: SecretScanningValidityChecksEnabled toggles whether secret scanning
          validity check is enabled.
        type: boolean
      total_private_repos:
        type: integer
      twitter_username:
        type: string
      two_factor_requirement_enabled:
        type: boolean
      type:
        type: string
      updated_at:
        $ref: '#/definitions/github.Timestamp'
      url:
        description: API URLs
        type: string
      web_commit_signoff_required:
        description: WebCommitSignoffRequire toggles
        type: boolean
    type: object
  github.Plan:
    properties:
      collaborators:
        type: integer
      filled_seats:
        type: integer
      name:
        type: string
      private_repos:
        type: integer
      seats:
        type: integer
      space:
        type: integer
    type: object
  github.ReleaseAsset:
    properties:
      browser_download_url:
        type: string
      content_type:
        type: string
      created_at:
        $ref: '#/definitions/github.Timestamp'
      download_count:
        type: integer
      id:
        type: integer
      label:
        type: string
      name:
        type: string
      node_id:
        type: string
      size:
        type: integer
      state:
        type: string
      updated_at:
        $ref: '#/definitions/github.Timestamp'
      uploader:
        $ref: '#/definitions/github.User'
      url:
        type: string
    type: object
  github.RepositoryRelease:
    properties:
      assets:
        items:
          $ref: '#/definitions/github.ReleaseAsset'
        type: array
      assets_url:
        type: string
      author:
        $ref: '#/definitions/github.User'
      body:
        type: string
      created_at:
        $ref: '#/definitions/github.Timestamp'
      discussion_category_name:
        type: string
      draft:
        type: boolean
      generate_release_notes:
        description: 'The following fields are not used in EditRelease:'
        type: boolean
      html_url:
        type: string
      id:
        description: 'The following fields are not used in CreateRelease or EditRelease:'
        type: integer
      make_latest:
        description: 'MakeLatest can be one of: "true", "false", or "legacy".'
        type: string
      name:
        type: string
      node_id:
        type: string
      prerelease:
        type: boolean
      published_at:
        $ref: '#/definitions/github.Timestamp'
      tag_name:
        type: string
      tarball_url:
        type: string
      target_commitish:
        type: string
      upload_url:
        type: string
      url:
        type: string
      zipball_url:
        type: string
    type: object
  github.Team:
    properties:
      assignment:
        description: |-
          Assignment identifies how a team was assigned to an organization role. Its
          possible values are: "direct", "indirect", "mixed". This is only populated when
          calling the ListTeamsAssignedToOrgRole method.
        type: string
      description:
        type: string
      html_url:
        type: string
      id:
        type: integer
      ldap_dn:
        description: |-
          LDAPDN is only available in GitHub Enterprise and when the team
          membership is synchronized with LDAP.
        type: string
      members_count:
        type: integer
      members_url:
        type: string
      name:
        type: string
      node_id:
        type: string
      organization:
        $ref: '#/definitions/github.Organization'
      parent:
        $ref: '#/definitions/github.Team'
      permission:
        description: Permission specifies the default permission for repositories
          owned by the team.
        type: string
      permissions:
        additionalProperties:
          type: boolean
        description: |-
          Permissions identifies the permissions that a team has on a given
          repository. This is only populated when calling Repositories.ListTeams.
        type: object
      privacy:
        description: |-
          Privacy identifies the level of privacy this team should have.
          Possible values are:
              secret - only visible to organization owners and members of this team
              closed - visible to all members of this organization
          Default is "secret".
        type: string
      repos_count:
        type: integer
      repositories_url:
        type: string
      slug:
        type: string
      url:
        type: string
    type: object
  github.TextMatch:
    properties:
      fragment:
        type: string
      matches:
        items:
          $ref: '#/definitions/github.Match'
        type: array
      object_type:
        type: string
      object_url:
        type: string
      property:
        type: string
    type: object
  github.Timestamp:
    properties:
      time.Time:
        type: string
    type: object
  github.User:
    properties:
      assignment:
        description: |-
          Assignment identifies how a user was assigned to an organization role. Its
          possible values are: "direct", "indirect", "mixed". This is only populated when
          calling the ListUsersAssignedToOrgRole method.
        type: string
      avatar_url:
        type: string
      bio:
        type: string
      blog:
        type: string
      collaborators:
        type: integer
      company:
        type: string
      created_at:
        $ref: '#/definitions/github.Timestamp'
      disk_usage:
        type: integer
      email:
        type: string
      events_url:
        type: string
      followers:
        type: integer
      followers_url:
        type: string
      following:
        type: integer
      following_url:
        type: string
      gists_url:
        type: string
      gravatar_id:
        type: string
      hireable:
        type: boolean
      html_url:
        type: string
      id:
        type: integer
      inherited_from:
        allOf:
        - $ref: '#/definitions/github.Team'
        description: |-
          InheritedFrom identifies the team that a user inherited their organization role
          from. This is only populated when calling the ListUsersAssignedToOrgRole method.
      ldap_dn:
        type: string
      location:
        type: string
      login:
        type: string
      name:
        type: string
      node_id:
        type: string
      organizations_url:
        type: string
      owned_private_repos:
        type: integer
      permissions:
        additionalProperties:
          type: boolean
        description: |-
          Permissions and RoleName identify the permissions and role that a user has on a given
          repository. These are only populated when calling Repositories.ListCollaborators.
        type: object
      plan:
        $ref: '#/definitions/github.Plan'
      private_gists:
        type: integer
      public_gists:
        type: integer
      public_repos:
        type: integer
      received_events_url:
        type: string
      repos_url:
        type: string
      role_name:
        type: string
      site_admin:
        type: boolean
      starred_url:
        type: string
      subscriptions_url:
        type: string
      suspended_at:
        $ref: '#/definitions/github.Timestamp'
      text_matches:
        description: |-
          TextMatches is only populated from search results that request text matches
          See: search.go and https://docs.github.com/rest/search/#text-match-metadata
        items:
          $ref: '#/definitions/github.TextMatch'
        type: array
      total_private_repos:
        type: integer
      twitter_username:
        type: string
      two_factor_authentication:
        type: boolean
      type:
        type: string
      updated_at:
        $ref: '#/definitions/github.Timestamp'
      url:
        description: API URLs
        type: string
    type: object
info:
  contact:
    email: lucio.tarantino@gmail.com
    name: Lucio Tarantino
    url: https://github.com/dianlight
  description: This are samba rest admin API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: SRAT API
  version: "1.0"
paths:
  /admin/user:
    get:
      description: get the admin user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Get the admin user
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: update admin user
      parameters:
      - description: Update model
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Update admin user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: update admin user
      parameters:
      - description: Update model
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Update admin user
      tags:
      - user
  /config:
    delete:
      consumes:
      - application/json
      description: Revert to the last saved samba config
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Settings'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Rollback the current samba config
      tags:
      - samba
    patch:
      consumes:
      - application/json
      description: Save dirty changes to the disk
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Settings'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Persiste the current samba config
      tags:
      - samba
    put:
      consumes:
      - application/json
      description: Save dirty changes to the disk
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Settings'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Persiste the current samba config
      tags:
      - samba
  /events:
    get:
      description: Return a list of available WSChannel events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.EventType'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: WSChannelEventsList
      tags:
      - system
  /filesystems:
    get:
      description: Return all supported fs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: GetFSHandler
      tags:
      - system
  /global:
    get:
      consumes:
      - application/json
      description: Get the configuration for the global samba settings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Settings'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Get the configuration for the global samba settings
      tags:
      - samba
    patch:
      consumes:
      - application/json
      description: Update the configuration for the global samba settings
      parameters:
      - description: Update model
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/dto.Settings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Settings'
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Update the configuration for the global samba settings
      tags:
      - samba
    put:
      consumes:
      - application/json
      description: Update the configuration for the global samba settings
      parameters:
      - description: Update model
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/dto.Settings'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Settings'
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Update the configuration for the global samba settings
      tags:
      - samba
  /health:
    get:
      description: HealthCheck
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.HealthPing'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: HealthCheck
      tags:
      - system
  /nics:
    get:
      description: Return all network interfaces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.NetworkInfo'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: GetNICsHandler
      tags:
      - system
  /restart:
    put:
      description: Restart the server ( useful in development )
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: RestartHandler
      tags:
      - system
  /samba:
    get:
      consumes:
      - application/json
      description: Get the generated samba config
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Get the generated samba config
      tags:
      - samba
  /samba/apply:
    put:
      consumes:
      - application/json
      description: Write the samba config and send signal ro restart
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Write the samba config and send signal ro restart
      tags:
      - samba
  /samba/status:
    get:
      consumes:
      - application/json
      description: Get the current samba process status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SambaProcessStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Get the current samba process status
      tags:
      - samba
  /share:
    post:
      consumes:
      - application/json
      description: create e new share
      parameters:
      - description: Create model
        in: body
        name: share
        required: true
        schema:
          $ref: '#/definitions/dto.SharedResource'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SharedResource'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Create a share
      tags:
      - share
  /share/{share_name}:
    delete:
      description: delere a share
      parameters:
      - description: Name
        in: path
        name: share_name
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Delere a share
      tags:
      - share
    get:
      description: get share by Name
      parameters:
      - description: Name
        in: path
        name: share_name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SharedResource'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Get a share
      tags:
      - share
    patch:
      consumes:
      - application/json
      description: update e new share
      parameters:
      - description: Name
        in: path
        name: share_name
        required: true
        type: string
      - description: Update model
        in: body
        name: share
        required: true
        schema:
          $ref: '#/definitions/dto.SharedResource'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SharedResource'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Update a share
      tags:
      - share
    put:
      consumes:
      - application/json
      description: update e new share
      parameters:
      - description: Name
        in: path
        name: share_name
        required: true
        type: string
      - description: Update model
        in: body
        name: share
        required: true
        schema:
          $ref: '#/definitions/dto.SharedResource'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SharedResource'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Update a share
      tags:
      - share
  /shares:
    get:
      description: List all configured shares
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SharedResources'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: List all configured shares
      tags:
      - share
  /update:
    put:
      description: Start the update process
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReleaseAsset'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: UpdateHandler
      tags:
      - system
  /user:
    post:
      consumes:
      - application/json
      description: create e new user
      parameters:
      - description: Create model
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Create a user
      tags:
      - user
  /user/{username}:
    delete:
      description: delete a user
      parameters:
      - description: Name
        in: path
        name: username
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Delete a user
      tags:
      - user
    get:
      description: get user by Name
      parameters:
      - description: Name
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Get a user
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: update e user
      parameters:
      - description: Name
        in: path
        name: username
        required: true
        type: string
      - description: Update model
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Update a user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: update e user
      parameters:
      - description: Name
        in: path
        name: username
        required: true
        type: string
      - description: Update model
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Update a user
      tags:
      - user
  /users:
    get:
      description: List all configured users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.User'
            type: array
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: List all configured users
      tags:
      - user
  /volume/{volume_name}/mount:
    delete:
      description: Umount the selected volume
      parameters:
      - description: Name of the volume to be unmounted
        in: path
        name: volume_name
        required: true
        type: string
      - description: Umount forcefully - forces an unmount regardless of currently
          open or otherwise used files within the file system to be unmounted.
        in: query
        name: force
        required: true
        type: boolean
      - description: Umount lazily - disallows future uses of any files below path
          -- i.e. it hides the file system mounted at path, but the file system itself
          is still active and any currently open files can continue to be used. When
          all references to files from this file system are gone, the file system
          will actually be unmounted.
        in: query
        name: lazy
        required: true
        type: boolean
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: Umount the selected volume
      tags:
      - volume
    post:
      consumes:
      - application/json
      description: mount an existing volume
      parameters:
      - description: Volume Name to Mount
        in: path
        name: volume_name
        required: true
        type: string
      - description: Mount data
        in: body
        name: mount_data
        required: true
        schema:
          $ref: '#/definitions/dto.MountPointData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MountPointData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: mount an existing volume
      tags:
      - volume
  /volumes:
    get:
      description: List all available volumes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BlockInfo'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: List all available volumes
      tags:
      - volume
  /ws:
    get:
      description: Open the WSChannel
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DataDirtyTracker'
        "405":
          description: Method Not Allowed
          schema:
            $ref: '#/definitions/dto.ResponseError'
      summary: WSChannel
      tags:
      - system
securityDefinitions:
  ApiKeyAuth:
    description: HomeAssistant Supervisor Token
    in: header
    name: X-Supervisor-Token
    type: apiKey
swagger: "2.0"
