// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dianlight/srat/service (interfaces: VolumeServiceInterface)
//
// Generated by this command:
//
//	mockgen -write_generate_directive -destination mock_volume_service_test.go -package service_test . VolumeServiceInterface
//

// Package service_test is a generated GoMock package.
package service_test

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -write_generate_directive -destination mock_volume_service_test.go -package service_test . VolumeServiceInterface

// MockVolumeServiceInterface is a mock of VolumeServiceInterface interface.
type MockVolumeServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockVolumeServiceInterfaceMockRecorder is the mock recorder for MockVolumeServiceInterface.
type MockVolumeServiceInterfaceMockRecorder struct {
	mock *MockVolumeServiceInterface
}

// NewMockVolumeServiceInterface creates a new mock instance.
func NewMockVolumeServiceInterface(ctrl *gomock.Controller) *MockVolumeServiceInterface {
	mock := &MockVolumeServiceInterface{ctrl: ctrl}
	mock.recorder = &MockVolumeServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeServiceInterface) EXPECT() *MockVolumeServiceInterfaceMockRecorder {
	return m.recorder
}

// MountVolume mocks base method.
func (m *MockVolumeServiceInterface) MountVolume(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountVolume", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountVolume indicates an expected call of MountVolume.
func (mr *MockVolumeServiceInterfaceMockRecorder) MountVolume(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountVolume", reflect.TypeOf((*MockVolumeServiceInterface)(nil).MountVolume), id)
}

// UnmountVolume mocks base method.
func (m *MockVolumeServiceInterface) UnmountVolume(id uint, force, lazy bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmountVolume", id, force, lazy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmountVolume indicates an expected call of UnmountVolume.
func (mr *MockVolumeServiceInterfaceMockRecorder) UnmountVolume(id, force, lazy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountVolume", reflect.TypeOf((*MockVolumeServiceInterface)(nil).UnmountVolume), id, force, lazy)
}
