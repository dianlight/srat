// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/dianlight/srat/dbom"
)

func newHDIdleDevice(db *gorm.DB, opts ...gen.DOOption) hDIdleDevice {
	_hDIdleDevice := hDIdleDevice{}

	_hDIdleDevice.hDIdleDeviceDo.UseDB(db, opts...)
	_hDIdleDevice.hDIdleDeviceDo.UseModel(&dbom.HDIdleDevice{})

	tableName := _hDIdleDevice.hDIdleDeviceDo.TableName()
	_hDIdleDevice.ALL = field.NewAsterisk(tableName)
	_hDIdleDevice.DevicePath = field.NewString(tableName, "device_path")
	_hDIdleDevice.IdleTime = field.NewInt(tableName, "idle_time")
	_hDIdleDevice.CommandType = field.NewField(tableName, "command_type")
	_hDIdleDevice.PowerCondition = field.NewUint8(tableName, "power_condition")
	_hDIdleDevice.CreatedAt = field.NewTime(tableName, "created_at")
	_hDIdleDevice.UpdatedAt = field.NewTime(tableName, "updated_at")
	_hDIdleDevice.DeletedAt = field.NewField(tableName, "deleted_at")

	_hDIdleDevice.fillFieldMap()

	return _hDIdleDevice
}

type hDIdleDevice struct {
	hDIdleDeviceDo

	ALL            field.Asterisk
	DevicePath     field.String
	IdleTime       field.Int
	CommandType    field.Field
	PowerCondition field.Uint8
	CreatedAt      field.Time
	UpdatedAt      field.Time
	DeletedAt      field.Field

	fieldMap map[string]field.Expr
}

func (h hDIdleDevice) Table(newTableName string) *hDIdleDevice {
	h.hDIdleDeviceDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h hDIdleDevice) As(alias string) *hDIdleDevice {
	h.hDIdleDeviceDo.DO = *(h.hDIdleDeviceDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *hDIdleDevice) updateTableName(table string) *hDIdleDevice {
	h.ALL = field.NewAsterisk(table)
	h.DevicePath = field.NewString(table, "device_path")
	h.IdleTime = field.NewInt(table, "idle_time")
	h.CommandType = field.NewField(table, "command_type")
	h.PowerCondition = field.NewUint8(table, "power_condition")
	h.CreatedAt = field.NewTime(table, "created_at")
	h.UpdatedAt = field.NewTime(table, "updated_at")
	h.DeletedAt = field.NewField(table, "deleted_at")

	h.fillFieldMap()

	return h
}

func (h *hDIdleDevice) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *hDIdleDevice) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 7)
	h.fieldMap["device_path"] = h.DevicePath
	h.fieldMap["idle_time"] = h.IdleTime
	h.fieldMap["command_type"] = h.CommandType
	h.fieldMap["power_condition"] = h.PowerCondition
	h.fieldMap["created_at"] = h.CreatedAt
	h.fieldMap["updated_at"] = h.UpdatedAt
	h.fieldMap["deleted_at"] = h.DeletedAt
}

func (h hDIdleDevice) clone(db *gorm.DB) hDIdleDevice {
	h.hDIdleDeviceDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h hDIdleDevice) replaceDB(db *gorm.DB) hDIdleDevice {
	h.hDIdleDeviceDo.ReplaceDB(db)
	return h
}

type hDIdleDeviceDo struct{ gen.DO }

type IHDIdleDeviceDo interface {
	gen.SubQuery
	Debug() IHDIdleDeviceDo
	WithContext(ctx context.Context) IHDIdleDeviceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IHDIdleDeviceDo
	WriteDB() IHDIdleDeviceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IHDIdleDeviceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IHDIdleDeviceDo
	Not(conds ...gen.Condition) IHDIdleDeviceDo
	Or(conds ...gen.Condition) IHDIdleDeviceDo
	Select(conds ...field.Expr) IHDIdleDeviceDo
	Where(conds ...gen.Condition) IHDIdleDeviceDo
	Order(conds ...field.Expr) IHDIdleDeviceDo
	Distinct(cols ...field.Expr) IHDIdleDeviceDo
	Omit(cols ...field.Expr) IHDIdleDeviceDo
	Join(table schema.Tabler, on ...field.Expr) IHDIdleDeviceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IHDIdleDeviceDo
	RightJoin(table schema.Tabler, on ...field.Expr) IHDIdleDeviceDo
	Group(cols ...field.Expr) IHDIdleDeviceDo
	Having(conds ...gen.Condition) IHDIdleDeviceDo
	Limit(limit int) IHDIdleDeviceDo
	Offset(offset int) IHDIdleDeviceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IHDIdleDeviceDo
	Unscoped() IHDIdleDeviceDo
	Create(values ...*dbom.HDIdleDevice) error
	CreateInBatches(values []*dbom.HDIdleDevice, batchSize int) error
	Save(values ...*dbom.HDIdleDevice) error
	First() (*dbom.HDIdleDevice, error)
	Take() (*dbom.HDIdleDevice, error)
	Last() (*dbom.HDIdleDevice, error)
	Find() ([]*dbom.HDIdleDevice, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbom.HDIdleDevice, err error)
	FindInBatches(result *[]*dbom.HDIdleDevice, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*dbom.HDIdleDevice) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IHDIdleDeviceDo
	Assign(attrs ...field.AssignExpr) IHDIdleDeviceDo
	Joins(fields ...field.RelationField) IHDIdleDeviceDo
	Preload(fields ...field.RelationField) IHDIdleDeviceDo
	FirstOrInit() (*dbom.HDIdleDevice, error)
	FirstOrCreate() (*dbom.HDIdleDevice, error)
	FindByPage(offset int, limit int) (result []*dbom.HDIdleDevice, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IHDIdleDeviceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (h hDIdleDeviceDo) Debug() IHDIdleDeviceDo {
	return h.withDO(h.DO.Debug())
}

func (h hDIdleDeviceDo) WithContext(ctx context.Context) IHDIdleDeviceDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h hDIdleDeviceDo) ReadDB() IHDIdleDeviceDo {
	return h.Clauses(dbresolver.Read)
}

func (h hDIdleDeviceDo) WriteDB() IHDIdleDeviceDo {
	return h.Clauses(dbresolver.Write)
}

func (h hDIdleDeviceDo) Session(config *gorm.Session) IHDIdleDeviceDo {
	return h.withDO(h.DO.Session(config))
}

func (h hDIdleDeviceDo) Clauses(conds ...clause.Expression) IHDIdleDeviceDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h hDIdleDeviceDo) Returning(value interface{}, columns ...string) IHDIdleDeviceDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h hDIdleDeviceDo) Not(conds ...gen.Condition) IHDIdleDeviceDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h hDIdleDeviceDo) Or(conds ...gen.Condition) IHDIdleDeviceDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h hDIdleDeviceDo) Select(conds ...field.Expr) IHDIdleDeviceDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h hDIdleDeviceDo) Where(conds ...gen.Condition) IHDIdleDeviceDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h hDIdleDeviceDo) Order(conds ...field.Expr) IHDIdleDeviceDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h hDIdleDeviceDo) Distinct(cols ...field.Expr) IHDIdleDeviceDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h hDIdleDeviceDo) Omit(cols ...field.Expr) IHDIdleDeviceDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h hDIdleDeviceDo) Join(table schema.Tabler, on ...field.Expr) IHDIdleDeviceDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h hDIdleDeviceDo) LeftJoin(table schema.Tabler, on ...field.Expr) IHDIdleDeviceDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h hDIdleDeviceDo) RightJoin(table schema.Tabler, on ...field.Expr) IHDIdleDeviceDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h hDIdleDeviceDo) Group(cols ...field.Expr) IHDIdleDeviceDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h hDIdleDeviceDo) Having(conds ...gen.Condition) IHDIdleDeviceDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h hDIdleDeviceDo) Limit(limit int) IHDIdleDeviceDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h hDIdleDeviceDo) Offset(offset int) IHDIdleDeviceDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h hDIdleDeviceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IHDIdleDeviceDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h hDIdleDeviceDo) Unscoped() IHDIdleDeviceDo {
	return h.withDO(h.DO.Unscoped())
}

func (h hDIdleDeviceDo) Create(values ...*dbom.HDIdleDevice) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h hDIdleDeviceDo) CreateInBatches(values []*dbom.HDIdleDevice, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h hDIdleDeviceDo) Save(values ...*dbom.HDIdleDevice) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h hDIdleDeviceDo) First() (*dbom.HDIdleDevice, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*dbom.HDIdleDevice), nil
	}
}

func (h hDIdleDeviceDo) Take() (*dbom.HDIdleDevice, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*dbom.HDIdleDevice), nil
	}
}

func (h hDIdleDeviceDo) Last() (*dbom.HDIdleDevice, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*dbom.HDIdleDevice), nil
	}
}

func (h hDIdleDeviceDo) Find() ([]*dbom.HDIdleDevice, error) {
	result, err := h.DO.Find()
	return result.([]*dbom.HDIdleDevice), err
}

func (h hDIdleDeviceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*dbom.HDIdleDevice, err error) {
	buf := make([]*dbom.HDIdleDevice, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h hDIdleDeviceDo) FindInBatches(result *[]*dbom.HDIdleDevice, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h hDIdleDeviceDo) Attrs(attrs ...field.AssignExpr) IHDIdleDeviceDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h hDIdleDeviceDo) Assign(attrs ...field.AssignExpr) IHDIdleDeviceDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h hDIdleDeviceDo) Joins(fields ...field.RelationField) IHDIdleDeviceDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h hDIdleDeviceDo) Preload(fields ...field.RelationField) IHDIdleDeviceDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h hDIdleDeviceDo) FirstOrInit() (*dbom.HDIdleDevice, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*dbom.HDIdleDevice), nil
	}
}

func (h hDIdleDeviceDo) FirstOrCreate() (*dbom.HDIdleDevice, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*dbom.HDIdleDevice), nil
	}
}

func (h hDIdleDeviceDo) FindByPage(offset int, limit int) (result []*dbom.HDIdleDevice, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h hDIdleDeviceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h hDIdleDeviceDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h hDIdleDeviceDo) Delete(models ...*dbom.HDIdleDevice) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *hDIdleDeviceDo) withDO(do gen.Dao) *hDIdleDeviceDo {
	h.DO = *do.(*gen.DO)
	return h
}
