// Code generated by MockGen. DO NOT EDIT.
// Source: ../service (interfaces: SambaServiceInterface)
//
// Generated by this command:
//
//	mockgen -write_generate_directive -destination mock_samba_service_test.go -package api_test ../service SambaServiceInterface
//

// Package api_test is a generated GoMock package.
package api_test

import (
	reflect "reflect"

	process "github.com/shirou/gopsutil/v4/process"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -write_generate_directive -destination mock_samba_service_test.go -package api_test ../service SambaServiceInterface

// MockSambaServiceInterface is a mock of SambaServiceInterface interface.
type MockSambaServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSambaServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockSambaServiceInterfaceMockRecorder is the mock recorder for MockSambaServiceInterface.
type MockSambaServiceInterfaceMockRecorder struct {
	mock *MockSambaServiceInterface
}

// NewMockSambaServiceInterface creates a new mock instance.
func NewMockSambaServiceInterface(ctrl *gomock.Controller) *MockSambaServiceInterface {
	mock := &MockSambaServiceInterface{ctrl: ctrl}
	mock.recorder = &MockSambaServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSambaServiceInterface) EXPECT() *MockSambaServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateConfigStream mocks base method.
func (m *MockSambaServiceInterface) CreateConfigStream(dockerInterface, dockerNet string, templateData []byte) (*[]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConfigStream", dockerInterface, dockerNet, templateData)
	ret0, _ := ret[0].(*[]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigStream indicates an expected call of CreateConfigStream.
func (mr *MockSambaServiceInterfaceMockRecorder) CreateConfigStream(dockerInterface, dockerNet, templateData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigStream", reflect.TypeOf((*MockSambaServiceInterface)(nil).CreateConfigStream), dockerInterface, dockerNet, templateData)
}

// GetSambaProcess mocks base method.
func (m *MockSambaServiceInterface) GetSambaProcess() (*process.Process, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSambaProcess")
	ret0, _ := ret[0].(*process.Process)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSambaProcess indicates an expected call of GetSambaProcess.
func (mr *MockSambaServiceInterfaceMockRecorder) GetSambaProcess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSambaProcess", reflect.TypeOf((*MockSambaServiceInterface)(nil).GetSambaProcess))
}

// RestartSambaService mocks base method.
func (m *MockSambaServiceInterface) RestartSambaService() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartSambaService")
	ret0, _ := ret[0].(error)
	return ret0
}

// RestartSambaService indicates an expected call of RestartSambaService.
func (mr *MockSambaServiceInterfaceMockRecorder) RestartSambaService() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartSambaService", reflect.TypeOf((*MockSambaServiceInterface)(nil).RestartSambaService))
}

// StreamToFile mocks base method.
func (m *MockSambaServiceInterface) StreamToFile(stream *[]byte, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamToFile", stream, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamToFile indicates an expected call of StreamToFile.
func (mr *MockSambaServiceInterfaceMockRecorder) StreamToFile(stream, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamToFile", reflect.TypeOf((*MockSambaServiceInterface)(nil).StreamToFile), stream, path)
}

// TestSambaConfig mocks base method.
func (m *MockSambaServiceInterface) TestSambaConfig(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestSambaConfig", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// TestSambaConfig indicates an expected call of TestSambaConfig.
func (mr *MockSambaServiceInterfaceMockRecorder) TestSambaConfig(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestSambaConfig", reflect.TypeOf((*MockSambaServiceInterface)(nil).TestSambaConfig), path)
}
