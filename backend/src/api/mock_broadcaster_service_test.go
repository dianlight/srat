// Code generated by MockGen. DO NOT EDIT.
// Source: ../service (interfaces: BroadcasterServiceInterface)
//
// Generated by this command:
//
//	mockgen -write_generate_directive -destination mock_broadcaster_service_test.go -package api_test ../service BroadcasterServiceInterface
//

// Package api_test is a generated GoMock package.
package api_test

import (
	http "net/http"
	reflect "reflect"

	dto "github.com/dianlight/srat/dto"
	service "github.com/dianlight/srat/service"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -write_generate_directive -destination mock_broadcaster_service_test.go -package api_test ../service BroadcasterServiceInterface

// MockBroadcasterServiceInterface is a mock of BroadcasterServiceInterface interface.
type MockBroadcasterServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBroadcasterServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockBroadcasterServiceInterfaceMockRecorder is the mock recorder for MockBroadcasterServiceInterface.
type MockBroadcasterServiceInterfaceMockRecorder struct {
	mock *MockBroadcasterServiceInterface
}

// NewMockBroadcasterServiceInterface creates a new mock instance.
func NewMockBroadcasterServiceInterface(ctrl *gomock.Controller) *MockBroadcasterServiceInterface {
	mock := &MockBroadcasterServiceInterface{ctrl: ctrl}
	mock.recorder = &MockBroadcasterServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroadcasterServiceInterface) EXPECT() *MockBroadcasterServiceInterfaceMockRecorder {
	return m.recorder
}

// AddCloseConnectionListener mocks base method.
func (m *MockBroadcasterServiceInterface) AddCloseConnectionListener(ws func(service.BroadcasterServiceInterface) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCloseConnectionListener", ws)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCloseConnectionListener indicates an expected call of AddCloseConnectionListener.
func (mr *MockBroadcasterServiceInterfaceMockRecorder) AddCloseConnectionListener(ws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCloseConnectionListener", reflect.TypeOf((*MockBroadcasterServiceInterface)(nil).AddCloseConnectionListener), ws)
}

// AddOpenConnectionListener mocks base method.
func (m *MockBroadcasterServiceInterface) AddOpenConnectionListener(ws func(service.BroadcasterServiceInterface) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOpenConnectionListener", ws)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOpenConnectionListener indicates an expected call of AddOpenConnectionListener.
func (mr *MockBroadcasterServiceInterfaceMockRecorder) AddOpenConnectionListener(ws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOpenConnectionListener", reflect.TypeOf((*MockBroadcasterServiceInterface)(nil).AddOpenConnectionListener), ws)
}

// BroadcastMessage mocks base method.
func (m *MockBroadcasterServiceInterface) BroadcastMessage(msg *dto.EventMessageEnvelope) (*dto.EventMessageEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastMessage", msg)
	ret0, _ := ret[0].(*dto.EventMessageEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastMessage indicates an expected call of BroadcastMessage.
func (mr *MockBroadcasterServiceInterfaceMockRecorder) BroadcastMessage(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMessage", reflect.TypeOf((*MockBroadcasterServiceInterface)(nil).BroadcastMessage), msg)
}

// ProcessHttpChannel mocks base method.
func (m *MockBroadcasterServiceInterface) ProcessHttpChannel(w http.ResponseWriter, r *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessHttpChannel", w, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessHttpChannel indicates an expected call of ProcessHttpChannel.
func (mr *MockBroadcasterServiceInterfaceMockRecorder) ProcessHttpChannel(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessHttpChannel", reflect.TypeOf((*MockBroadcasterServiceInterface)(nil).ProcessHttpChannel), w, r)
}

// listen mocks base method.
func (m *MockBroadcasterServiceInterface) listen() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "listen")
}

// listen indicates an expected call of listen.
func (mr *MockBroadcasterServiceInterfaceMockRecorder) listen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listen", reflect.TypeOf((*MockBroadcasterServiceInterface)(nil).listen))
}
