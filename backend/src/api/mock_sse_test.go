// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dianlight/srat/api (interfaces: BrokerInterface)
//
// Generated by this command:
//
//	mockgen -write_generate_directive -destination mock_sse_test.go -package api_test . BrokerInterface
//

// Package api_test is a generated GoMock package.
package api_test

import (
	http "net/http"
	reflect "reflect"

	api "github.com/dianlight/srat/api"
	dto "github.com/dianlight/srat/dto"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -write_generate_directive -destination mock_sse_test.go -package api_test . BrokerInterface

// MockBrokerInterface is a mock of BrokerInterface interface.
type MockBrokerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerInterfaceMockRecorder
	isgomock struct{}
}

// MockBrokerInterfaceMockRecorder is the mock recorder for MockBrokerInterface.
type MockBrokerInterfaceMockRecorder struct {
	mock *MockBrokerInterface
}

// NewMockBrokerInterface creates a new mock instance.
func NewMockBrokerInterface(ctrl *gomock.Controller) *MockBrokerInterface {
	mock := &MockBrokerInterface{ctrl: ctrl}
	mock.recorder = &MockBrokerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrokerInterface) EXPECT() *MockBrokerInterfaceMockRecorder {
	return m.recorder
}

// AddCloseConnectionListener mocks base method.
func (m *MockBrokerInterface) AddCloseConnectionListener(ws func(api.BrokerInterface) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCloseConnectionListener", ws)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCloseConnectionListener indicates an expected call of AddCloseConnectionListener.
func (mr *MockBrokerInterfaceMockRecorder) AddCloseConnectionListener(ws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCloseConnectionListener", reflect.TypeOf((*MockBrokerInterface)(nil).AddCloseConnectionListener), ws)
}

// AddOpenConnectionListener mocks base method.
func (m *MockBrokerInterface) AddOpenConnectionListener(ws func(api.BrokerInterface) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOpenConnectionListener", ws)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOpenConnectionListener indicates an expected call of AddOpenConnectionListener.
func (mr *MockBrokerInterfaceMockRecorder) AddOpenConnectionListener(ws any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOpenConnectionListener", reflect.TypeOf((*MockBrokerInterface)(nil).AddOpenConnectionListener), ws)
}

// BroadcastMessage mocks base method.
func (m *MockBrokerInterface) BroadcastMessage(msg *dto.EventMessageEnvelope) (*dto.EventMessageEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastMessage", msg)
	ret0, _ := ret[0].(*dto.EventMessageEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastMessage indicates an expected call of BroadcastMessage.
func (mr *MockBrokerInterfaceMockRecorder) BroadcastMessage(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMessage", reflect.TypeOf((*MockBrokerInterface)(nil).BroadcastMessage), msg)
}

// Stream mocks base method.
func (m *MockBrokerInterface) Stream(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stream", w, r)
}

// Stream indicates an expected call of Stream.
func (mr *MockBrokerInterfaceMockRecorder) Stream(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stream", reflect.TypeOf((*MockBrokerInterface)(nil).Stream), w, r)
}
