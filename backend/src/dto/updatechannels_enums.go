// code generated by goenums v0.4.0 at Jun 26 22:00:05. DO NOT EDIT.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums goenums -l -i update_channel.goupdate_channel.go

package dto

import (
	"bytes"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"golang.org/x/exp/constraints"
)

// UpdateChannel is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type UpdateChannel struct {
	updateChannel
}

// updateChannelsContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the UpdateChannel type.
type updateChannelsContainer struct {
	NONE       UpdateChannel
	DEVELOP    UpdateChannel
	RELEASE    UpdateChannel
	PRERELEASE UpdateChannel
}

// UpdateChannels is a main entry point using the UpdateChannel type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var UpdateChannels = updateChannelsContainer{
	NONE: UpdateChannel{
		updateChannel: None,
	},
	DEVELOP: UpdateChannel{
		updateChannel: Develop,
	},
	RELEASE: UpdateChannel{
		updateChannel: Release,
	},
	PRERELEASE: UpdateChannel{
		updateChannel: Prerelease,
	},
}

// invalidUpdateChannel is an invalid sentinel value for UpdateChannel
var invalidUpdateChannel = UpdateChannel{}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (u updateChannelsContainer) allSlice() []UpdateChannel {
	return []UpdateChannel{
		UpdateChannels.NONE,
		UpdateChannels.DEVELOP,
		UpdateChannels.RELEASE,
		UpdateChannels.PRERELEASE,
	}
}

// All returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (u updateChannelsContainer) All() []UpdateChannel {
	return u.allSlice()
}

// ParseUpdateChannel parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParseUpdateChannel(input any) (UpdateChannel, error) {
	var res = invalidUpdateChannel
	switch v := input.(type) {
	case UpdateChannel:
		return v, nil
	case string:
		res = stringToUpdateChannel(v)
	case fmt.Stringer:
		res = stringToUpdateChannel(v.String())
	case []byte:
		res = stringToUpdateChannel(string(v))
	case int:
		res = numberToUpdateChannel(v)
	case int8:
		res = numberToUpdateChannel(v)
	case int16:
		res = numberToUpdateChannel(v)
	case int32:
		res = numberToUpdateChannel(v)
	case int64:
		res = numberToUpdateChannel(v)
	case uint:
		res = numberToUpdateChannel(v)
	case uint8:
		res = numberToUpdateChannel(v)
	case uint16:
		res = numberToUpdateChannel(v)
	case uint32:
		res = numberToUpdateChannel(v)
	case uint64:
		res = numberToUpdateChannel(v)
	case float32:
		res = numberToUpdateChannel(v)
	case float64:
		res = numberToUpdateChannel(v)
	default:
		return res, fmt.Errorf("invalid type %T", input)
	}
	return res, nil
}

// updateChannelsNameMap is a map of enum values to their UpdateChannel representation
// It is used to convert string representations of enum values into their UpdateChannel representation.
var updateChannelsNameMap = map[string]UpdateChannel{
	"Release":    UpdateChannels.NONE,
	"release":    UpdateChannels.NONE,
	"Develop":    UpdateChannels.DEVELOP,
	"develop":    UpdateChannels.DEVELOP,
	"None":       UpdateChannels.RELEASE,
	"none":       UpdateChannels.RELEASE,
	"Prerelease": UpdateChannels.PRERELEASE,
	"prerelease": UpdateChannels.PRERELEASE,
}

// stringToUpdateChannel converts a string representation of an enum value into its UpdateChannel representation
// It returns the UpdateChannel representation of the enum value if the string is valid
// Otherwise, it returns invalidUpdateChannel
func stringToUpdateChannel(s string) UpdateChannel {
	if t, ok := updateChannelsNameMap[s]; ok {
		return t
	}
	return invalidUpdateChannel
}

// numberToUpdateChannel converts a numeric value to a UpdateChannel
// It returns the UpdateChannel representation of the enum value if the numeric value is valid
// Otherwise, it returns invalidUpdateChannel
func numberToUpdateChannel[T constraints.Integer | constraints.Float](num T) UpdateChannel {
	f := float64(num)
	if math.Floor(f) != f {
		return invalidUpdateChannel
	}
	i := int(f)
	if i <= 0 || i > len(UpdateChannels.allSlice()) {
		return invalidUpdateChannel
	}
	return UpdateChannels.allSlice()[i]
}

// ExhaustiveUpdateChannels iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveUpdateChannels(f func(UpdateChannel)) {
	for _, p := range UpdateChannels.allSlice() {
		f(p)
	}
}

// validUpdateChannels is a map of enum values to their validity
var validUpdateChannels = map[UpdateChannel]bool{
	UpdateChannels.NONE:       true,
	UpdateChannels.DEVELOP:    true,
	UpdateChannels.RELEASE:    true,
	UpdateChannels.PRERELEASE: true,
}

// IsValid checks whether the UpdateChannels value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (u UpdateChannel) IsValid() bool {
	return validUpdateChannels[u]
}

// MarshalJSON implements the json.Marshaler interface for UpdateChannel.
// It returns the JSON representation of the enum value as a byte slice.
func (u UpdateChannel) MarshalJSON() ([]byte, error) {
	return []byte("\"" + u.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for UpdateChannel.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (u *UpdateChannel) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, "\""), "\"")
	newu, err := ParseUpdateChannel(b)
	if err != nil {
		return err
	}
	*u = newu
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for UpdateChannel.
// It returns the string representation of the enum value as a byte slice
func (u UpdateChannel) MarshalText() ([]byte, error) {
	return []byte("\"" + u.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for UpdateChannel.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (u *UpdateChannel) UnmarshalText(b []byte) error {
	newu, err := ParseUpdateChannel(b)
	if err != nil {
		return err
	}
	*u = newu
	return nil
}

// Scan implements the database/sql.Scanner interface for UpdateChannel.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (u *UpdateChannel) Scan(value any) error {
	newu, err := ParseUpdateChannel(value)
	if err != nil {
		return err
	}
	*u = newu
	return nil
}

// Value implements the database/sql/driver.Valuer interface for UpdateChannel.
// It returns the string representation of the enum value.
func (u UpdateChannel) Value() (driver.Value, error) {
	return u.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for UpdateChannel.
// It returns the binary representation of the enum value as a byte slice.
func (u UpdateChannel) MarshalBinary() ([]byte, error) {
	return []byte("\"" + u.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for UpdateChannel.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (u *UpdateChannel) UnmarshalBinary(b []byte) error {
	newu, err := ParseUpdateChannel(b)
	if err != nil {
		return err
	}
	*u = newu
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for UpdateChannel.
// It returns the string representation of the enum value.
// It returns an error if the enum value is invalid.
func (u UpdateChannel) MarshalYAML() (any, error) {
	return u.String(), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for UpdateChannel.
// It parses the string representation of the enum value from the YAML node.
// It returns an error if the YAML node does not contain a valid enum value.
func (u *UpdateChannel) UnmarshalYAML(ctx context.Context, f func(any) error) error {
	select {
	case <-ctx.Done():
		return ctx.Err()
	default:
	}
	return f(u.String())
}

// updatechannelNames is a constant string slice containing all enum values cononical absolute names
const updatechannelNames = "ReleaseDevelopNonePrerelease"

// updatechannelNamesMap is a map of enum values to their canonical absolute
// name positions within the updatechannelNames string slice
var updatechannelNamesMap = map[UpdateChannel]string{
	UpdateChannels.NONE:       updatechannelNames[0:7],
	UpdateChannels.DEVELOP:    updatechannelNames[7:14],
	UpdateChannels.RELEASE:    updatechannelNames[14:18],
	UpdateChannels.PRERELEASE: updatechannelNames[18:28],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (u UpdateChannel) String() string {
	if str, ok := updatechannelNamesMap[u]; ok {
		return str
	}
	return fmt.Sprintf("updatechannel(%d)", u.updateChannel)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [4]struct{}
	_ = x[None-0]
	_ = x[Develop-1]
	_ = x[Release-2]
	_ = x[Prerelease-3]
}
