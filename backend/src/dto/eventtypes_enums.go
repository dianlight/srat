// code generated by goenums v0.4.0 at Jun 26 22:00:05. DO NOT EDIT.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums goenums event_type.goevent_type.go

package dto

import (
	"bytes"
	"context"
	"database/sql/driver"
	"fmt"
	"iter"
	"math"

	"golang.org/x/exp/constraints"
)

// EventType is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type EventType struct {
	eventType
}

// eventTypesContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the EventType type.
type eventTypesContainer struct {
	EVENTHELLO     EventType
	EVENTUPDATING  EventType
	EVENTVOLUMES   EventType
	EVENTHEARTBEAT EventType
	EVENTSHARE     EventType
	EVENTDIRTY     EventType
}

// EventTypes is a main entry point using the EventType type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var EventTypes = eventTypesContainer{
	EVENTHELLO: EventType{
		eventType: eventHello,
	},
	EVENTUPDATING: EventType{
		eventType: eventUpdating,
	},
	EVENTVOLUMES: EventType{
		eventType: eventVolumes,
	},
	EVENTHEARTBEAT: EventType{
		eventType: eventHeartbeat,
	},
	EVENTSHARE: EventType{
		eventType: eventShare,
	},
	EVENTDIRTY: EventType{
		eventType: eventDirty,
	},
}

// invalidEventType is an invalid sentinel value for EventType
var invalidEventType = EventType{}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (e eventTypesContainer) allSlice() []EventType {
	return []EventType{
		EventTypes.EVENTHELLO,
		EventTypes.EVENTUPDATING,
		EventTypes.EVENTVOLUMES,
		EventTypes.EVENTHEARTBEAT,
		EventTypes.EVENTSHARE,
		EventTypes.EVENTDIRTY,
	}
}

// All returns an iterator over all enum values.
// This method is useful for iterating over all enum values in a loop.
func (e eventTypesContainer) All() iter.Seq[EventType] {
	return func(yield func(EventType) bool) {
		for _, v := range e.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseEventType parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParseEventType(input any) (EventType, error) {
	var res = invalidEventType
	switch v := input.(type) {
	case EventType:
		return v, nil
	case string:
		res = stringToEventType(v)
	case fmt.Stringer:
		res = stringToEventType(v.String())
	case []byte:
		res = stringToEventType(string(v))
	case int:
		res = numberToEventType(v)
	case int8:
		res = numberToEventType(v)
	case int16:
		res = numberToEventType(v)
	case int32:
		res = numberToEventType(v)
	case int64:
		res = numberToEventType(v)
	case uint:
		res = numberToEventType(v)
	case uint8:
		res = numberToEventType(v)
	case uint16:
		res = numberToEventType(v)
	case uint32:
		res = numberToEventType(v)
	case uint64:
		res = numberToEventType(v)
	case float32:
		res = numberToEventType(v)
	case float64:
		res = numberToEventType(v)
	default:
		return res, fmt.Errorf("invalid type %T", input)
	}
	return res, nil
}

// eventTypesNameMap is a map of enum values to their EventType representation
// It is used to convert string representations of enum values into their EventType representation.
var eventTypesNameMap = map[string]EventType{
	"hello":     EventTypes.EVENTHELLO,
	"updating":  EventTypes.EVENTUPDATING,
	"volumes":   EventTypes.EVENTVOLUMES,
	"heartbeat": EventTypes.EVENTHEARTBEAT,
	"share":     EventTypes.EVENTSHARE,
	"dirty":     EventTypes.EVENTDIRTY,
}

// stringToEventType converts a string representation of an enum value into its EventType representation
// It returns the EventType representation of the enum value if the string is valid
// Otherwise, it returns invalidEventType
func stringToEventType(s string) EventType {
	if t, ok := eventTypesNameMap[s]; ok {
		return t
	}
	return invalidEventType
}

// numberToEventType converts a numeric value to a EventType
// It returns the EventType representation of the enum value if the numeric value is valid
// Otherwise, it returns invalidEventType
func numberToEventType[T constraints.Integer | constraints.Float](num T) EventType {
	f := float64(num)
	if math.Floor(f) != f {
		return invalidEventType
	}
	i := int(f)
	if i <= 0 || i > len(EventTypes.allSlice()) {
		return invalidEventType
	}
	return EventTypes.allSlice()[i]
}

// ExhaustiveEventTypes iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveEventTypes(f func(EventType)) {
	for _, p := range EventTypes.allSlice() {
		f(p)
	}
}

// validEventTypes is a map of enum values to their validity
var validEventTypes = map[EventType]bool{
	EventTypes.EVENTHELLO:     true,
	EventTypes.EVENTUPDATING:  true,
	EventTypes.EVENTVOLUMES:   true,
	EventTypes.EVENTHEARTBEAT: true,
	EventTypes.EVENTSHARE:     true,
	EventTypes.EVENTDIRTY:     true,
}

// IsValid checks whether the EventTypes value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (e EventType) IsValid() bool {
	return validEventTypes[e]
}

// MarshalJSON implements the json.Marshaler interface for EventType.
// It returns the JSON representation of the enum value as a byte slice.
func (e EventType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + e.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for EventType.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (e *EventType) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, "\""), "\"")
	newe, err := ParseEventType(b)
	if err != nil {
		return err
	}
	*e = newe
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for EventType.
// It returns the string representation of the enum value as a byte slice
func (e EventType) MarshalText() ([]byte, error) {
	return []byte("\"" + e.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for EventType.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (e *EventType) UnmarshalText(b []byte) error {
	newe, err := ParseEventType(b)
	if err != nil {
		return err
	}
	*e = newe
	return nil
}

// Scan implements the database/sql.Scanner interface for EventType.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (e *EventType) Scan(value any) error {
	newe, err := ParseEventType(value)
	if err != nil {
		return err
	}
	*e = newe
	return nil
}

// Value implements the database/sql/driver.Valuer interface for EventType.
// It returns the string representation of the enum value.
func (e EventType) Value() (driver.Value, error) {
	return e.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for EventType.
// It returns the binary representation of the enum value as a byte slice.
func (e EventType) MarshalBinary() ([]byte, error) {
	return []byte("\"" + e.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for EventType.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (e *EventType) UnmarshalBinary(b []byte) error {
	newe, err := ParseEventType(b)
	if err != nil {
		return err
	}
	*e = newe
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for EventType.
// It returns the string representation of the enum value.
// It returns an error if the enum value is invalid.
func (e EventType) MarshalYAML() (any, error) {
	return e.String(), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for EventType.
// It parses the string representation of the enum value from the YAML node.
// It returns an error if the YAML node does not contain a valid enum value.
func (e *EventType) UnmarshalYAML(ctx context.Context, f func(any) error) error {
	select {
	case <-ctx.Done():
		return ctx.Err()
	default:
	}
	return f(e.String())
}

// eventtypeNames is a constant string slice containing all enum values cononical absolute names
const eventtypeNames = "helloupdatingvolumesheartbeatsharedirty"

// eventtypeNamesMap is a map of enum values to their canonical absolute
// name positions within the eventtypeNames string slice
var eventtypeNamesMap = map[EventType]string{
	EventTypes.EVENTHELLO:     eventtypeNames[0:5],
	EventTypes.EVENTUPDATING:  eventtypeNames[5:13],
	EventTypes.EVENTVOLUMES:   eventtypeNames[13:20],
	EventTypes.EVENTHEARTBEAT: eventtypeNames[20:29],
	EventTypes.EVENTSHARE:     eventtypeNames[29:34],
	EventTypes.EVENTDIRTY:     eventtypeNames[34:39],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (e EventType) String() string {
	if str, ok := eventtypeNamesMap[e]; ok {
		return str
	}
	return fmt.Sprintf("eventtype(%d)", e.eventType)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [6]struct{}
	_ = x[eventHello-0]
	_ = x[eventUpdating-1]
	_ = x[eventVolumes-2]
	_ = x[eventHeartbeat-3]
	_ = x[eventShare-4]
	_ = x[eventDirty-5]
}
