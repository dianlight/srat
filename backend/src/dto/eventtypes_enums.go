// DO NOT EDIT.
// code generated by goenums v0.4.4 at Oct  4 12:31:37.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums -l event_type.go

package dto

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"math"

	"golang.org/x/exp/constraints"
)

// EventType is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type EventType struct {
	eventType
}

// eventTypesContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the EventType type.
type eventTypesContainer struct {
	EVENTHELLO     EventType
	EVENTUPDATING  EventType
	EVENTVOLUMES   EventType
	EVENTHEARTBEAT EventType
	EVENTSHARE     EventType
}

// EventTypes is a main entry point using the EventType type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var EventTypes = eventTypesContainer{
	EVENTHELLO: EventType{
		eventType: eventHello,
	},
	EVENTUPDATING: EventType{
		eventType: eventUpdating,
	},
	EVENTVOLUMES: EventType{
		eventType: eventVolumes,
	},
	EVENTHEARTBEAT: EventType{
		eventType: eventHeartbeat,
	},
	EVENTSHARE: EventType{
		eventType: eventShare,
	},
}

// invalidEventType is an invalid sentinel value for EventType
var invalidEventType = EventType{
	eventType: -1,
}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (e eventTypesContainer) allSlice() []EventType {
	return []EventType{
		EventTypes.EVENTHELLO,
		EventTypes.EVENTUPDATING,
		EventTypes.EVENTVOLUMES,
		EventTypes.EVENTHEARTBEAT,
		EventTypes.EVENTSHARE,
	}
}

// All returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (e eventTypesContainer) All() []EventType {
	return e.allSlice()
}

// ParseEventType parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParseEventType(input any) (EventType, error) {
	switch v := input.(type) {
	case EventType:
		return v, nil
	case string:
		if result := stringToEventType(v); result != nil {
			return *result, nil
		}
	case fmt.Stringer:
		if result := stringToEventType(v.String()); result != nil {
			return *result, nil
		}
	case []byte:
		if result := stringToEventType(string(v)); result != nil {
			return *result, nil
		}
	case int:
		if result := numberToEventType(v); result != nil {
			return *result, nil
		}
	case int8:
		if result := numberToEventType(v); result != nil {
			return *result, nil
		}
	case int16:
		if result := numberToEventType(v); result != nil {
			return *result, nil
		}
	case int32:
		if result := numberToEventType(v); result != nil {
			return *result, nil
		}
	case int64:
		if result := numberToEventType(v); result != nil {
			return *result, nil
		}
	case uint:
		if result := numberToEventType(v); result != nil {
			return *result, nil
		}
	case uint8:
		if result := numberToEventType(v); result != nil {
			return *result, nil
		}
	case uint16:
		if result := numberToEventType(v); result != nil {
			return *result, nil
		}
	case uint32:
		if result := numberToEventType(v); result != nil {
			return *result, nil
		}
	case uint64:
		if result := numberToEventType(v); result != nil {
			return *result, nil
		}
	case float32:
		if result := numberToEventType(v); result != nil {
			return *result, nil
		}
	case float64:
		if result := numberToEventType(v); result != nil {
			return *result, nil
		}
	default:
		return invalidEventType, fmt.Errorf("invalid type %T", input)
	}
	return invalidEventType, nil
}

// eventTypesNameMap is a map of enum values to their EventType representation
// It is used to convert string representations of enum values into their EventType representation.
var eventTypesNameMap = map[string]EventType{
	"hello":     EventTypes.EVENTHELLO,
	"updating":  EventTypes.EVENTUPDATING,
	"volumes":   EventTypes.EVENTVOLUMES,
	"heartbeat": EventTypes.EVENTHEARTBEAT,
	"share":     EventTypes.EVENTSHARE,
}

// stringToEventType converts a string representation of an enum value into its EventType representation
// It returns a pointer to the EventType representation of the enum value if the string is valid
// Otherwise, it returns nil
func stringToEventType(s string) *EventType {
	if t, ok := eventTypesNameMap[s]; ok {
		return &t
	}
	return nil
}

// numberToEventType converts a numeric value to a EventType
// It returns a pointer to the EventType representation of the enum value if the numeric value is valid
// Otherwise, it returns nil
func numberToEventType[T constraints.Integer | constraints.Float](num T) *EventType {
	f := float64(num)
	if math.Floor(f) != f {
		return nil
	}
	i := int(f)
	if i <= 0 || i > len(EventTypes.allSlice()) {
		return nil
	}
	result := EventTypes.allSlice()[i-1]
	if !result.IsValid() {
		return nil
	}
	return &result
}

// ExhaustiveEventTypes iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveEventTypes(f func(EventType)) {
	for _, p := range EventTypes.allSlice() {
		f(p)
	}
}

// validEventTypes is a map of enum values to their validity
var validEventTypes = map[EventType]bool{
	EventTypes.EVENTHELLO:     true,
	EventTypes.EVENTUPDATING:  true,
	EventTypes.EVENTVOLUMES:   true,
	EventTypes.EVENTHEARTBEAT: true,
	EventTypes.EVENTSHARE:     true,
}

// IsValid checks whether the EventTypes value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (e EventType) IsValid() bool {
	return validEventTypes[e]
}

// MarshalJSON implements the json.Marshaler interface for EventType.
// It returns the JSON representation of the enum value as a byte slice.
func (e EventType) MarshalJSON() ([]byte, error) {
	return []byte("\"" + e.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for EventType.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (e *EventType) UnmarshalJSON(by []byte) error {
	by = bytes.Trim(bytes.Trim(by, "\""), "\"")
	newe, err := ParseEventType(by)
	if err != nil {
		return err
	}
	*e = newe
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for EventType.
// It returns the string representation of the enum value as a byte slice
func (e EventType) MarshalText() ([]byte, error) {
	return []byte("\"" + e.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for EventType.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (e *EventType) UnmarshalText(by []byte) error {
	newe, err := ParseEventType(by)
	if err != nil {
		return err
	}
	*e = newe
	return nil
}

// Scan implements the database/sql.Scanner interface for EventType.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (e *EventType) Scan(value any) error {
	newe, err := ParseEventType(value)
	if err != nil {
		return err
	}
	*e = newe
	return nil
}

// Value implements the database/sql/driver.Valuer interface for EventType.
// It returns the string representation of the enum value.
func (e EventType) Value() (driver.Value, error) {
	return e.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for EventType.
// It returns the binary representation of the enum value as a byte slice.
func (e EventType) MarshalBinary() ([]byte, error) {
	return []byte("\"" + e.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for EventType.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (e *EventType) UnmarshalBinary(by []byte) error {
	newe, err := ParseEventType(by)
	if err != nil {
		return err
	}
	*e = newe
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for EventType.
// It returns the string representation of the enum value.
func (e EventType) MarshalYAML() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for Planet.
// It parses the byte slice representation of the enum value and returns an error
// if the YAML byte slice does not contain a valid enum value.
func (e *EventType) UnmarshalYAML(by []byte) error {
	newe, err := ParseEventType(by)
	if err != nil {
		return err
	}
	*e = newe
	return nil
}

// eventtypeNames is a constant string slice containing all enum values cononical absolute names
const eventtypeNames = "helloupdatingvolumesheartbeatshare"

// eventtypeNamesMap is a map of enum values to their canonical absolute
// name positions within the eventtypeNames string slice
var eventtypeNamesMap = map[EventType]string{
	EventTypes.EVENTHELLO:     eventtypeNames[0:5],
	EventTypes.EVENTUPDATING:  eventtypeNames[5:13],
	EventTypes.EVENTVOLUMES:   eventtypeNames[13:20],
	EventTypes.EVENTHEARTBEAT: eventtypeNames[20:29],
	EventTypes.EVENTSHARE:     eventtypeNames[29:34],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (e EventType) String() string {
	if str, ok := eventtypeNamesMap[e]; ok {
		return str
	}
	return fmt.Sprintf("eventtype(%d)", e.eventType)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [5]struct{}
	_ = x[eventHello]
	_ = x[eventUpdating-1]
	_ = x[eventVolumes-2]
	_ = x[eventHeartbeat-3]
	_ = x[eventShare-4]
}
