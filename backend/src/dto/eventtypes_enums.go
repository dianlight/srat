// Code generated by goenums. DO NOT EDIT.
// This file was generated by github.com/zarldev/goenums
// using the command:
// goenums event_type.go

package dto

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"strconv"
)

type EventType struct {
	eventType
	Name string
}

type eventtypesContainer struct {
	EVENTHELLO     EventType
	EVENTUPDATE    EventType
	EVENTUPDATING  EventType
	EVENTVOLUMES   EventType
	EVENTHEARTBEAT EventType
	EVENTSHARE     EventType
	EVENTDIRTY     EventType
}

var EventTypes = eventtypesContainer{
	EVENTHELLO: EventType{
		eventType: eventHello,
		Name:      "hello",
	},
	EVENTUPDATE: EventType{
		eventType: eventUpdate,
		Name:      "update",
	},
	EVENTUPDATING: EventType{
		eventType: eventUpdating,
		Name:      "updating",
	},
	EVENTVOLUMES: EventType{
		eventType: eventVolumes,
		Name:      "volumes",
	},
	EVENTHEARTBEAT: EventType{
		eventType: eventHeartbeat,
		Name:      "heartbeat",
	},
	EVENTSHARE: EventType{
		eventType: eventShare,
		Name:      "share",
	},
	EVENTDIRTY: EventType{
		eventType: eventDirty,
		Name:      "dirty",
	},
}

func (c eventtypesContainer) All() []EventType {
	return []EventType{
		c.EVENTHELLO,
		c.EVENTUPDATE,
		c.EVENTUPDATING,
		c.EVENTVOLUMES,
		c.EVENTHEARTBEAT,
		c.EVENTSHARE,
		c.EVENTDIRTY,
	}
}

var invalidEventType = EventType{}

func ParseEventType(a any) (EventType, error) {
	res := invalidEventType
	switch v := a.(type) {
	case EventType:
		return v, nil
	case []byte:
		res = stringToEventType(string(v))
	case string:
		res = stringToEventType(v)
	case fmt.Stringer:
		res = stringToEventType(v.String())
	case int:
		res = intToEventType(v)
	case int64:
		res = intToEventType(int(v))
	case int32:
		res = intToEventType(int(v))
	}
	return res, nil
}

func stringToEventType(s string) EventType {
	switch s {
	case "eventHello":
		return EventTypes.EVENTHELLO
	case "eventUpdate":
		return EventTypes.EVENTUPDATE
	case "eventUpdating":
		return EventTypes.EVENTUPDATING
	case "eventVolumes":
		return EventTypes.EVENTVOLUMES
	case "eventHeartbeat":
		return EventTypes.EVENTHEARTBEAT
	case "eventShare":
		return EventTypes.EVENTSHARE
	case "eventDirty":
		return EventTypes.EVENTDIRTY
	}
	return invalidEventType
}

func intToEventType(i int) EventType {
	if i < 0 || i >= len(EventTypes.All()) {
		return invalidEventType
	}
	return EventTypes.All()[i]
}

func ExhaustiveEventTypes(f func(EventType)) {
	for _, p := range EventTypes.All() {
		f(p)
	}
}

var validEventTypes = map[EventType]bool{
	EventTypes.EVENTHELLO:     true,
	EventTypes.EVENTUPDATE:    true,
	EventTypes.EVENTUPDATING:  true,
	EventTypes.EVENTVOLUMES:   true,
	EventTypes.EVENTHEARTBEAT: true,
	EventTypes.EVENTSHARE:     true,
	EventTypes.EVENTDIRTY:     true,
}

func (p EventType) IsValid() bool {
	return validEventTypes[p]
}

func (p EventType) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

func (p *EventType) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	newp, err := ParseEventType(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p *EventType) Scan(value any) error {
	newp, err := ParseEventType(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p EventType) Value() (driver.Value, error) {
	return p.String(), nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[eventHello-0]
	_ = x[eventUpdate-1]
	_ = x[eventUpdating-2]
	_ = x[eventVolumes-3]
	_ = x[eventHeartbeat-4]
	_ = x[eventShare-5]
	_ = x[eventDirty-6]
}

const _eventtypes_name = "eventHelloeventUpdateeventUpdatingeventVolumeseventHeartbeateventShareeventDirty"

var _eventtypes_index = [...]uint16{0, 10, 21, 34, 46, 60, 70, 80}

func (i eventType) String() string {
	if i < 0 || i >= eventType(len(_eventtypes_index)-1) {
		return "eventtypes(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	return _eventtypes_name[_eventtypes_index[i]:_eventtypes_index[i+1]]
}
