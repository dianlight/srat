// DO NOT EDIT.
// code generated by goenums v0.4.3 at Aug 21 22:56:25.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums telemetry_mode.go

package dto

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"math"

	"golang.org/x/exp/constraints"
)

// TelemetryMode is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type TelemetryMode struct {
	telemetryMode
}

// telemetryModesContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the TelemetryMode type.
type telemetryModesContainer struct {
	TELEMETRYMODEASK      TelemetryMode
	TELEMETRYMODEALL      TelemetryMode
	TELEMETRYMODEERRORS   TelemetryMode
	TELEMETRYMODEDISABLED TelemetryMode
}

// TelemetryModes is a main entry point using the TelemetryMode type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var TelemetryModes = telemetryModesContainer{
	TELEMETRYMODEASK: TelemetryMode{
		telemetryMode: TelemetryModeAsk,
	},
	TELEMETRYMODEALL: TelemetryMode{
		telemetryMode: TelemetryModeAll,
	},
	TELEMETRYMODEERRORS: TelemetryMode{
		telemetryMode: TelemetryModeErrors,
	},
	TELEMETRYMODEDISABLED: TelemetryMode{
		telemetryMode: TelemetryModeDisabled,
	},
}

// invalidTelemetryMode is an invalid sentinel value for TelemetryMode
var invalidTelemetryMode = TelemetryMode{
	telemetryMode: -1,
}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (t telemetryModesContainer) allSlice() []TelemetryMode {
	return []TelemetryMode{
		TelemetryModes.TELEMETRYMODEASK,
		TelemetryModes.TELEMETRYMODEALL,
		TelemetryModes.TELEMETRYMODEERRORS,
		TelemetryModes.TELEMETRYMODEDISABLED,
	}
}

// All returns an iterator over all enum values.
// This method is useful for iterating over all enum values in a loop.
func (t telemetryModesContainer) All() iter.Seq[TelemetryMode] {
	return func(yield func(TelemetryMode) bool) {
		for _, v := range t.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseTelemetryMode parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParseTelemetryMode(input any) (TelemetryMode, error) {
	switch v := input.(type) {
	case TelemetryMode:
		return v, nil
	case string:
		if result := stringToTelemetryMode(v); result != nil {
			return *result, nil
		}
	case fmt.Stringer:
		if result := stringToTelemetryMode(v.String()); result != nil {
			return *result, nil
		}
	case []byte:
		if result := stringToTelemetryMode(string(v)); result != nil {
			return *result, nil
		}
	case int:
		if result := numberToTelemetryMode(v); result != nil {
			return *result, nil
		}
	case int8:
		if result := numberToTelemetryMode(v); result != nil {
			return *result, nil
		}
	case int16:
		if result := numberToTelemetryMode(v); result != nil {
			return *result, nil
		}
	case int32:
		if result := numberToTelemetryMode(v); result != nil {
			return *result, nil
		}
	case int64:
		if result := numberToTelemetryMode(v); result != nil {
			return *result, nil
		}
	case uint:
		if result := numberToTelemetryMode(v); result != nil {
			return *result, nil
		}
	case uint8:
		if result := numberToTelemetryMode(v); result != nil {
			return *result, nil
		}
	case uint16:
		if result := numberToTelemetryMode(v); result != nil {
			return *result, nil
		}
	case uint32:
		if result := numberToTelemetryMode(v); result != nil {
			return *result, nil
		}
	case uint64:
		if result := numberToTelemetryMode(v); result != nil {
			return *result, nil
		}
	case float32:
		if result := numberToTelemetryMode(v); result != nil {
			return *result, nil
		}
	case float64:
		if result := numberToTelemetryMode(v); result != nil {
			return *result, nil
		}
	default:
		return invalidTelemetryMode, fmt.Errorf("invalid type %T", input)
	}
	return invalidTelemetryMode, nil
}

// telemetryModesNameMap is a map of enum values to their TelemetryMode representation
// It is used to convert string representations of enum values into their TelemetryMode representation.
var telemetryModesNameMap = map[string]TelemetryMode{
	"Ask":      TelemetryModes.TELEMETRYMODEASK,
	"All":      TelemetryModes.TELEMETRYMODEALL,
	"Errors":   TelemetryModes.TELEMETRYMODEERRORS,
	"Disabled": TelemetryModes.TELEMETRYMODEDISABLED,
}

// stringToTelemetryMode converts a string representation of an enum value into its TelemetryMode representation
// It returns a pointer to the TelemetryMode representation of the enum value if the string is valid
// Otherwise, it returns nil
func stringToTelemetryMode(s string) *TelemetryMode {
	if t, ok := telemetryModesNameMap[s]; ok {
		return &t
	}
	return nil
}

// numberToTelemetryMode converts a numeric value to a TelemetryMode
// It returns a pointer to the TelemetryMode representation of the enum value if the numeric value is valid
// Otherwise, it returns nil
func numberToTelemetryMode[T constraints.Integer | constraints.Float](num T) *TelemetryMode {
	f := float64(num)
	if math.Floor(f) != f {
		return nil
	}
	i := int(f)
	if i <= 0 || i > len(TelemetryModes.allSlice()) {
		return nil
	}
	result := TelemetryModes.allSlice()[i-1]
	if !result.IsValid() {
		return nil
	}
	return &result
}

// ExhaustiveTelemetryModes iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveTelemetryModes(f func(TelemetryMode)) {
	for _, p := range TelemetryModes.allSlice() {
		f(p)
	}
}

// validTelemetryModes is a map of enum values to their validity
var validTelemetryModes = map[TelemetryMode]bool{
	TelemetryModes.TELEMETRYMODEASK:      true,
	TelemetryModes.TELEMETRYMODEALL:      true,
	TelemetryModes.TELEMETRYMODEERRORS:   true,
	TelemetryModes.TELEMETRYMODEDISABLED: true,
}

// IsValid checks whether the TelemetryModes value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (t TelemetryMode) IsValid() bool {
	return validTelemetryModes[t]
}

// MarshalJSON implements the json.Marshaler interface for TelemetryMode.
// It returns the JSON representation of the enum value as a byte slice.
func (t TelemetryMode) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for TelemetryMode.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (t *TelemetryMode) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, "\""), "\"")
	newt, err := ParseTelemetryMode(b)
	if err != nil {
		return err
	}
	*t = newt
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for TelemetryMode.
// It returns the string representation of the enum value as a byte slice
func (t TelemetryMode) MarshalText() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for TelemetryMode.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (t *TelemetryMode) UnmarshalText(b []byte) error {
	newt, err := ParseTelemetryMode(b)
	if err != nil {
		return err
	}
	*t = newt
	return nil
}

// Scan implements the database/sql.Scanner interface for TelemetryMode.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (t *TelemetryMode) Scan(value any) error {
	newt, err := ParseTelemetryMode(value)
	if err != nil {
		return err
	}
	*t = newt
	return nil
}

// Value implements the database/sql/driver.Valuer interface for TelemetryMode.
// It returns the string representation of the enum value.
func (t TelemetryMode) Value() (driver.Value, error) {
	return t.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for TelemetryMode.
// It returns the binary representation of the enum value as a byte slice.
func (t TelemetryMode) MarshalBinary() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for TelemetryMode.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (t *TelemetryMode) UnmarshalBinary(b []byte) error {
	newt, err := ParseTelemetryMode(b)
	if err != nil {
		return err
	}
	*t = newt
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for TelemetryMode.
// It returns the string representation of the enum value.
func (t TelemetryMode) MarshalYAML() ([]byte, error) {
	return []byte(t.String()), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for Planet.
// It parses the byte slice representation of the enum value and returns an error
// if the YAML byte slice does not contain a valid enum value.
func (t *TelemetryMode) UnmarshalYAML(b []byte) error {
	newt, err := ParseTelemetryMode(b)
	if err != nil {
		return err
	}
	*t = newt
	return nil
}

// telemetrymodeNames is a constant string slice containing all enum values cononical absolute names
const telemetrymodeNames = "AskAllErrorsDisabled"

// telemetrymodeNamesMap is a map of enum values to their canonical absolute
// name positions within the telemetrymodeNames string slice
var telemetrymodeNamesMap = map[TelemetryMode]string{
	TelemetryModes.TELEMETRYMODEASK:      telemetrymodeNames[0:3],
	TelemetryModes.TELEMETRYMODEALL:      telemetrymodeNames[3:6],
	TelemetryModes.TELEMETRYMODEERRORS:   telemetrymodeNames[6:12],
	TelemetryModes.TELEMETRYMODEDISABLED: telemetrymodeNames[12:20],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (t TelemetryMode) String() string {
	if str, ok := telemetrymodeNamesMap[t]; ok {
		return str
	}
	return fmt.Sprintf("telemetrymode(%d)", t.telemetryMode)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [4]struct{}
	_ = x[TelemetryModeAsk]
	_ = x[TelemetryModeAll-1]
	_ = x[TelemetryModeErrors-2]
	_ = x[TelemetryModeDisabled-3]
}
