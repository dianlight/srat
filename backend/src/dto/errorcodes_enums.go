// Code generated by goenums. DO NOT EDIT.
// This file was generated by github.com/zarldev/goenums
// using the command:
// goenums error_code.go

package dto

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"strconv"
)

type ErrorCode struct {
	errorCode
	ErrorMessage string
	Recoverable  bool
}

type errorcodesContainer struct {
	UNKNOWN              ErrorCode
	GENERIC_ERROR        ErrorCode
	JSON_MARSHAL_ERROR   ErrorCode
	JSON_UNMARSHAL_ERROR ErrorCode
	INVALID_PARAMETER    ErrorCode
	MOUNT_FAIL           ErrorCode
	UNMOUNT_FAIL         ErrorCode
}

var ErrorCodes = errorcodesContainer{
	GENERIC_ERROR: ErrorCode{
		errorCode:    generic_error,
		ErrorMessage: "An unexpected error occurred",
		Recoverable:  false,
	},
	JSON_MARSHAL_ERROR: ErrorCode{
		errorCode:    json_marshal_error,
		ErrorMessage: "Unable to marshal JSON: {{.Error}}",
		Recoverable:  false,
	},
	JSON_UNMARSHAL_ERROR: ErrorCode{
		errorCode:    json_unmarshal_error,
		ErrorMessage: "Unable to unmarshal JSON: {{.Error}}",
		Recoverable:  false,
	},
	INVALID_PARAMETER: ErrorCode{
		errorCode:    invalid_parameter,
		ErrorMessage: "Invalid parameter: {{.Key}}. {{.Message}}",
		Recoverable:  false,
	},
	MOUNT_FAIL: ErrorCode{
		errorCode:    mount_fail,
		ErrorMessage: "Unable to mount {{.Device}} on {{.Path}}. {{.Message}}",
		Recoverable:  false,
	},
	UNMOUNT_FAIL: ErrorCode{
		errorCode:    unmount_fail,
		ErrorMessage: "Unable to unmount {{.ID}}. {{.Message}}",
		Recoverable:  false,
	},
}

func (c errorcodesContainer) All() []ErrorCode {
	return []ErrorCode{
		c.GENERIC_ERROR,
		c.JSON_MARSHAL_ERROR,
		c.JSON_UNMARSHAL_ERROR,
		c.INVALID_PARAMETER,
		c.MOUNT_FAIL,
		c.UNMOUNT_FAIL,
	}
}

var invalidErrorCode = ErrorCode{}

func ParseErrorCode(a any) (ErrorCode, error) {
	res := invalidErrorCode
	switch v := a.(type) {
	case ErrorCode:
		return v, nil
	case []byte:
		res = stringToErrorCode(string(v))
	case string:
		res = stringToErrorCode(v)
	case fmt.Stringer:
		res = stringToErrorCode(v.String())
	case int:
		res = intToErrorCode(v)
	case int64:
		res = intToErrorCode(int(v))
	case int32:
		res = intToErrorCode(int(v))
	}
	return res, nil
}

func stringToErrorCode(s string) ErrorCode {
	switch s {
	case "unknown":
		return ErrorCodes.UNKNOWN
	case "generic_error":
		return ErrorCodes.GENERIC_ERROR
	case "json_marshal_error":
		return ErrorCodes.JSON_MARSHAL_ERROR
	case "json_unmarshal_error":
		return ErrorCodes.JSON_UNMARSHAL_ERROR
	case "invalid_parameter":
		return ErrorCodes.INVALID_PARAMETER
	case "mount_fail":
		return ErrorCodes.MOUNT_FAIL
	case "unmount_fail":
		return ErrorCodes.UNMOUNT_FAIL
	}
	return invalidErrorCode
}

func intToErrorCode(i int) ErrorCode {
	if i < 0 || i >= len(ErrorCodes.All()) {
		return invalidErrorCode
	}
	return ErrorCodes.All()[i]
}

func ExhaustiveErrorCodes(f func(ErrorCode)) {
	for _, p := range ErrorCodes.All() {
		f(p)
	}
}

var validErrorCodes = map[ErrorCode]bool{
	ErrorCodes.GENERIC_ERROR:        true,
	ErrorCodes.JSON_MARSHAL_ERROR:   true,
	ErrorCodes.JSON_UNMARSHAL_ERROR: true,
	ErrorCodes.INVALID_PARAMETER:    true,
	ErrorCodes.MOUNT_FAIL:           true,
	ErrorCodes.UNMOUNT_FAIL:         true,
}

func (p ErrorCode) IsValid() bool {
	return validErrorCodes[p]
}

func (p ErrorCode) MarshalJSON() ([]byte, error) {
	return []byte(`"` + p.String() + `"`), nil
}

func (p *ErrorCode) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, `"`), ` `)
	newp, err := ParseErrorCode(b)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p *ErrorCode) Scan(value any) error {
	newp, err := ParseErrorCode(value)
	if err != nil {
		return err
	}
	*p = newp
	return nil
}

func (p ErrorCode) Value() (driver.Value, error) {
	return p.String(), nil
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [1]struct{}
	_ = x[unknown-0]
	_ = x[generic_error-1]
	_ = x[json_marshal_error-2]
	_ = x[json_unmarshal_error-3]
	_ = x[invalid_parameter-4]
	_ = x[mount_fail-5]
	_ = x[unmount_fail-6]
}

const _errorcodes_name = "unknowngeneric_errorjson_marshal_errorjson_unmarshal_errorinvalid_parametermount_failunmount_fail"

var _errorcodes_index = [...]uint16{0, 7, 20, 38, 58, 75, 85, 97}

func (i errorCode) String() string {
	if i < 0 || i >= errorCode(len(_errorcodes_index)-1) {
		return "errorcodes(" + (strconv.FormatInt(int64(i), 10) + ")")
	}
	return _errorcodes_name[_errorcodes_index[i]:_errorcodes_index[i+1]]
}
