// DO NOT EDIT.
// code generated by goenums v0.4.3 at Aug 21 08:37:32.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums update_process_state.go

package dto

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"math"

	"golang.org/x/exp/constraints"
)

// UpdateProcessState is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type UpdateProcessState struct {
	updateProcessState
	Name string
}

// updateProcessStatesContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the UpdateProcessState type.
type updateProcessStatesContainer struct {
	UPDATESTATUSIDLE             UpdateProcessState
	UPDATESTATUSCHECKING         UpdateProcessState
	UPDATESTATUSNOUPGRDE         UpdateProcessState
	UPDATESTATUSUPGRADEAVAILABLE UpdateProcessState
	UPDATESTATUSDOWNLOADING      UpdateProcessState
	UPDATESTATUSDOWNLOADCOMPLETE UpdateProcessState
	UPDATESTATUSEXTRACTING       UpdateProcessState
	UPDATESTATUSEXTRACTCOMPLETE  UpdateProcessState
	UPDATESTATUSINSTALLING       UpdateProcessState
	UPDATESTATUSINSTALLCOMPLETE  UpdateProcessState
	UPDATESTATUSERROR            UpdateProcessState
}

// UpdateProcessStates is a main entry point using the UpdateProcessState type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var UpdateProcessStates = updateProcessStatesContainer{
	UPDATESTATUSIDLE: UpdateProcessState{
		updateProcessState: UpdateStatusIdle,
		Name:               "Idle",
	},
	UPDATESTATUSCHECKING: UpdateProcessState{
		updateProcessState: UpdateStatusChecking,
		Name:               "Checking",
	},
	UPDATESTATUSNOUPGRDE: UpdateProcessState{
		updateProcessState: UpdateStatusNoUpgrde,
		Name:               "NoUpgrade",
	},
	UPDATESTATUSUPGRADEAVAILABLE: UpdateProcessState{
		updateProcessState: UpdateStatusUpgradeAvailable,
		Name:               "Available",
	},
	UPDATESTATUSDOWNLOADING: UpdateProcessState{
		updateProcessState: UpdateStatusDownloading,
		Name:               "Downloading",
	},
	UPDATESTATUSDOWNLOADCOMPLETE: UpdateProcessState{
		updateProcessState: UpdateStatusDownloadComplete,
		Name:               "Downloaded",
	},
	UPDATESTATUSEXTRACTING: UpdateProcessState{
		updateProcessState: UpdateStatusExtracting,
		Name:               "Extractiong",
	},
	UPDATESTATUSEXTRACTCOMPLETE: UpdateProcessState{
		updateProcessState: UpdateStatusExtractComplete,
		Name:               "Extracted",
	},
	UPDATESTATUSINSTALLING: UpdateProcessState{
		updateProcessState: UpdateStatusInstalling,
		Name:               "Installing",
	},
	UPDATESTATUSINSTALLCOMPLETE: UpdateProcessState{
		updateProcessState: UpdateStatusInstallComplete,
		Name:               "(Ready for restart)",
	},
	UPDATESTATUSERROR: UpdateProcessState{
		updateProcessState: UpdateStatusError,
		Name:               "Error",
	},
}

// invalidUpdateProcessState is an invalid sentinel value for UpdateProcessState
var invalidUpdateProcessState = UpdateProcessState{
	updateProcessState: -1,
}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (u updateProcessStatesContainer) allSlice() []UpdateProcessState {
	return []UpdateProcessState{
		UpdateProcessStates.UPDATESTATUSIDLE,
		UpdateProcessStates.UPDATESTATUSCHECKING,
		UpdateProcessStates.UPDATESTATUSNOUPGRDE,
		UpdateProcessStates.UPDATESTATUSUPGRADEAVAILABLE,
		UpdateProcessStates.UPDATESTATUSDOWNLOADING,
		UpdateProcessStates.UPDATESTATUSDOWNLOADCOMPLETE,
		UpdateProcessStates.UPDATESTATUSEXTRACTING,
		UpdateProcessStates.UPDATESTATUSEXTRACTCOMPLETE,
		UpdateProcessStates.UPDATESTATUSINSTALLING,
		UpdateProcessStates.UPDATESTATUSINSTALLCOMPLETE,
		UpdateProcessStates.UPDATESTATUSERROR,
	}
}

// All returns an iterator over all enum values.
// This method is useful for iterating over all enum values in a loop.
func (u updateProcessStatesContainer) All() iter.Seq[UpdateProcessState] {
	return func(yield func(UpdateProcessState) bool) {
		for _, v := range u.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseUpdateProcessState parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParseUpdateProcessState(input any) (UpdateProcessState, error) {
	switch v := input.(type) {
	case UpdateProcessState:
		return v, nil
	case string:
		if result := stringToUpdateProcessState(v); result != nil {
			return *result, nil
		}
	case fmt.Stringer:
		if result := stringToUpdateProcessState(v.String()); result != nil {
			return *result, nil
		}
	case []byte:
		if result := stringToUpdateProcessState(string(v)); result != nil {
			return *result, nil
		}
	case int:
		if result := numberToUpdateProcessState(v); result != nil {
			return *result, nil
		}
	case int8:
		if result := numberToUpdateProcessState(v); result != nil {
			return *result, nil
		}
	case int16:
		if result := numberToUpdateProcessState(v); result != nil {
			return *result, nil
		}
	case int32:
		if result := numberToUpdateProcessState(v); result != nil {
			return *result, nil
		}
	case int64:
		if result := numberToUpdateProcessState(v); result != nil {
			return *result, nil
		}
	case uint:
		if result := numberToUpdateProcessState(v); result != nil {
			return *result, nil
		}
	case uint8:
		if result := numberToUpdateProcessState(v); result != nil {
			return *result, nil
		}
	case uint16:
		if result := numberToUpdateProcessState(v); result != nil {
			return *result, nil
		}
	case uint32:
		if result := numberToUpdateProcessState(v); result != nil {
			return *result, nil
		}
	case uint64:
		if result := numberToUpdateProcessState(v); result != nil {
			return *result, nil
		}
	case float32:
		if result := numberToUpdateProcessState(v); result != nil {
			return *result, nil
		}
	case float64:
		if result := numberToUpdateProcessState(v); result != nil {
			return *result, nil
		}
	default:
		return invalidUpdateProcessState, fmt.Errorf("invalid type %T", input)
	}
	return invalidUpdateProcessState, nil
}

// updateProcessStatesNameMap is a map of enum values to their UpdateProcessState representation
// It is used to convert string representations of enum values into their UpdateProcessState representation.
var updateProcessStatesNameMap = map[string]UpdateProcessState{
	"UpdateStatusIdle":             UpdateProcessStates.UPDATESTATUSIDLE,
	"UpdateStatusChecking":         UpdateProcessStates.UPDATESTATUSCHECKING,
	"UpdateStatusNoUpgrde":         UpdateProcessStates.UPDATESTATUSNOUPGRDE,
	"UpdateStatusUpgradeAvailable": UpdateProcessStates.UPDATESTATUSUPGRADEAVAILABLE,
	"UpdateStatusDownloading":      UpdateProcessStates.UPDATESTATUSDOWNLOADING,
	"UpdateStatusDownloadComplete": UpdateProcessStates.UPDATESTATUSDOWNLOADCOMPLETE,
	"UpdateStatusExtracting":       UpdateProcessStates.UPDATESTATUSEXTRACTING,
	"UpdateStatusExtractComplete":  UpdateProcessStates.UPDATESTATUSEXTRACTCOMPLETE,
	"UpdateStatusInstalling":       UpdateProcessStates.UPDATESTATUSINSTALLING,
	"NeedRestart":                  UpdateProcessStates.UPDATESTATUSINSTALLCOMPLETE,
	"UpdateStatusError":            UpdateProcessStates.UPDATESTATUSERROR,
}

// stringToUpdateProcessState converts a string representation of an enum value into its UpdateProcessState representation
// It returns a pointer to the UpdateProcessState representation of the enum value if the string is valid
// Otherwise, it returns nil
func stringToUpdateProcessState(s string) *UpdateProcessState {
	if t, ok := updateProcessStatesNameMap[s]; ok {
		return &t
	}
	return nil
}

// numberToUpdateProcessState converts a numeric value to a UpdateProcessState
// It returns a pointer to the UpdateProcessState representation of the enum value if the numeric value is valid
// Otherwise, it returns nil
func numberToUpdateProcessState[T constraints.Integer | constraints.Float](num T) *UpdateProcessState {
	f := float64(num)
	if math.Floor(f) != f {
		return nil
	}
	i := int(f)
	if i <= 0 || i > len(UpdateProcessStates.allSlice()) {
		return nil
	}
	result := UpdateProcessStates.allSlice()[i-1]
	if !result.IsValid() {
		return nil
	}
	return &result
}

// ExhaustiveUpdateProcessStates iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveUpdateProcessStates(f func(UpdateProcessState)) {
	for _, p := range UpdateProcessStates.allSlice() {
		f(p)
	}
}

// validUpdateProcessStates is a map of enum values to their validity
var validUpdateProcessStates = map[UpdateProcessState]bool{
	UpdateProcessStates.UPDATESTATUSIDLE:             true,
	UpdateProcessStates.UPDATESTATUSCHECKING:         true,
	UpdateProcessStates.UPDATESTATUSNOUPGRDE:         true,
	UpdateProcessStates.UPDATESTATUSUPGRADEAVAILABLE: true,
	UpdateProcessStates.UPDATESTATUSDOWNLOADING:      true,
	UpdateProcessStates.UPDATESTATUSDOWNLOADCOMPLETE: true,
	UpdateProcessStates.UPDATESTATUSEXTRACTING:       true,
	UpdateProcessStates.UPDATESTATUSEXTRACTCOMPLETE:  true,
	UpdateProcessStates.UPDATESTATUSINSTALLING:       true,
	UpdateProcessStates.UPDATESTATUSINSTALLCOMPLETE:  true,
	UpdateProcessStates.UPDATESTATUSERROR:            true,
}

// IsValid checks whether the UpdateProcessStates value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (u UpdateProcessState) IsValid() bool {
	return validUpdateProcessStates[u]
}

// MarshalJSON implements the json.Marshaler interface for UpdateProcessState.
// It returns the JSON representation of the enum value as a byte slice.
func (u UpdateProcessState) MarshalJSON() ([]byte, error) {
	return []byte("\"" + u.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for UpdateProcessState.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (u *UpdateProcessState) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, "\""), "\"")
	newu, err := ParseUpdateProcessState(b)
	if err != nil {
		return err
	}
	*u = newu
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for UpdateProcessState.
// It returns the string representation of the enum value as a byte slice
func (u UpdateProcessState) MarshalText() ([]byte, error) {
	return []byte("\"" + u.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for UpdateProcessState.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (u *UpdateProcessState) UnmarshalText(b []byte) error {
	newu, err := ParseUpdateProcessState(b)
	if err != nil {
		return err
	}
	*u = newu
	return nil
}

// Scan implements the database/sql.Scanner interface for UpdateProcessState.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (u *UpdateProcessState) Scan(value any) error {
	newu, err := ParseUpdateProcessState(value)
	if err != nil {
		return err
	}
	*u = newu
	return nil
}

// Value implements the database/sql/driver.Valuer interface for UpdateProcessState.
// It returns the string representation of the enum value.
func (u UpdateProcessState) Value() (driver.Value, error) {
	return u.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for UpdateProcessState.
// It returns the binary representation of the enum value as a byte slice.
func (u UpdateProcessState) MarshalBinary() ([]byte, error) {
	return []byte("\"" + u.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for UpdateProcessState.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (u *UpdateProcessState) UnmarshalBinary(b []byte) error {
	newu, err := ParseUpdateProcessState(b)
	if err != nil {
		return err
	}
	*u = newu
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for UpdateProcessState.
// It returns the string representation of the enum value.
func (u UpdateProcessState) MarshalYAML() ([]byte, error) {
	return []byte(u.String()), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for Planet.
// It parses the byte slice representation of the enum value and returns an error
// if the YAML byte slice does not contain a valid enum value.
func (u *UpdateProcessState) UnmarshalYAML(b []byte) error {
	newu, err := ParseUpdateProcessState(b)
	if err != nil {
		return err
	}
	*u = newu
	return nil
}

// updateprocessstateNames is a constant string slice containing all enum values cononical absolute names
const updateprocessstateNames = "UpdateStatusIdleUpdateStatusCheckingUpdateStatusNoUpgrdeUpdateStatusUpgradeAvailableUpdateStatusDownloadingUpdateStatusDownloadCompleteUpdateStatusExtractingUpdateStatusExtractCompleteUpdateStatusInstallingNeedRestartUpdateStatusError"

// updateprocessstateNamesMap is a map of enum values to their canonical absolute
// name positions within the updateprocessstateNames string slice
var updateprocessstateNamesMap = map[UpdateProcessState]string{
	UpdateProcessStates.UPDATESTATUSIDLE:             updateprocessstateNames[0:16],
	UpdateProcessStates.UPDATESTATUSCHECKING:         updateprocessstateNames[16:36],
	UpdateProcessStates.UPDATESTATUSNOUPGRDE:         updateprocessstateNames[36:56],
	UpdateProcessStates.UPDATESTATUSUPGRADEAVAILABLE: updateprocessstateNames[56:84],
	UpdateProcessStates.UPDATESTATUSDOWNLOADING:      updateprocessstateNames[84:107],
	UpdateProcessStates.UPDATESTATUSDOWNLOADCOMPLETE: updateprocessstateNames[107:135],
	UpdateProcessStates.UPDATESTATUSEXTRACTING:       updateprocessstateNames[135:157],
	UpdateProcessStates.UPDATESTATUSEXTRACTCOMPLETE:  updateprocessstateNames[157:184],
	UpdateProcessStates.UPDATESTATUSINSTALLING:       updateprocessstateNames[184:206],
	UpdateProcessStates.UPDATESTATUSINSTALLCOMPLETE:  updateprocessstateNames[206:217],
	UpdateProcessStates.UPDATESTATUSERROR:            updateprocessstateNames[217:234],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (u UpdateProcessState) String() string {
	if str, ok := updateprocessstateNamesMap[u]; ok {
		return str
	}
	return fmt.Sprintf("updateprocessstate(%d)", u.updateProcessState)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [11]struct{}
	_ = x[UpdateStatusIdle]
	_ = x[UpdateStatusChecking-1]
	_ = x[UpdateStatusNoUpgrde-2]
	_ = x[UpdateStatusUpgradeAvailable-3]
	_ = x[UpdateStatusDownloading-4]
	_ = x[UpdateStatusDownloadComplete-5]
	_ = x[UpdateStatusExtracting-6]
	_ = x[UpdateStatusExtractComplete-7]
	_ = x[UpdateStatusInstalling-8]
	_ = x[UpdateStatusInstallComplete-9]
	_ = x[UpdateStatusError-10]
}
