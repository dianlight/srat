// DO NOT EDIT.
// code generated by goenums v0.4.4 at Oct  4 12:13:28.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums issue_severity.go

package dto

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"math"

	"golang.org/x/exp/constraints"
)

// IssueSeverity is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type IssueSeverity struct {
	issueSeverity
}

// issueSeveritiesContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the IssueSeverity type.
type issueSeveritiesContainer struct {
	ISSUESEVERITYERROR   IssueSeverity
	ISSUESEVERITYWARNING IssueSeverity
	ISSUESEVERITYINFO    IssueSeverity
	ISSUESEVERITYSUCCESS IssueSeverity
}

// IssueSeverities is a main entry point using the IssueSeverity type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var IssueSeverities = issueSeveritiesContainer{
	ISSUESEVERITYERROR: IssueSeverity{
		issueSeverity: issueSeverityError,
	},
	ISSUESEVERITYWARNING: IssueSeverity{
		issueSeverity: issueSeverityWarning,
	},
	ISSUESEVERITYINFO: IssueSeverity{
		issueSeverity: issueSeverityInfo,
	},
	ISSUESEVERITYSUCCESS: IssueSeverity{
		issueSeverity: issueSeveritySuccess,
	},
}

// invalidIssueSeverity is an invalid sentinel value for IssueSeverity
var invalidIssueSeverity = IssueSeverity{
	issueSeverity: -1,
}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (i issueSeveritiesContainer) allSlice() []IssueSeverity {
	return []IssueSeverity{
		IssueSeverities.ISSUESEVERITYERROR,
		IssueSeverities.ISSUESEVERITYWARNING,
		IssueSeverities.ISSUESEVERITYINFO,
		IssueSeverities.ISSUESEVERITYSUCCESS,
	}
}

// All returns an iterator over all enum values.
// This method is useful for iterating over all enum values in a loop.
func (i issueSeveritiesContainer) All() iter.Seq[IssueSeverity] {
	return func(yield func(IssueSeverity) bool) {
		for _, v := range i.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseIssueSeverity parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParseIssueSeverity(input any) (IssueSeverity, error) {
	switch v := input.(type) {
	case IssueSeverity:
		return v, nil
	case string:
		if result := stringToIssueSeverity(v); result != nil {
			return *result, nil
		}
	case fmt.Stringer:
		if result := stringToIssueSeverity(v.String()); result != nil {
			return *result, nil
		}
	case []byte:
		if result := stringToIssueSeverity(string(v)); result != nil {
			return *result, nil
		}
	case int:
		if result := numberToIssueSeverity(v); result != nil {
			return *result, nil
		}
	case int8:
		if result := numberToIssueSeverity(v); result != nil {
			return *result, nil
		}
	case int16:
		if result := numberToIssueSeverity(v); result != nil {
			return *result, nil
		}
	case int32:
		if result := numberToIssueSeverity(v); result != nil {
			return *result, nil
		}
	case int64:
		if result := numberToIssueSeverity(v); result != nil {
			return *result, nil
		}
	case uint:
		if result := numberToIssueSeverity(v); result != nil {
			return *result, nil
		}
	case uint8:
		if result := numberToIssueSeverity(v); result != nil {
			return *result, nil
		}
	case uint16:
		if result := numberToIssueSeverity(v); result != nil {
			return *result, nil
		}
	case uint32:
		if result := numberToIssueSeverity(v); result != nil {
			return *result, nil
		}
	case uint64:
		if result := numberToIssueSeverity(v); result != nil {
			return *result, nil
		}
	case float32:
		if result := numberToIssueSeverity(v); result != nil {
			return *result, nil
		}
	case float64:
		if result := numberToIssueSeverity(v); result != nil {
			return *result, nil
		}
	default:
		return invalidIssueSeverity, fmt.Errorf("invalid type %T", input)
	}
	return invalidIssueSeverity, nil
}

// issueSeveritiesNameMap is a map of enum values to their IssueSeverity representation
// It is used to convert string representations of enum values into their IssueSeverity representation.
var issueSeveritiesNameMap = map[string]IssueSeverity{
	"error":   IssueSeverities.ISSUESEVERITYERROR,
	"warning": IssueSeverities.ISSUESEVERITYWARNING,
	"info":    IssueSeverities.ISSUESEVERITYINFO,
	"success": IssueSeverities.ISSUESEVERITYSUCCESS,
}

// stringToIssueSeverity converts a string representation of an enum value into its IssueSeverity representation
// It returns a pointer to the IssueSeverity representation of the enum value if the string is valid
// Otherwise, it returns nil
func stringToIssueSeverity(s string) *IssueSeverity {
	if t, ok := issueSeveritiesNameMap[s]; ok {
		return &t
	}
	return nil
}

// numberToIssueSeverity converts a numeric value to a IssueSeverity
// It returns a pointer to the IssueSeverity representation of the enum value if the numeric value is valid
// Otherwise, it returns nil
func numberToIssueSeverity[T constraints.Integer | constraints.Float](num T) *IssueSeverity {
	f := float64(num)
	if math.Floor(f) != f {
		return nil
	}
	i := int(f)
	if i <= 0 || i > len(IssueSeverities.allSlice()) {
		return nil
	}
	result := IssueSeverities.allSlice()[i-1]
	if !result.IsValid() {
		return nil
	}
	return &result
}

// ExhaustiveIssueSeverities iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveIssueSeverities(f func(IssueSeverity)) {
	for _, p := range IssueSeverities.allSlice() {
		f(p)
	}
}

// validIssueSeverities is a map of enum values to their validity
var validIssueSeverities = map[IssueSeverity]bool{
	IssueSeverities.ISSUESEVERITYERROR:   true,
	IssueSeverities.ISSUESEVERITYWARNING: true,
	IssueSeverities.ISSUESEVERITYINFO:    true,
	IssueSeverities.ISSUESEVERITYSUCCESS: true,
}

// IsValid checks whether the IssueSeverities value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (i IssueSeverity) IsValid() bool {
	return validIssueSeverities[i]
}

// MarshalJSON implements the json.Marshaler interface for IssueSeverity.
// It returns the JSON representation of the enum value as a byte slice.
func (i IssueSeverity) MarshalJSON() ([]byte, error) {
	return []byte("\"" + i.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for IssueSeverity.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (i *IssueSeverity) UnmarshalJSON(by []byte) error {
	by = bytes.Trim(bytes.Trim(by, "\""), "\"")
	newi, err := ParseIssueSeverity(by)
	if err != nil {
		return err
	}
	*i = newi
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for IssueSeverity.
// It returns the string representation of the enum value as a byte slice
func (i IssueSeverity) MarshalText() ([]byte, error) {
	return []byte("\"" + i.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for IssueSeverity.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (i *IssueSeverity) UnmarshalText(by []byte) error {
	newi, err := ParseIssueSeverity(by)
	if err != nil {
		return err
	}
	*i = newi
	return nil
}

// Scan implements the database/sql.Scanner interface for IssueSeverity.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (i *IssueSeverity) Scan(value any) error {
	newi, err := ParseIssueSeverity(value)
	if err != nil {
		return err
	}
	*i = newi
	return nil
}

// Value implements the database/sql/driver.Valuer interface for IssueSeverity.
// It returns the string representation of the enum value.
func (i IssueSeverity) Value() (driver.Value, error) {
	return i.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for IssueSeverity.
// It returns the binary representation of the enum value as a byte slice.
func (i IssueSeverity) MarshalBinary() ([]byte, error) {
	return []byte("\"" + i.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for IssueSeverity.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (i *IssueSeverity) UnmarshalBinary(by []byte) error {
	newi, err := ParseIssueSeverity(by)
	if err != nil {
		return err
	}
	*i = newi
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for IssueSeverity.
// It returns the string representation of the enum value.
func (i IssueSeverity) MarshalYAML() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for Planet.
// It parses the byte slice representation of the enum value and returns an error
// if the YAML byte slice does not contain a valid enum value.
func (i *IssueSeverity) UnmarshalYAML(by []byte) error {
	newi, err := ParseIssueSeverity(by)
	if err != nil {
		return err
	}
	*i = newi
	return nil
}

// issueseverityNames is a constant string slice containing all enum values cononical absolute names
const issueseverityNames = "errorwarninginfosuccess"

// issueseverityNamesMap is a map of enum values to their canonical absolute
// name positions within the issueseverityNames string slice
var issueseverityNamesMap = map[IssueSeverity]string{
	IssueSeverities.ISSUESEVERITYERROR:   issueseverityNames[0:5],
	IssueSeverities.ISSUESEVERITYWARNING: issueseverityNames[5:12],
	IssueSeverities.ISSUESEVERITYINFO:    issueseverityNames[12:16],
	IssueSeverities.ISSUESEVERITYSUCCESS: issueseverityNames[16:23],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (i IssueSeverity) String() string {
	if str, ok := issueseverityNamesMap[i]; ok {
		return str
	}
	return fmt.Sprintf("issueseverity(%d)", i.issueSeverity)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [4]struct{}
	_ = x[issueSeverityError]
	_ = x[issueSeverityWarning-1]
	_ = x[issueSeverityInfo-2]
	_ = x[issueSeveritySuccess-3]
}
