// DO NOT EDIT.
// code generated by goenums v0.4.3 at Aug 24 07:25:11.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums time_machine_support.go

package dto

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"math"

	"golang.org/x/exp/constraints"
)

// TimeMachineSupport is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type TimeMachineSupport struct {
	timeMachineSupport
}

// timeMachineSupportsContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the TimeMachineSupport type.
type timeMachineSupportsContainer struct {
	UNSUPPORTED  TimeMachineSupport
	SUPPORTED    TimeMachineSupport
	EXPERIMENTAL TimeMachineSupport
	UNKNOWN      TimeMachineSupport
}

// TimeMachineSupports is a main entry point using the TimeMachineSupport type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var TimeMachineSupports = timeMachineSupportsContainer{
	UNSUPPORTED: TimeMachineSupport{
		timeMachineSupport: unsupported,
	},
	SUPPORTED: TimeMachineSupport{
		timeMachineSupport: supported,
	},
	EXPERIMENTAL: TimeMachineSupport{
		timeMachineSupport: experimental,
	},
	UNKNOWN: TimeMachineSupport{
		timeMachineSupport: unknown,
	},
}

// invalidTimeMachineSupport is an invalid sentinel value for TimeMachineSupport
var invalidTimeMachineSupport = TimeMachineSupport{
	timeMachineSupport: -1,
}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (t timeMachineSupportsContainer) allSlice() []TimeMachineSupport {
	return []TimeMachineSupport{
		TimeMachineSupports.UNSUPPORTED,
		TimeMachineSupports.SUPPORTED,
		TimeMachineSupports.EXPERIMENTAL,
		TimeMachineSupports.UNKNOWN,
	}
}

// All returns an iterator over all enum values.
// This method is useful for iterating over all enum values in a loop.
func (t timeMachineSupportsContainer) All() iter.Seq[TimeMachineSupport] {
	return func(yield func(TimeMachineSupport) bool) {
		for _, v := range t.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseTimeMachineSupport parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParseTimeMachineSupport(input any) (TimeMachineSupport, error) {
	switch v := input.(type) {
	case TimeMachineSupport:
		return v, nil
	case string:
		if result := stringToTimeMachineSupport(v); result != nil {
			return *result, nil
		}
	case fmt.Stringer:
		if result := stringToTimeMachineSupport(v.String()); result != nil {
			return *result, nil
		}
	case []byte:
		if result := stringToTimeMachineSupport(string(v)); result != nil {
			return *result, nil
		}
	case int:
		if result := numberToTimeMachineSupport(v); result != nil {
			return *result, nil
		}
	case int8:
		if result := numberToTimeMachineSupport(v); result != nil {
			return *result, nil
		}
	case int16:
		if result := numberToTimeMachineSupport(v); result != nil {
			return *result, nil
		}
	case int32:
		if result := numberToTimeMachineSupport(v); result != nil {
			return *result, nil
		}
	case int64:
		if result := numberToTimeMachineSupport(v); result != nil {
			return *result, nil
		}
	case uint:
		if result := numberToTimeMachineSupport(v); result != nil {
			return *result, nil
		}
	case uint8:
		if result := numberToTimeMachineSupport(v); result != nil {
			return *result, nil
		}
	case uint16:
		if result := numberToTimeMachineSupport(v); result != nil {
			return *result, nil
		}
	case uint32:
		if result := numberToTimeMachineSupport(v); result != nil {
			return *result, nil
		}
	case uint64:
		if result := numberToTimeMachineSupport(v); result != nil {
			return *result, nil
		}
	case float32:
		if result := numberToTimeMachineSupport(v); result != nil {
			return *result, nil
		}
	case float64:
		if result := numberToTimeMachineSupport(v); result != nil {
			return *result, nil
		}
	default:
		return invalidTimeMachineSupport, fmt.Errorf("invalid type %T", input)
	}
	return invalidTimeMachineSupport, nil
}

// timeMachineSupportsNameMap is a map of enum values to their TimeMachineSupport representation
// It is used to convert string representations of enum values into their TimeMachineSupport representation.
var timeMachineSupportsNameMap = map[string]TimeMachineSupport{
	"unsupported":  TimeMachineSupports.UNSUPPORTED,
	"supported":    TimeMachineSupports.SUPPORTED,
	"experimental": TimeMachineSupports.EXPERIMENTAL,
	"unknown":      TimeMachineSupports.UNKNOWN,
}

// stringToTimeMachineSupport converts a string representation of an enum value into its TimeMachineSupport representation
// It returns a pointer to the TimeMachineSupport representation of the enum value if the string is valid
// Otherwise, it returns nil
func stringToTimeMachineSupport(s string) *TimeMachineSupport {
	if t, ok := timeMachineSupportsNameMap[s]; ok {
		return &t
	}
	return nil
}

// numberToTimeMachineSupport converts a numeric value to a TimeMachineSupport
// It returns a pointer to the TimeMachineSupport representation of the enum value if the numeric value is valid
// Otherwise, it returns nil
func numberToTimeMachineSupport[T constraints.Integer | constraints.Float](num T) *TimeMachineSupport {
	f := float64(num)
	if math.Floor(f) != f {
		return nil
	}
	i := int(f)
	if i <= 0 || i > len(TimeMachineSupports.allSlice()) {
		return nil
	}
	result := TimeMachineSupports.allSlice()[i-1]
	if !result.IsValid() {
		return nil
	}
	return &result
}

// ExhaustiveTimeMachineSupports iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveTimeMachineSupports(f func(TimeMachineSupport)) {
	for _, p := range TimeMachineSupports.allSlice() {
		f(p)
	}
}

// validTimeMachineSupports is a map of enum values to their validity
var validTimeMachineSupports = map[TimeMachineSupport]bool{
	TimeMachineSupports.UNSUPPORTED:  true,
	TimeMachineSupports.SUPPORTED:    true,
	TimeMachineSupports.EXPERIMENTAL: true,
	TimeMachineSupports.UNKNOWN:      true,
}

// IsValid checks whether the TimeMachineSupports value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (t TimeMachineSupport) IsValid() bool {
	return validTimeMachineSupports[t]
}

// MarshalJSON implements the json.Marshaler interface for TimeMachineSupport.
// It returns the JSON representation of the enum value as a byte slice.
func (t TimeMachineSupport) MarshalJSON() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for TimeMachineSupport.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (t *TimeMachineSupport) UnmarshalJSON(b []byte) error {
	b = bytes.Trim(bytes.Trim(b, "\""), "\"")
	newt, err := ParseTimeMachineSupport(b)
	if err != nil {
		return err
	}
	*t = newt
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for TimeMachineSupport.
// It returns the string representation of the enum value as a byte slice
func (t TimeMachineSupport) MarshalText() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for TimeMachineSupport.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (t *TimeMachineSupport) UnmarshalText(b []byte) error {
	newt, err := ParseTimeMachineSupport(b)
	if err != nil {
		return err
	}
	*t = newt
	return nil
}

// Scan implements the database/sql.Scanner interface for TimeMachineSupport.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (t *TimeMachineSupport) Scan(value any) error {
	newt, err := ParseTimeMachineSupport(value)
	if err != nil {
		return err
	}
	*t = newt
	return nil
}

// Value implements the database/sql/driver.Valuer interface for TimeMachineSupport.
// It returns the string representation of the enum value.
func (t TimeMachineSupport) Value() (driver.Value, error) {
	return t.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for TimeMachineSupport.
// It returns the binary representation of the enum value as a byte slice.
func (t TimeMachineSupport) MarshalBinary() ([]byte, error) {
	return []byte("\"" + t.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for TimeMachineSupport.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (t *TimeMachineSupport) UnmarshalBinary(b []byte) error {
	newt, err := ParseTimeMachineSupport(b)
	if err != nil {
		return err
	}
	*t = newt
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for TimeMachineSupport.
// It returns the string representation of the enum value.
func (t TimeMachineSupport) MarshalYAML() ([]byte, error) {
	return []byte(t.String()), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for Planet.
// It parses the byte slice representation of the enum value and returns an error
// if the YAML byte slice does not contain a valid enum value.
func (t *TimeMachineSupport) UnmarshalYAML(b []byte) error {
	newt, err := ParseTimeMachineSupport(b)
	if err != nil {
		return err
	}
	*t = newt
	return nil
}

// timemachinesupportNames is a constant string slice containing all enum values cononical absolute names
const timemachinesupportNames = "unsupportedsupportedexperimentalunknown"

// timemachinesupportNamesMap is a map of enum values to their canonical absolute
// name positions within the timemachinesupportNames string slice
var timemachinesupportNamesMap = map[TimeMachineSupport]string{
	TimeMachineSupports.UNSUPPORTED:  timemachinesupportNames[0:11],
	TimeMachineSupports.SUPPORTED:    timemachinesupportNames[11:20],
	TimeMachineSupports.EXPERIMENTAL: timemachinesupportNames[20:32],
	TimeMachineSupports.UNKNOWN:      timemachinesupportNames[32:39],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (t TimeMachineSupport) String() string {
	if str, ok := timemachinesupportNamesMap[t]; ok {
		return str
	}
	return fmt.Sprintf("timemachinesupport(%d)", t.timeMachineSupport)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [4]struct{}
	_ = x[unsupported]
	_ = x[supported-1]
	_ = x[experimental-2]
	_ = x[unknown-3]
}
