// DO NOT EDIT.
// code generated by goenums v0.4.4 at Oct  4 12:31:37.
//
// github.com/zarldev/goenums
//
// using the command:
// goenums smart_attribute.go

package dto

import (
	"bytes"
	"database/sql/driver"
	"fmt"
	"iter"
	"math"

	"golang.org/x/exp/constraints"
)

// SmartAttributeCode is a type that represents a single enum value.
// It combines the core information about the enum constant and it's defined fields.
type SmartAttributeCode struct {
	smartAttributeCode
	Code int
	Type string
}

// smartAttributeCodesContainer is the container for all enum values.
// It is private and should not be used directly use the public methods on the SmartAttributeCode type.
type smartAttributeCodesContainer struct {
	SMARTATTRIBUTEUNDEFINED     SmartAttributeCode
	SMARTATTRTEMPERATURECELSIUS SmartAttributeCode
	SMARTATTRPOWERONHOURS       SmartAttributeCode
	SMARTATTRPOWERCYCLECOUNT    SmartAttributeCode
}

// SmartAttributeCodes is a main entry point using the SmartAttributeCode type.
// It it a container for all enum values and provides a convenient way to access all enum values and perform
// operations, with convenience methods for common use cases.
var SmartAttributeCodes = smartAttributeCodesContainer{
	SMARTATTRIBUTEUNDEFINED: SmartAttributeCode{
		smartAttributeCode: smartAttributeUndefined,
		Code:               0,
		Type:               "Unknown",
	},
	SMARTATTRTEMPERATURECELSIUS: SmartAttributeCode{
		smartAttributeCode: smartAttrTemperatureCelsius,
		Code:               194,
		Type:               "Old_age",
	},
	SMARTATTRPOWERONHOURS: SmartAttributeCode{
		smartAttributeCode: smartAttrPowerOnHours,
		Code:               9,
		Type:               "Old_age",
	},
	SMARTATTRPOWERCYCLECOUNT: SmartAttributeCode{
		smartAttributeCode: smartAttrPowerCycleCount,
		Code:               12,
		Type:               "Old_age",
	},
}

// invalidSmartAttributeCode is an invalid sentinel value for SmartAttributeCode
var invalidSmartAttributeCode = SmartAttributeCode{
	smartAttributeCode: -1,
}

// allSlice returns a slice of all enum values.
// This method is useful for iterating over all enum values in a loop.
func (s smartAttributeCodesContainer) allSlice() []SmartAttributeCode {
	return []SmartAttributeCode{
		SmartAttributeCodes.SMARTATTRIBUTEUNDEFINED,
		SmartAttributeCodes.SMARTATTRTEMPERATURECELSIUS,
		SmartAttributeCodes.SMARTATTRPOWERONHOURS,
		SmartAttributeCodes.SMARTATTRPOWERCYCLECOUNT,
	}
}

// All returns an iterator over all enum values.
// This method is useful for iterating over all enum values in a loop.
func (s smartAttributeCodesContainer) All() iter.Seq[SmartAttributeCode] {
	return func(yield func(SmartAttributeCode) bool) {
		for _, v := range s.allSlice() {
			if !yield(v) {
				return
			}
		}
	}
}

// ParseSmartAttributeCode parses the input value into an enum value.
// It returns the parsed enum value or an error if the input is invalid.
// It is a convenience function that can be used to parse enum values from
// various input types, such as strings, byte slices, or other enum types.
func ParseSmartAttributeCode(input any) (SmartAttributeCode, error) {
	switch v := input.(type) {
	case SmartAttributeCode:
		return v, nil
	case string:
		if result := stringToSmartAttributeCode(v); result != nil {
			return *result, nil
		}
	case fmt.Stringer:
		if result := stringToSmartAttributeCode(v.String()); result != nil {
			return *result, nil
		}
	case []byte:
		if result := stringToSmartAttributeCode(string(v)); result != nil {
			return *result, nil
		}
	case int:
		if result := numberToSmartAttributeCode(v); result != nil {
			return *result, nil
		}
	case int8:
		if result := numberToSmartAttributeCode(v); result != nil {
			return *result, nil
		}
	case int16:
		if result := numberToSmartAttributeCode(v); result != nil {
			return *result, nil
		}
	case int32:
		if result := numberToSmartAttributeCode(v); result != nil {
			return *result, nil
		}
	case int64:
		if result := numberToSmartAttributeCode(v); result != nil {
			return *result, nil
		}
	case uint:
		if result := numberToSmartAttributeCode(v); result != nil {
			return *result, nil
		}
	case uint8:
		if result := numberToSmartAttributeCode(v); result != nil {
			return *result, nil
		}
	case uint16:
		if result := numberToSmartAttributeCode(v); result != nil {
			return *result, nil
		}
	case uint32:
		if result := numberToSmartAttributeCode(v); result != nil {
			return *result, nil
		}
	case uint64:
		if result := numberToSmartAttributeCode(v); result != nil {
			return *result, nil
		}
	case float32:
		if result := numberToSmartAttributeCode(v); result != nil {
			return *result, nil
		}
	case float64:
		if result := numberToSmartAttributeCode(v); result != nil {
			return *result, nil
		}
	default:
		return invalidSmartAttributeCode, fmt.Errorf("invalid type %T", input)
	}
	return invalidSmartAttributeCode, nil
}

// smartAttributeCodesNameMap is a map of enum values to their SmartAttributeCode representation
// It is used to convert string representations of enum values into their SmartAttributeCode representation.
var smartAttributeCodesNameMap = map[string]SmartAttributeCode{
	"Undefined":       SmartAttributeCodes.SMARTATTRIBUTEUNDEFINED,
	"Temperature":     SmartAttributeCodes.SMARTATTRTEMPERATURECELSIUS,
	"PowerOnHours":    SmartAttributeCodes.SMARTATTRPOWERONHOURS,
	"PowerCycleCount": SmartAttributeCodes.SMARTATTRPOWERCYCLECOUNT,
}

// stringToSmartAttributeCode converts a string representation of an enum value into its SmartAttributeCode representation
// It returns a pointer to the SmartAttributeCode representation of the enum value if the string is valid
// Otherwise, it returns nil
func stringToSmartAttributeCode(s string) *SmartAttributeCode {
	if t, ok := smartAttributeCodesNameMap[s]; ok {
		return &t
	}
	return nil
}

// numberToSmartAttributeCode converts a numeric value to a SmartAttributeCode
// It returns a pointer to the SmartAttributeCode representation of the enum value if the numeric value is valid
// Otherwise, it returns nil
func numberToSmartAttributeCode[T constraints.Integer | constraints.Float](num T) *SmartAttributeCode {
	f := float64(num)
	if math.Floor(f) != f {
		return nil
	}
	i := int(f)
	if i <= 0 || i > len(SmartAttributeCodes.allSlice()) {
		return nil
	}
	result := SmartAttributeCodes.allSlice()[i-1]
	if !result.IsValid() {
		return nil
	}
	return &result
}

// ExhaustiveSmartAttributeCodes iterates over all enum values and calls the provided function for each value.
// This function is useful for performing operations on all valid enum values in a loop.
func ExhaustiveSmartAttributeCodes(f func(SmartAttributeCode)) {
	for _, p := range SmartAttributeCodes.allSlice() {
		f(p)
	}
}

// validSmartAttributeCodes is a map of enum values to their validity
var validSmartAttributeCodes = map[SmartAttributeCode]bool{
	SmartAttributeCodes.SMARTATTRIBUTEUNDEFINED:     true,
	SmartAttributeCodes.SMARTATTRTEMPERATURECELSIUS: true,
	SmartAttributeCodes.SMARTATTRPOWERONHOURS:       true,
	SmartAttributeCodes.SMARTATTRPOWERCYCLECOUNT:    true,
}

// IsValid checks whether the SmartAttributeCodes value is valid.
// A valid value is one that is defined in the original enum and not marked as invalid.
func (s SmartAttributeCode) IsValid() bool {
	return validSmartAttributeCodes[s]
}

// MarshalJSON implements the json.Marshaler interface for SmartAttributeCode.
// It returns the JSON representation of the enum value as a byte slice.
func (s SmartAttributeCode) MarshalJSON() ([]byte, error) {
	return []byte("\"" + s.String() + "\""), nil
}

// UnmarshalJSON implements the json.Unmarshaler interface for SmartAttributeCode.
// It parses the JSON representation of the enum value from the byte slice.
// It returns an error if the input is not a valid JSON representation.
func (s *SmartAttributeCode) UnmarshalJSON(by []byte) error {
	by = bytes.Trim(bytes.Trim(by, "\""), "\"")
	news, err := ParseSmartAttributeCode(by)
	if err != nil {
		return err
	}
	*s = news
	return nil
}

// MarshalText implements the encoding.TextMarshaler interface for SmartAttributeCode.
// It returns the string representation of the enum value as a byte slice
func (s SmartAttributeCode) MarshalText() ([]byte, error) {
	return []byte("\"" + s.String() + "\""), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for SmartAttributeCode.
// It parses the string representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (s *SmartAttributeCode) UnmarshalText(by []byte) error {
	news, err := ParseSmartAttributeCode(by)
	if err != nil {
		return err
	}
	*s = news
	return nil
}

// Scan implements the database/sql.Scanner interface for SmartAttributeCode.
// It parses the string representation of the enum value from the database row.
// It returns an error if the row does not contain a valid enum value.
func (s *SmartAttributeCode) Scan(value any) error {
	news, err := ParseSmartAttributeCode(value)
	if err != nil {
		return err
	}
	*s = news
	return nil
}

// Value implements the database/sql/driver.Valuer interface for SmartAttributeCode.
// It returns the string representation of the enum value.
func (s SmartAttributeCode) Value() (driver.Value, error) {
	return s.String(), nil
}

// MarshalBinary implements the encoding.BinaryMarshaler interface for SmartAttributeCode.
// It returns the binary representation of the enum value as a byte slice.
func (s SmartAttributeCode) MarshalBinary() ([]byte, error) {
	return []byte("\"" + s.String() + "\""), nil
}

// UnmarshalBinary implements the encoding.BinaryUnmarshaler interface for SmartAttributeCode.
// It parses the binary representation of the enum value from the byte slice.
// It returns an error if the byte slice does not contain a valid enum value.
func (s *SmartAttributeCode) UnmarshalBinary(by []byte) error {
	news, err := ParseSmartAttributeCode(by)
	if err != nil {
		return err
	}
	*s = news
	return nil
}

// MarshalYAML implements the yaml.Marshaler interface for SmartAttributeCode.
// It returns the string representation of the enum value.
func (s SmartAttributeCode) MarshalYAML() ([]byte, error) {
	return []byte(s.String()), nil
}

// UnmarshalYAML implements the yaml.Unmarshaler interface for Planet.
// It parses the byte slice representation of the enum value and returns an error
// if the YAML byte slice does not contain a valid enum value.
func (s *SmartAttributeCode) UnmarshalYAML(by []byte) error {
	news, err := ParseSmartAttributeCode(by)
	if err != nil {
		return err
	}
	*s = news
	return nil
}

// smartattributecodeNames is a constant string slice containing all enum values cononical absolute names
const smartattributecodeNames = "UndefinedTemperaturePowerOnHoursPowerCycleCount"

// smartattributecodeNamesMap is a map of enum values to their canonical absolute
// name positions within the smartattributecodeNames string slice
var smartattributecodeNamesMap = map[SmartAttributeCode]string{
	SmartAttributeCodes.SMARTATTRIBUTEUNDEFINED:     smartattributecodeNames[0:9],
	SmartAttributeCodes.SMARTATTRTEMPERATURECELSIUS: smartattributecodeNames[9:20],
	SmartAttributeCodes.SMARTATTRPOWERONHOURS:       smartattributecodeNames[20:32],
	SmartAttributeCodes.SMARTATTRPOWERCYCLECOUNT:    smartattributecodeNames[32:47],
}

// String implements the Stringer interface.
// It returns the canonical absolute name of the enum value.
func (s SmartAttributeCode) String() string {
	if str, ok := smartattributecodeNamesMap[s]; ok {
		return str
	}
	return fmt.Sprintf("smartattributecode(%d)", s.smartAttributeCode)
}

// Compile-time check that all enum values are valid.
// This function is used to ensure that all enum values are defined and valid.
// It is called by the compiler to verify that the enum values are valid.
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the goenums command to generate them again.
	// Does not identify newly added constant values unless order changes
	var x [4]struct{}
	_ = x[smartAttributeUndefined]
	_ = x[smartAttrTemperatureCelsius-1]
	_ = x[smartAttrPowerOnHours-2]
	_ = x[smartAttrPowerCycleCount-3]
}
